%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1994 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- include("pimos.h").
:- module listener_cmd_builtin.
:- public do_command/1.
:- with_macro pimos.

% 2A0 ~ 2A2
:- if_equal(fep_interface,scsi).
do_command(scsi_where(A)     ) :- true | scsi_where(A).
do_command(scsi_bus_reset(A) ) :- true | scsi_bus_reset(A).
:- end_if.

%:- if_equal(processor_profile,yes).
%do_command(log_event(A)     ) :- true | log_event(A).
%:- end_if.

% 2B0 ~ 2B8
:- if_equal(string_operation,yes).
%do_command(string_operation(A,B,C,D)       ) :- true | string_operation(A,B,C,D).
do_command(binary_string_operation(A,B,C,D,E,F,G,H)) :- true | binary_string_operation(A,B,C,D,E,F,G,H).
do_command(shifting_string_operation(A,B,C,D,E,F)  ) :- true | shifting_string_operation(A,B,C,D,E,F).
do_command(unary_string_operation(A,B,C,D,E)       ) :- true | unary_string_operation(A,B,C,D,E).
%do_command(search_characters(A,B,C,D,E,F,G)    ) :- true | search_characters(A,B,C,D,E,F,G).
do_command(search_characters(A,B,C,D,E,F,G,H)   ) :- true | search_characters(A,B,C,D,E,F,G,H).
:- end_if.
%:- if_equal(double_width_integer,yes).
%do_command(add_extended(A,B,C,D)               ) :- true | add_extended(A,B,C,D).
%do_command(subtract_extended(A,B,C,D)          ) :- true | subtract_extended(A,B,C,D).
%do_command(multiply_extended(A,B,C,D)          ) :- true | multiply_extended(A,B,C,D).
%do_command(divide_extended(A,B,C,D,E)          ) :- true | divide_extended(A,B,C,D,E).
%:- end_if.
%:- if_equal(bignum,yes).
%do_command(add_bignum(A,B,C)                   ) :- true | add_bignum(A,B,C).
%do_command(subtract_bignum(A,B,C,D)            ) :- true | subtract_bignum(A,B,C,D).
%do_command(multiply_bignum_by_word(A,B,C)      ) :- true | multiply_bignum_by_word(A,B,C).
%:- end_if.

:- if_equal(supply_atom_number,yes).
% 2B9 
do_command(supply_atom_number(A,B,C)    ) :- true | supply_atom_number(A,B,C).
:- end_if.

:- if_equal(extended_floating_point,yes).
% 2BC ~ 2BF
do_command(binary_to_extended_floating_point(A,B,C,D)       ) :- true | 
           binary_to_extended_floating_point(A,B,C,D).
do_command(extended_floating_point_to_binary(A,B,C,D)       ) :- true | 
           extended_floating_point_to_binary(A,B,C,D).
do_command(extended_floating_point_to_integer(A,B)          ) :- true | 
           extended_floating_point_to_integer(A,B).
do_command(integer_to_extended_floating_point(A,B)          ) :- true | 
           integer_to_extended_floating_point(A,B).
do_command(extended_floating_point_to_floating_point(A,B)   ) :- true | 
           extended_floating_point_to_floating_point(A,B).
do_command(floating_point_to_extended_floating_point(A,B)   ) :- true | 
           floating_point_to_extended_floating_point(A,B).
do_command(extended_floating_point_sinh(A,B)  ) :- true | extended_floating_point_sinh(A,B).
do_command(extended_floating_point_sqrt(A,B)  ) :- true | extended_floating_point_sqrt(A,B).
do_command(extended_floating_point_lognp1(A,B)) :- true | extended_floating_point_lognp1(A,B).
do_command(extended_floating_point_etoxm1(A,B)) :- true | extended_floating_point_etoxm1(A,B).
do_command(extended_floating_point_tanh(A,B)  ) :- true | extended_floating_point_tanh(A,B).
do_command(extended_floating_point_atan(A,B)  ) :- true | extended_floating_point_atan(A,B).
do_command(extended_floating_point_asin(A,B)  ) :- true | extended_floating_point_asin(A,B).
do_command(extended_floating_point_atanh(A,B) ) :- true | extended_floating_point_atanh(A,B).
do_command(extended_floating_point_sin(A,B)   ) :- true | extended_floating_point_sin(A,B).
do_command(extended_floating_point_tan(A,B)   ) :- true | extended_floating_point_tan(A,B).
do_command(extended_floating_point_etox(A,B)  ) :- true | extended_floating_point_etox(A,B).
do_command(extended_floating_point_twotox(A,B)) :- true | extended_floating_point_twotox(A,B).
do_command(extended_floating_point_tentox(A,B)) :- true | extended_floating_point_tentox(A,B).
do_command(extended_floating_point_logn(A,B)  ) :- true | extended_floating_point_logn(A,B).
do_command(extended_floating_point_log10(A,B) ) :- true | extended_floating_point_log10(A,B).
do_command(extended_floating_point_log2(A,B)  ) :- true | extended_floating_point_log2(A,B).
do_command(extended_floating_point_abs(A,B)   ) :- true | extended_floating_point_abs(A,B).
do_command(extended_floating_point_cosh(A,B)  ) :- true | extended_floating_point_cosh(A,B).
do_command(extended_floating_point_neg(A,B)   ) :- true | extended_floating_point_neg(A,B).
do_command(extended_floating_point_acos(A,B)  ) :- true | extended_floating_point_acos(A,B).
do_command(extended_floating_point_cos(A,B)   ) :- true | extended_floating_point_cos(A,B).
do_command(extended_floating_point_add(A,B,C)       ) :- true | extended_floating_point_add(A,B,C).
do_command(extended_floating_point_subtract(A,B,C)  ) :- true | extended_floating_point_subtract(A,B,C).
do_command(extended_floating_point_multiply(A,B,C)  ) :- true | extended_floating_point_multiply(A,B,C).
do_command(extended_floating_point_divide(A,B,C)    ) :- true | extended_floating_point_divide(A,B,C).
:- end_if.

% 2C0 ~ 2CD
%:- if_equal(increment,yes).
%do_command(increment(A,B)                ) :- true | increment(A,B).
%do_command(decrement(A,B)                ) :- true | decrement(A,B).
%:- end_if.
do_command(add(A,B,C)                    ) :- true | add(A,B,C).
do_command(subtract(A,B,C)               ) :- true | subtract(A,B,C).
do_command(multiply(A,B,C)               ) :- true | multiply(A,B,C).
do_command(divide(A,B,C)                 ) :- true | divide(A,B,C).
do_command(modulo(A,B,C)                 ) :- true | modulo(A,B,C).
do_command(shift_left(A,B,C)             ) :- true | shift_left(A,B,C).
do_command(shift_right(A,B,C)            ) :- true | shift_right(A,B,C).
do_command(and(A,B,C)                    ) :- true | and(A,B,C).
do_command(or(A,B,C)                     ) :- true | or(A,B,C).
do_command(exclusive_or(A,B,C)           ) :- true | exclusive_or(A,B,C).
do_command(vector(A,B,C)                 ) :- true | vector(A,B,C).
do_command(string(A,B,C,D)               ) :- true | string(A,B,C,D).
do_command(vector_element(A,B,C,D)       ) :- true | vector_element(A,B,C,D).
do_command(string_element(A,B,C,D)       ) :- true | string_element(A,B,C,D).

:- if_equal(floating_point,yes).
% 2CE00 ~ 2CE01
do_command(floating_point_to_integer(A,B)) :- true | floating_point_to_integer(A,B).
do_command(integer_to_floating_point(A,B)) :- true | integer_to_floating_point(A,B).
% 2CF00 ~ 2CF03
do_command(floating_point_add(A,B,C)     ) :- true | floating_point_add(A,B,C).
do_command(floating_point_subtract(A,B,C)) :- true | floating_point_subtract(A,B,C).
do_command(floating_point_multiply(A,B,C)) :- true | floating_point_multiply(A,B,C).
do_command(floating_point_divide(A,B,C)  ) :- true | floating_point_divide(A,B,C).
:- end_if.

% 2D0 ~ 2DF
do_command(set_vector_element(A,B,C,D,E) ) :- true | set_vector_element(A,B,C,D,E).
do_command(set_string_element(A,B,C,D)   ) :- true | set_string_element(A,B,C,D).
do_command(new_atom(A)                   ) :- true | new_atom(A).
do_command(new_vector(A,B)               ) :- true | new_vector(A,B).
do_command(new_string(A,B,C)             ) :- true | new_string(A,B,C).
%do_command(new_instruction(A,B,C)             ) :- true | new_instruction(A,B,C).
%do_command(new_module(A,B)                    ) :- true | new_module(A,B).
%do_command(copy_string_elements(A,B,C,D,E,F,G)) :- true | copy_string_elements(A,B,C,D,E,F,G).
%do_command(move_string_elements(A,B,C,D,E)    ) :- true | move_string_elements(A,B,C,D,E).
%do_command(search_character(A,B,C,D,E,F)      ) :- true | search_character(A,B,C,D,E,F).
%do_command(change_element_size(A,B,C)         ) :- true | change_element_size(A,B,C).
:- if_equal(fep_interface,scsi).
do_command(scsi_command(A,B,C,D,E,F,G)   ) :- true | scsi_command(A,B,C,D,E,F,G).
do_command(scsi_transfer(A,B,C,D,E,F)    ) :- true | scsi_transfer(A,B,C,D,E,F).
do_command(scsi_abort(A,B,C)             ) :- true | scsi_abort(A,B,C).
do_command(scsi_reset(A,B,C,D)           ) :- true | scsi_reset(A,B,C,D).
do_command(scsi_init(A,B,C)              ) :- true | scsi_init(A,B,C).
:- end_if.

% 2E0 ~ 2EF
%do_command(create_shoen(A,B,C,D,E,F,G)     ) :- true | create_shoen(A,B,C,D,E,F,G).
do_command(start_shoen(A,B)                ) :- true | start_shoen(A,B).
do_command(stop_shoen(A,B)                 ) :- true | stop_shoen(A,B).
do_command(abort_shoen(A,B)                ) :- true | abort_shoen(A,B).
do_command(remove_shoen(A)                 ) :- true | remove_shoen(A).
do_command(add_shoen_resource(A,B,C,D)     ) :- true | add_shoen_resource(A,B,C,D).
do_command(shoen_statistics(A,B)           ) :- true | shoen_statistics(A,B).
do_command(allow_shoen_resource_report(A,B)) :- true | allow_shoen_resource_report(A,B).
%do_command(consume_resource(A,B)              ) :- true | consume_resource(A,B).
do_command(current_priority(A,B,C)             ) :- true | current_priority(A,B,C).
%do_command(current_processor(A,B,C)           ) :- true | current_processor(A,B,C).
do_command(calculate_priority_from_current(A,B)) :- true | calculate_priority_from_current(A,B).
do_command(calculate_priority_from_minimum(A,B)) :- true | calculate_priority_from_minimum(A,B).
do_command(current_node(A,B)                   ) :- true | current_node(A,B).
do_command(unbound(A,B)                        ) :- true | unbound(A,B).

% 2F0 ~ 2FF
do_command(merge(A,B)                    ) :- true | merge(A,B).
do_command(apply(A,B)                    ) :- true | apply(A,B).
do_command(raise(A,B,C)                  ) :- true | raise(A,B,C).
do_command(predicate_to_code(A,B,C,D)    ) :- true | predicate_to_code(A,B,C,D).
do_command(code_to_predicate(A,B,C,D,E)  ) :- true | code_to_predicate(A,B,C,D,E).
do_command(module_offset_to_code(A,B,C)  ) :- true | module_offset_to_code(A,B,C).
do_command(hash(A,B,C)                   ) :- true | hash(A,B,C).
do_command(module_element(A,B,C)         ) :- true | module_element(A,B,C).

:- if_equal(apply_tracing,yes).
do_command(apply_tracing(A,B,C)          ) :- true | apply_tracing(A,B,C).
:- end_if.
:- if_equal(apply_spying,yes).
do_command(apply_spying(A,B,C,D)         ) :- true | apply_spying(A,B,C,D).
:- end_if.
%do_command(create_profiling_shoen(A,B,C,D,E,F,G)) :- true | create_profiling_shoen(A,B,C,D,E,F,G).
%:- if_equal(shoen_profile,yes).
%do_command(shoen_profile(A,B)                   ) :- true | shoen_profile(A,B).
%:- end_if.
%:- if_equal(processor_profile,yes).
%do_command(processor_profile(A,B)               ) :- true | processor_profile(A,B).
%:- end_if.
%do_command(set_heap_alert(A,B)                  ) :- true | set_heap_alert(A,B).
%do_command(get_heap_size(A,B)                   ) :- true | get_heap_size(A,B).
%do_command(set_timer(A,B)                       ) :- true | set_timer(A,B).

% UNIFY
do_command(unify(A,B)                    ) :- true | A=B.
do_command({(=),A,B}                     ) :- true | A=B.
do_command({(:=),A,B}                    ) :- true | {(:=),A,B}.

:- if_equal(bignum,yes).
do_command({(^:=),A,B}                   ) :- true | {(^:=),A,B}.
:- end_if.

:- if_equal(floating_point,yes).
do_command({($:=),A,B}                   ) :- true | {($:=),A,B}.
:- end_if.

:- if_equal(extended_floating_point,yes).
do_command({($$:=),A,B}                  ) :- true | {($$:=),A,B}.
:- end_if.


% UTILITY
do_command(true                          ) :- true | true.

% GUARD BUILTIN
do_command(tag_and_value(E,T,V)     ) :- tag_and_value(E,T1,V1) | T=T1, V=V1.
do_command(display_console(X)       ) :- display_console(X)     | true.


:- switch(machine).
:- case(mpsi,pimm).
:- if_equal(processor_profile,yes).
do_command(log_event(A)                         ) :- true | log_event(A).
:- end_if.
:- if_equal(string_operation,yes).
do_command(string_operation(A,B,C,D)            ) :- true | string_operation(A,B,C,D).
do_command(search_characters(A,B,C,D,E,F,G)     ) :- true | search_characters(A,B,C,D,E,F,G).
:- end_if.
:- if_equal(double_width_integer,yes).
do_command(add_extended(A,B,C,D)                ) :- true | add_extended(A,B,C,D).
do_command(subtract_extended(A,B,C,D)           ) :- true | subtract_extended(A,B,C,D).
do_command(multiply_extended(A,B,C,D)           ) :- true | multiply_extended(A,B,C,D).
do_command(divide_extended(A,B,C,D,E)           ) :- true | divide_extended(A,B,C,D,E).
:- end_if.
:- if_equal(bignum,yes).
do_command(add_bignum(A,B,C)                    ) :- true | add_bignum(A,B,C).
do_command(subtract_bignum(A,B,C,D)             ) :- true | subtract_bignum(A,B,C,D).
do_command(multiply_bignum_by_word(A,B,C)       ) :- true | multiply_bignum_by_word(A,B,C).
:- end_if.
do_command(new_instruction(A,B,C)               ) :- true | new_instruction(A,B,C).
do_command(new_module(A,B)                      ) :- true | new_module(A,B).
%do_command(copy_string_elements(A,B,C,D,E,F,G)  ) :- true | copy_string_elements(A,B,C,D,E,F,G).
%do_command(move_string_elements(A,B,C,D,E)      ) :- true | move_string_elements(A,B,C,D,E).
do_command(search_character(A,B,C,D,E,F)        ) :- true | search_character(A,B,C,D,E,F).
do_command(change_element_size(A,B,C)           ) :- true | change_element_size(A,B,C).
do_command(create_shoen(A,B,C,D,E,F,G)          ) :- true | create_shoen(A,B,C,D,E,F,G).
do_command(current_processor(A,B,C)             ) :- true | current_processor(A,B,C).
:- if_equal(shoen_profile,yes).
do_command(create_profiling_shoen(A,B,C,D,E,F,G)) :- true | create_profiling_shoen(A,B,C,D,E,F,G).
do_command(shoen_profile(A,B)                   ) :- true | shoen_profile(A,B).
:- end_if.
:- if_equal(processor_profile,yes).
do_command(processor_profile(A,B)               ) :- true | processor_profile(A,B).
:- end_if.
do_command(set_heap_alert(A,B)                  ) :- true | set_heap_alert(A,B).
do_command(get_heap_size(A,B)                   ) :- true | get_heap_size(A,B).
do_command(set_timer(A,B)                       ) :- true | set_timer(A,B).

do_command(system_timer(A,B)                    ) :- system_timer(A1,B1) | A=A1, B=B1.
:- end_switch.

otherwise.
do_command(Goal) :- true |
    shoen:raise(pimos_tag#error,
        '$PIMOS$'(macro#module_name,"Unknown builtin"),Goal).


