%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1992 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:- module listener_alias.
:- public set_default_alias/2.
:- with_macro pimos.

set_default_alias(P,P1) :-
    Table=
    [
     { he,                 wrap#he,                    wrap#help},
     {{he,2},              wrap#he(A),                 wrap#help(A)},
     { com,                wrap#com,                   wrap#commands},
     {{com,2},             wrap#com(A),                wrap#commands(A)},
     { tr,                 wrap#tr,                    wrap#trace},
     { ntr,                wrap#ntr,                   wrap#notrace},
     {{ntr,2},             wrap#ntr(A),                wrap#notrace(A)},
     {{tr,2},              wrap#tr(A),                 wrap#trace(A)},
     {{sr,2},              wrap#sr(A),                 wrap#spy_reduction(A)},
     {{sf,2},              wrap#sf(A),                 wrap#spy_fork(A)},
%     {{notrace,2},         wrap#notrace((A,B)),        wrap#(notrace(A),notrace(B))},
%     {{trace,2},           wrap#trace((A,B)),          wrap#(trace(A),trace(B))},
%     {{spy_reduction,2},   wrap#spy_reduction((A,B)),  wrap#(spy_reduction(A),spy_reduction(B))},
%     {{spy_fork,2},        wrap#spy_fork((A,B)),       wrap#(spy_fork(A),spy_fork(B))},
     {{tr,4},              wrap#tr(A,B,C),             wrap#trace(A,B,C)},
     {{tr,5},              wrap#tr(A,B,C,D),           wrap#trace(A,B,C,D)},
     { ntr_all,            wrap#ntr_all,               wrap#notrace_all},
     {{ntr,4},             wrap#ntr(A,B,C),            wrap#notrace(A,B,C)},
     {{ntr,5},             wrap#ntr(A,B,C,D),          wrap#notrace(A,B,C,D)},
     { tr_shoen,           wrap#tr_shoen,              wrap#trace_shoen},
     { ntr_shoen,          wrap#ntr_shoen,             wrap#notrace_shoen},
     { sr,                 wrap#sr,                    wrap#spy_reduction},
     { sf,                 wrap#sf,                    wrap#spy_fork},
     { sp,                 wrap#sp,                    wrap#spying_patterns},
     { si,                 wrap#si,                    wrap#spying},
     {{si,2},              wrap#si(A),                 wrap#spying(A)},
     {{si,3},              wrap#si(A,B),               wrap#spying(A,B)},
     { tri,                wrap#tri,                   wrap#tracing},
     { vc,                 wrap#vc,                    wrap#varchk},
     {{vc,4},              wrap#vc(A,B,C),             wrap#varchk(A,B,C)},
     { dv,                 wrap#dv,                    wrap#display_variables},
     {{dv,2},              wrap#dv(A),                 wrap#display_variables(A)},
     {{dv,3},              wrap#dv(A,B),               wrap#display_variables(A,B)},
     { st,                 wrap#st,                    wrap#statistics},
     {{st,2},              wrap#st(A),                 wrap#statistics(A)},
     {{st,3},              wrap#st(A,B),               wrap#statistics(A,B)},
     { nst,                wrap#nst,                   wrap#nostatistics},
     { dfm,                wrap#dfm,                   wrap#default_module},
     {{dfm,2},             wrap#dfm(A),                wrap#default_module(A)},
     {{dfm,3},             wrap#dfm(A,B),              wrap#default_module(A,B)},
     { dfp,                wrap#dfp,                   wrap#default_package},
     {{dfp,2},             wrap#dfp(A),                wrap#default_package(A)},
     {{dfp,3},             wrap#dfp(A,B),              wrap#default_package(A,B)},
     { rwl,                wrap#rwl,                   wrap#rewrite_length},
     {{rwl,2},             wrap#rwl(A),                wrap#rewrite_length(A)},
     {{rwl,3},             wrap#rwl(A,B),              wrap#rewrite_length(A,B)},
     { rwd,                wrap#rwd,                   wrap#rewrite_depth},
     {{rwd,2},             wrap#rwd(A),                wrap#rewrite_depth(A)},
     {{rwd,3},             wrap#rwd(A,B),              wrap#rewrite_depth(A,B)},
     { pl,                 wrap#pl,                    wrap#print_length},
     {{pl,2},              wrap#pl(A),                 wrap#print_length(A)},
     {{pl,3},              wrap#pl(A,B),               wrap#print_length(A,B)},
     { pd,                 wrap#pd,                    wrap#print_depth},
     {{pd,2},              wrap#pd(A),                 wrap#print_depth(A)},
     {{pd,3},              wrap#pd(A,B),               wrap#print_depth(A,B)},
     { pv,                 wrap#pv,                    wrap#print_variable_mode},
     {{pv,2},              wrap#pv(A),                 wrap#print_variable_mode(A)},
     {{pv,3},              wrap#pv(A,B),               wrap#print_variable_mode(A,B)},
     { psl,                wrap#psl,                   wrap#print_string_length},
     {{psl,2},             wrap#psl(A),                wrap#print_string_length(A)},
     {{psl,3},             wrap#psl(A,B),              wrap#print_string_length(A,B)},
     { pal,                wrap#pal,                   wrap#print_atom_length},
     {{pal,2},             wrap#pal(A),                wrap#print_atom_length(A)},
     {{pal,3},             wrap#pal(A,B),              wrap#print_atom_length(A,B)},
     {{disp,2},            wrap#disp(A),               wrap#display(A)},
     {{disp,4},            wrap#disp(A,B,C),           wrap#display(A,B,C)},
     { rem,                wrap#rem,                   wrap#remember},
     {{rem,2},             wrap#rem(A),                wrap#remember(A)},
%     {{rem,3},             wrap#rem(A,B),              wrap#remember(A,B)},
     { fgt,                wrap#fgt,                   wrap#forget},
     {{fgt,2},             wrap#fgt(A),                wrap#forget(A)},
     { l,                  wrap#l,                     wrap#list},
     { v,                  wrap#v,                     wrap#value},
     { env,                wrap#env,                   wrap#environment},
     {{ins,2},             wrap#ins(A),                wrap#inspect(A)},
     {{m,2},               wrap#m(A),                  wrap#monitor(A)},
     {{m,3},               wrap#m(A,B),                wrap#monitor(A,B)},
     {{mf,2},              wrap#mf(A),                 wrap#monitor_and_fork(A)},
     {{mf,3},              wrap#mf(A,B),               wrap#monitor_and_fork(A,B)},
     { op,                 wrap#op,                    wrap#operator},
     {{op,2},              wrap#op(A),                 wrap#operator(A)},
     {{op,3},              wrap#op(A,B),               wrap#operator(A,B)},
     { calc,               wrap#calc,                  wrap#calculator},
     { comp,               wrap#comp,                  wrap#compile},
     {{comp,2},            wrap#comp(A),               wrap#compile(A)},
     {{ls,3},              wrap#ls(A,B),               wrap#listing(A,B)},
     { his,                wrap#his,                   wrap#history},
     {{his,2},             wrap#his(A),                wrap#history(A)},
     { hl,                 wrap#hl,                    wrap#history_length},
     {{hl,2},              wrap#hl(A),                 wrap#history_length(A)},
     {{hl,3},              wrap#hl(A,B),               wrap#history_length(A,B)},
     { env,                wrap#env,                   wrap#environment},
     {{env,2},             wrap#env(A),                wrap#environment(A)},
     { pg,                 wrap#pg,                    wrap#paragraph},
     { ex,                 wrap#ex,                    wrap#exit}
    ],
    A=variable("A"),
    B=variable("B"),
    C=variable("C"),
    D=variable("D"),
    set_alias(Table,P,P1).

set_alias([{Key,G,Gs}|Table],P,P2) :-
    P=[put(Key,{G,Gs},_)|P1],
    set_alias(Table,P1,P2).
set_alias([],P,P1) :- P1=P.
