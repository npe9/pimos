%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1994 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- module listener_help.
:- public help/0, help/1.
:- public commands/0, commands/1.
:- with_macro pimos.

help :- true|
    listener_utility:out(
        [putf("~s~n~s~n~s~n~s~n~s~n~s~n~s~n~s~n~s~n~s~n~s~n",Msg)]),
    Msg=[
        " help(builtin) -- Builtin predicates (body).",
        " help(goal)    -- Directions for use.",
        " help(task)    -- fore,back,stop,kill,status.",
        " help(basic)   -- take,history,alias,exit,...",
      " help(varpool) -- ""."",list,value,remember,...",
        " help(env)     -- setenv,pl,pd,statistics,...",
        " help(dir)     -- cd,pwd,def,con,ls,purge,...",
        " help(debug)   -- trace,spy,spying,varchk,...",
        " help(pg)      -- profile,interval,paragraph.",
        " help(library) -- predicates,modules,xref,...",
        " help(window)  -- operator,add_op,remove_op.",
        " help(util)    -- calc,number,in,out,inter.",
        " help(all)     -- Print all help messages."
        ].

help(all) :- true|
    listener_utility:out([do(OUT)]),
    OUT=[putf(T0,[])|OUT0],
    msg(builtin,_,T0,Msg0),
    help(Msg0,OUT0,[nl,putf(T1,[])|OUT1]),
    msg(goal,  _,T1,Msg1),
    help(Msg1,OUT1,[nl,putf(T2,[])|OUT2]),
    msg(task, _,T2,Msg2),
    help(Msg2,OUT2,[nl,putf(T3,[])|OUT3]),
    msg(basic,_,T3,Msg3),
    help(Msg3,OUT3,[nl,putf(T4,[])|OUT4]),
    msg(varpool,_,T4,Msg4),
    help(Msg4,OUT4,[nl,putf(T5,[])|OUT5]),
    msg(env,    _,T5,Msg5),
    help(Msg5,OUT5,[nl,putf(T6,[])|OUT6]),
    msg(dir,_,T6,Msg6),
    help(Msg6,OUT6,[nl,putf(T7,[])|OUT7]),
    msg(debug,  _,T7,Msg7),
    help(Msg7,OUT7,[nl,putf(T8,[])|OUT8]),
    msg(pg,     _,T8,Msg8),
    help(Msg8,OUT8,[nl,putf(T9,[])|OUT9]),
    msg(library,_,T9,Msg9),
    help(Msg9,OUT9,[nl,putf(T10,[])|OUT10]),
    msg(window,_,T10,Msg10),
    help(Msg10,OUT10,[nl,putf(T11,[])|OUT11]),
    msg(util,_,T11,Msg11),
    help(Msg11,OUT11,[]).
otherwise.
help(Type) :- true |
    listener_utility:out([do(OUT)]),
    msg(Type,_,Title,Msg),
    OUT=[putf(Title,[])|OUT1],
    help(Msg,OUT1,[]).

help([M|Msg],OUT,OUT2) :- true|
    OUT=[putf("~s~n",[M])|OUT1],
    help(Msg,OUT1,OUT2).
help([],OUT,OUT1) :- true| OUT1=OUT.





commands :- true |
    listener_utility:out(
        [putf("~s~n~s~n~s~n~s~n~s~n~s~n~s~n~s~n~s~n~s~n~s~n",Msg)]),
    Msg=[
        " commands(builtin) -- Builtin predicates (body).",
        " commands(goal)    -- Directions for use.",
        " commands(task)    -- fore,back,stop,kill,status.",
        " commands(basic)   -- take,history,alias,exit,...",
      " commands(varpool) -- ""."",list,value,remember,...",
        " commands(env)     -- setenv,pl,pd,statistics,...",
        " commands(dir)     -- cd,pwd,def,con,ls,purge,...",
        " commands(debug)   -- trace,spy,spying,varchk,...",
        " commands(pg)      -- profile,interval,paragraph.",
        " commands(library) -- predicates,modules,xref,...",
        " commands(window)  -- operator,add_op,remove_op.",
        " commands(util)    -- calc,number,in,out,inter.",
        " commands(all)     -- Print all Listener commands."
        ].

commands(builtin) :- true| help(builtin).
commands(all) :- true |
    listener_utility:out([do(OUT)]),
    OUT=[putf(T0,[])|OUT0],
    msg(builtin,_,T0,Msg0),
    help(Msg0,OUT0,[nl,putf(T1,[])|OUT1]),
    msg(goal,      FS1,T1,Msg1),
    commands(Msg1,FS1,OUT1,[nl,putf(T2,[])|OUT2]),
    msg(task,      FS2,T2,Msg2),
    commands(Msg2,FS2,OUT2,[nl,putf(T3,[])|OUT3]),
    msg(basic,     FS3,T3,Msg3),
    commands(Msg3,FS3,OUT3,[nl,putf(T4,[])|OUT4]),
    msg(varpool,   FS4,T4,Msg4),
    commands(Msg4,FS4,OUT4,[nl,putf(T5,[])|OUT5]),
    msg(env,       FS5,T5,Msg5),
    commands(Msg5,FS5,OUT5,[nl,putf(T6,[])|OUT6]),
    msg(dir,       FS6,T6,Msg6),
    commands(Msg6,FS6,OUT6,[nl,putf(T7,[])|OUT7]),
    msg(debug,     FS7,T7,Msg7),
    commands(Msg7,FS7,OUT7,[nl,putf(T8,[])|OUT8]),
    msg(pg,        FS8,T8,Msg8),
    commands(Msg8,FS8,OUT8,[nl,putf(T9,[])|OUT9]),
    msg(library,   FS9,T9,Msg9),
    commands(Msg9,FS9,OUT9,[nl,putf(T10,[])|OUT10]),
    msg(window,    FS10,T10,Msg10),
    commands(Msg10,FS10,OUT10,[nl,putf(T11,[])|OUT11]),
    msg(util,      FS11,T11,Msg11),
    commands(Msg11,FS11,OUT11,[]).
otherwise.
commands(Type) :- true |
    listener_utility:out([do(OUT)]),
    msg(Type,FS,Title,Msg),
    OUT=[putf(Title,[])|OUT1],
    commands(Msg,FS,OUT1,[]).

commands([M1,M2|Msg],FS,OUT,OUT2) :-
    OUT=[putf(FS,[M1]), tab(2), putf(FS,[M2]), nl|OUT1],
    commands(Msg,FS,OUT1,OUT2).
commands([],_,OUT,OUT1) :- OUT1=OUT.
otherwise.
commands([M|Msg],FS,OUT,OUT2) :-
    OUT=[putf(FS,[M]),nl|OUT1],
    commands(Msg,FS,OUT1,OUT2).


msg(builtin,FS,Title,Msg) :- 
    FS="~49s",
    Title="[BUILTIN PREDICATES (BODY)]~n",
    Msg=[
        " You can use body builtin predicates as commands.",
        " Beside, there are following macros.",
        " * Unification -- X = Y.",
        " * Integer Arithmetic Expression",
        "               -- X :=  <arithmetic expression>.",
        " * Floating Point Arithmetic Expression",
        "               -- X $:= <arithmetic expression>.",
        " * Extended Floating Point Arithmetic Expression",
        "               -- X $$:= <arithmetic expression>."
        ].
msg(goal,FS,Title,Msg) :- 
    FS="~22s",
    Title="[DIRECTIVE]~n",
    Msg=[
        " ModuleSpec:Goal       -- Invoke the public Goal in ModuleSpec.",
        " ModuleSpec!Goal       -- Invoke the local Goal in ModuleSpec.",
        " Goal @ priority(RATE) -- Execute Goal under the priority RATE.",
        " Goal @ node(NODE)     -- Distribute Goal to the node NODE.",
        " Goal1, Goal2, ...     -- Execute goals in parallel.",
        " Goal1; Goal2; ...     -- Execute goals in sequence.",
        " Goals &               -- Execute Goals in the background.",
        " Goals => DEVICE       -- Execute with the standard output DEVICE.",
        " Goals <= DEVICE       -- Execute with the standard input DEVICE.",
        " Goals -> DEVICE       -- Execute with the standard message DEVICE.",
        " !!                    -- Print the last event.",
        " !EventNumber          -- Print a event designated by EventNumber.",
        " !                     -- Execute the last event.",
        "  EventNumber          -- Execute a event designated by EventNumber.",
        " [EventNumber,...]     -- Execute events designated by EventNumbers."
        ].
msg(task,FS,Title,Msg) :- true|
    FS="~19s",
    Title="[MANIPULATION FOR THE TASK]~n",
    Msg=[
        " fore <EventNumber> -- Execute the task in the foreground.",
        " back <EventNumber> -- Resume the task in the background.",
        " stop <EventNumber> -- Stop the background task.",
        " kill <EventNumber> -- Kill the background task.",
        " status             -- Print the status of all tasks."
        ].
msg(basic,FS,Title,Msg) :- 
    FS="~22s",
    Title="[BASIC COMMANDS]~n",
    Msg=[
        " take(FILE)            -- Execute commands in FILE.",
        " history[his]          -- Print the events history.",
        " history(N)[his]       -- Print the last N events.",
        " history_length[hl]    -- Change length of the history queue.",
        " alias(ALIAS,GOALS)    -- Define an alias.",
        " alias(ALIAS)          -- Print the alias definition of ALIAS.",
        " alias                 -- Print the alias definitions.",
        " unalias(ALIAS)        -- Remove the alias definition of ALIAS.",
        " alias_expansion       -- Set the counter for alias expansion.",
%        " if(COND,THEN,ELSE)    -- Execute THEN if COND is true, else ELSE.",
        " prompt(PROMPT)        -- Change the prompt to PROMPT.",
%        " version               -- Print the version number.",
        " date                  -- Print the date.",
        " errors                -- List errors.",
        " last_error            -- Print the last error.",
        " error_queue_length    -- Change the length of the error queue.",
        " display(?TERM)[disp]  -- Print TERM.",
        " help <Type> [he]      -- Print Listener commands.",
        " commands <Type> [com] -- Print Listener commands.",
        " suspend               -- Push Listener to the background of Shell.",
        " exit[ex]              -- Exit Listener."
        ].
msg(util,FS,Title,Msg) :- 
    FS="~17s",
    Title="[UTILITY COMMANDS]~n",
    Msg=[
        " calculator[calc] -- Invoke the Hexa-Calculator.",
        " number(INTEGER)  -- Print INTEGER by 2,8,10,16 radixes.",
        " in(^STREAM)      -- Get the standard input to STREAM.",
        " out(^STREAM)     -- Get the standard output to STREAM.",
        " inter(^STREAM)   -- Get the standard interaction to STREAM."
        ].
msg(window,FS,Title,Msg) :- 
    FS="~24s",
    Title="[MANIPULATION FOR THE LISTENER WINDOW]~n",
    Msg=[
        " operator[op]            -- Print all operator definitions.",
        " operator(OP)[op]        -- Print the operator definition of OP.",
        " add_op(PREC,TYPE,OP)    -- Add operator to Listener window.",
        " remove_op(PREC,TYPE,OP) -- Remove operator from Listener window."
%        " position                -- Move Listener window.",
%        " size                    -- Reshape Listener window.",
%        " close                   -- Close Listener window.",
%        " open                    -- Open Listener window.",
%        " hide                    -- Hide Listener window.",
%        " font(FONT)              -- Change window font to FONT.",
%        " title(TITLE)            -- Change window title to TITLE."
        ].
msg(varpool,FS,Title,Msg) :-
    FS="~22s",
    Title="[MANIPULATION FOR VARIABLES]~n",
    Msg=[
        " display_variables[dv] -- Set type of displayed variables.",
        " query                 -- Set query mode for variables.",
        " list[l]               -- List contents of Variable pool.",
        " value[v]              -- Display contents of Variable pool.",
        " remember[rem]         -- Set remembering mode.",
        " remember(VAR)[rem]    -- Remember the binding of VAR.",
        " forget[fgt]           -- Reset remembering mode.",
        " forget(VAR)[fgt]      -- Forget the binding of VAR.",
      " ""."" [forget(all)]     -- Forget the binding of all variables."
        ].
msg(debug,FS,Title,Msg) :-
    FS="~28s",
    Title="[DEBUG COMMANDS]~n",
    Msg=[
        " trace[tr]                   -- Set trace mode.",
        " spy_fork[sf]                -- Set spy fork mode.",
        " spy_reduction[sr]           -- Set spy reduction mode.",
        " notrace[ntr]                -- Reset trace and spy mode.",
        " trace(GOALS)[tr]            -- Trace GOALS.",
        " spy_fork(GOALS)[sf]         -- Execute GOALS by fork spy.",
        " spy_reduction(GOALS)[sr]    -- Execute GOALS by reduction spy.",
        " notrace(GOALS)[ntr]         -- Execute GOALS.",
        " trace(M,P,A)[tr]            -- Set default trace mode of M:P/A.",
        " notrace(M,P,A)[ntr]         -- Reset default trace mode of M:P/A.",
        " notrace_all[ntr_all]        -- Reset default trace mode of all predicates.",
        " tracing[tri]                -- List predicates set default trace mode ON.",
        " spy(M,P,A)                  -- Set spy mode of M:P/A.",
        " nospy(M,P,A)                -- Reset spy mode of M:P/A.",
        " nospy                       -- Reset spy mode of all predicates.",
        " spying_patterns[sp]         -- List spying patterns.",
        " spying[si]                  -- List spying predicates.",
        " display_ancestor            -- Set display mode of ancestor goal.",
        " scope                       -- Change scope of variables in the tracer.",
        " inspect(?TERM)[ins]         -- Inspect TERM.",
        " monitor(?TERM)[m]           -- Monitor TERM.",
        " monitor_and_fork(?TERM)[mf] -- Monitor TERM with exclusive window."
        ].
msg(pg,FS,Title,Msg) :-
    FS="~20s",
    Title="[PARAGRAPH COMMANDS]~n",
    Msg=[
        " profile(GOALS)      -- Measure the execution profile of GOALS.",
        " profile_msg(GOALS)  -- Measure the communication profile of GOALS.",
        " profile_node(GOALS) -- Measure the processing profile of GOALS.",
        " interval            -- Change profiling interval.",
        " paragraph[pg]       -- Invoke the ParaGraph."
        ].
msg(dir,FS,Title,Msg) :-
    FS="~20s",
    Title="[MANIPULATION FOR THE DIRECTORY]~n",
    Msg=[
        " pwd                 -- Print current directory.",
        " cd                  -- Change current directory to home.",
        " cd(DIRECTORY)       -- Change current directory to DIRECTORY.",
        " pushd(DIRECTORY)    -- Push DIRECTORY to directory stack.",
        " pushd(INTEGER)      -- Rotate directory statck INTEGER times.",
        " popd                -- Pop directory from directory stack.",
        " dirs                -- Print directory stack.",
        " def(ATOM,DIRECTORY) -- Define DIRECTORY to ATOM.",
        " def                 -- List defined atoms.",
        " con(ATOM)           -- Change current directory to defined ATOM.",
        " ls                  -- List contents of current directory.",
        " ls(WILDCARD)        -- List contents of directory matched WILDCARD.",
        " ls(WILDCARD,^FILES) -- Get contents of directory to FILES.",
        " delete(WILDCARD)    -- Delete files matched WILDCARD.",
        " deleted             -- List deleted files.",
        " deleted(WILDCARD)   -- List deleted files matched WILDCARD.",
        " undelete(WILDCARD)  -- Undelete files matched WILDCARD.",
        " purge               -- Purge current directory.",
        " expunge             -- Expunge deleted files.",
        " attributes(FILE)    -- Print attributes of FILE."
        ].
msg(env,FS,Title,Msg) :-
    FS="~27s",
    Title="[ENVIRONMENT COMMANDS]~n",
    Msg=[
        " environment(ENV)[env]      -- Print all environment variables of ENV.",
        " environment[env]           -- Print environment parameters of Listener.",
        " printenv(NAME)             -- Print value of environment variable NAME.",
        " printenv                   -- Print values of all environment variables.",
        " getenv(NAME,^STATUS)       -- Get value of environment variable NAME.",
        " getenv(^STATUS)            -- Get values of all environment variables.",
        " setenv(NAME,VALUE,^STATUS) -- Set VALUE to environment variable NAME.",
        " unsetenv(NAME,^STATUS)     -- Remove environment variable NAME.",
        " statistics[st]             -- Set statistics mode.",
        " nostatistics[nst]          -- Reset statistics mode.",
        " default_package[dfp]       -- Change default package.",
        " default_module[dfm]        -- Change default module.",
        " change_macro               -- Change macro module of Listener.",
        " change_nodes               -- Change available nodes for a task.",
        " change_portray(ModuleSpec) -- Change portray process.",
        " rewrite_depth[rwd]         -- Change rewrite depth.",
        " rewrite_length[rwl]        -- Change rewrite length.",
        " print_depth[pd]            -- Change print depth.",
        " print_length[pl]           -- Change print length.",
        " print_atom_length[pal]     -- Change print atom length.",
        " print_string_length[psl]   -- Change print string length.",
        " print_integer_radix        -- Change print integer radix.",
        " print_variable_mode[pv]    -- Change print mode for variable."
        ].
msg(library,FS,Title,Msg) :-
    FS="~27s",
    Title="[LIBRARY COMMANDS]~n",
    Msg=[
        " predicates(ModuleSpec,P,A) -- List all predicates of ModuleSpec:P/A.",
        " modules(PACKAGE)           -- List modules in PACKAGE.",
        " xref(ModuleSpec)           -- List modules refer to ModuleSpec.",
        " info(ModuleSpec)           -- Print informations of ModuleSpec."
        ].
otherwise.
msg(_,_,Title,Msg) :-
    Title=">Unknown item.~n",
    Msg=[].
