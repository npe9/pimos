%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1994 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- module listener_cmd_table.
:- public is_command/3.
:- with_macro pimos.

%%%%%%%%%%%%%%%%%%%%%%%%%
%  BUILTIN PREDICATES   %
% 1:User 2:Pimos 3:Firm %
%%%%%%%%%%%%%%%%%%%%%%%%%
is_command(add_extended,                    4,M) :- M=1.
is_command(subtract_extended,               4,M) :- M=1.
is_command(multiply_extended,               4,M) :- M=1.
is_command(divide_extended,                 5,M) :- M=1.
is_command(add_bignum,                      3,M) :- M=1.
is_command(subtract_bignum,                 4,M) :- M=1.
is_command(multiply_bignum_by_word,         3,M) :- M=1.

is_command(string_operation,                4,M) :- M=1.
is_command(binary_string_operation,         8,M) :- M=0.
is_command(shifting_string_operation,       6,M) :- M=0.
is_command(unary_string_operation,          5,M) :- M=0.
is_command(search_characters,               7,M) :- M=3.
is_command(search_characters,               8,M) :- M=0.

%is_command(increment,                       2,M) :- M=1.
%is_command(decrement,                       2,M) :- M=1.
is_command(add,                             3,M) :- M=1.
is_command(subtract,                        3,M) :- M=1.
is_command(multiply,                        3,M) :- M=1.
is_command(divide,                          3,M) :- M=1.
is_command(modulo,                          3,M) :- M=1.
is_command(shift_left,                      3,M) :- M=1.
is_command(shift_right,                     3,M) :- M=1.
is_command(and,                             3,M) :- M=1.
is_command(or,                              3,M) :- M=1.
is_command(exclusive_or,                    3,M) :- M=1.
is_command(vector,                          3,M) :- M=1.
is_command(string,                          4,M) :- M=1.
is_command(vector_element,                  4,M) :- M=1.
is_command(string_element,                  4,M) :- M=1.

is_command(supply_atom_number,              3,M) :- M=2.

is_command(binary_to_extended_floating_point,           4,M) :- M=2.
is_command(extended_floating_point_to_binary,           4,M) :- M=2.
is_command(extended_floating_point_to_integer,          2,M) :- M=1.
is_command(integer_to_extended_floating_point,          2,M) :- M=1.
is_command(extended_floating_point_to_floating_point,   2,M) :- M=1.
is_command(floating_point_to_extended_floating_point,   2,M) :- M=1.
is_command(extended_floating_point_sinh,      2,M) :- M=1.
is_command(extended_floating_point_sqrt,      2,M) :- M=1.
is_command(extended_floating_point_lognp1,    2,M) :- M=1.
is_command(extended_floating_point_etoxm1,    2,M) :- M=1.
is_command(extended_floating_point_tanh,      2,M) :- M=1.
is_command(extended_floating_point_atan,      2,M) :- M=1.
is_command(extended_floating_point_asin,      2,M) :- M=1.
is_command(extended_floating_point_atanh,     2,M) :- M=1.
is_command(extended_floating_point_sin,       2,M) :- M=1.
is_command(extended_floating_point_tan,       2,M) :- M=1.
is_command(extended_floating_point_etox,      2,M) :- M=1.
is_command(extended_floating_point_twotox,    2,M) :- M=1.
is_command(extended_floating_point_tentox,    2,M) :- M=1.
is_command(extended_floating_point_logn,      2,M) :- M=1.
is_command(extended_floating_point_log10,     2,M) :- M=1.
is_command(extended_floating_point_log2,      2,M) :- M=1.
is_command(extended_floating_point_abs,       2,M) :- M=1.
is_command(extended_floating_point_cosh,      2,M) :- M=1.
is_command(extended_floating_point_neg,       2,M) :- M=1.
is_command(extended_floating_point_acos,      2,M) :- M=1.
is_command(extended_floating_point_cos,       2,M) :- M=1.
is_command(extended_floating_point_add,     3,M) :- M=1.
is_command(extended_floating_point_subtract,3,M) :- M=1.
is_command(extended_floating_point_multiply,3,M) :- M=1.
is_command(extended_floating_point_divide,  3,M) :- M=1.

is_command(floating_point_to_integer,       2,M) :- M=1.
is_command(integer_to_floating_point,       2,M) :- M=1.
is_command(floating_point_add,              3,M) :- M=1.
is_command(floating_point_subtract,         3,M) :- M=1.
is_command(floating_point_multiply,         3,M) :- M=1.
is_command(floating_point_divide,           3,M) :- M=1.

is_command(set_vector_element,              5,M) :- M=1.
is_command(set_string_element,              4,M) :- M=1.
is_command(new_atom,                        1,M) :- M=1.
is_command(new_vector,                      2,M) :- M=1.
is_command(new_string,                      3,M) :- M=1.
is_command(new_instruction,                 3,M) :- M=3.
is_command(new_module,                      2,M) :- M=3.
%is_command(copy_string_elements,            7,M) :- M=1.
%is_command(move_string_elements,            5,M) :- M=1.
is_command(search_character,                6,M) :- M=1.
is_command(change_element_size,             3,M) :- M=1.

is_command(scsi_command,                    7,M) :- M=2.
is_command(scsi_transfer,                   6,M) :- M=2.
is_command(scsi_abort,                      3,M) :- M=2.
is_command(scsi_reset,                      4,M) :- M=2.
is_command(scsi_init,                       3,M) :- M=2.
is_command(scsi_where,                      1,M) :- M=2.
is_command(scsi_bus_reset,                  1,M) :- M=2.

is_command(create_shoen,                    7,M) :- M=2.
is_command(start_shoen,                     2,M) :- M=2.
is_command(stop_shoen,                      2,M) :- M=2.
is_command(abort_shoen,                     2,M) :- M=2.
is_command(remove_shoen,                    1,M) :- M=2.
is_command(add_shoen_resource,              4,M) :- M=2.
is_command(shoen_statistics,                2,M) :- M=2.
is_command(allow_shoen_resource_report,     2,M) :- M=2.
is_command(consume_resource,                2,M) :- M=1.
is_command(current_priority,                3,M) :- M=1.
is_command(current_processor,               3,M) :- M=1.
is_command(calculate_priority_from_current, 2,M) :- M=1.
is_command(calculate_priority_from_minimum, 2,M) :- M=1.
is_command(current_node,                    2,M) :- M=1.
is_command(unbound,                         2,M) :- M=1.

is_command(merge,                           2,M) :- M=1.
is_command(apply,                           2,M) :- M=1.
is_command(raise,                           3,M) :- M=1.
is_command(predicate_to_code,               4,M) :- M=1.
is_command(code_to_predicate,               5,M) :- M=1.
is_command(module_offset_to_code,           3,M) :- M=1.
is_command(hash,                            3,M) :- M=1.
is_command(module_element,                  3,M) :- M=1.
is_command(apply_tracing,                   3,M) :- M=1.
is_command(apply_spying,                    4,M) :- M=1.
is_command(create_profiling_shoen,          7,M) :- M=2.
is_command(shoen_profile,                   2,M) :- M=2.
is_command(processor_profile,               2,M) :- M=2.
is_command(log_event,                       1,M) :- M=1.
is_command(set_heap_alert,                  2,M) :- M=2.
is_command(get_heap_size,                   2,M) :- M=1.
is_command(set_timer,                       2,M) :- M=2.

is_command((=),                             2,M) :- M=1.
is_command((:=),                            2,M) :- M=1.
is_command(($:=),                           2,M) :- M=1.

is_command(true,                            0,M) :- M=1.
%is_command(floating_point_minus,           2,M) :- M=1.
%is_command(floating_point_abs,             2,M) :- M=1.
%is_command(floating_point_min,             3,M) :- M=1.
%is_command(floating_point_max,             3,M) :- M=1.
%is_command(floating_point_floor,           2,M) :- M=1.
%is_command(floating_point_sqrt,            2,M) :- M=1.
%is_command(floating_point_ln,              2,M) :- M=1.
%is_command(floating_point_log,             2,M) :- M=1.
%is_command(floating_point_exp,             2,M) :- M=1.
%is_command(floating_point_pow,             3,M) :- M=1.
%is_command(floating_point_sin,             2,M) :- M=1.
%is_command(floating_point_cos,             2,M) :- M=1.
%is_command(floating_point_tan,             2,M) :- M=1.
%is_command(floating_point_asin,            2,M) :- M=1.
%is_command(floating_point_acos,            2,M) :- M=1.
%is_command(floating_point_atan,            2,M) :- M=1.
%is_command(floating_point_atan,            3,M) :- M=1.
%is_command(floating_point_sinh,            2,M) :- M=1.
%is_command(floating_point_cosh,            2,M) :- M=1.
%is_command(floating_point_tanh,            2,M) :- M=1.

is_command(tag_and_value,                   3,M) :- M=3.
is_command(display_console,                 1,M) :- M=1.
is_command(system_timer,                    2,M) :- M=1.

%%%%%%%%%%%%%%%%%%%%%%%%%
% variable pool command %
%%%%%%%%%%%%%%%%%%%%%%%%%
is_command(remember,         0,M) :- M=listener_cmd_varpool.
is_command(remember,         1,M) :- M=listener_cmd_varpool.
%is_command(remember,         2,M) :- M=listener_cmd_varpool.
is_command(forget,           0,M) :- M=listener_cmd_varpool.
is_command(forget,           1,M) :- M=listener_cmd_varpool.
is_command(list,             0,M) :- M=listener_cmd_varpool.
is_command(value,            0,M) :- M=listener_cmd_varpool.
is_command(display_variables,0,M) :- M=listener_cmd_varpool.
is_command(display_variables,1,M) :- M=listener_cmd_varpool.
is_command(display_variables,2,M) :- M=listener_cmd_varpool.
is_command(query,            0,M) :- M=listener_cmd_varpool.
is_command(query,            1,M) :- M=listener_cmd_varpool.
is_command(query,            2,M) :- M=listener_cmd_varpool.

%%%%%%%%%%%%%%%%%
% debug command %
%%%%%%%%%%%%%%%%%
is_command(trace,           0,M) :- M=listener_cmd_debug.
is_command(notrace,         0,M) :- M=listener_cmd_debug.
is_command(trace_shoen,     0,M) :- M=listener_cmd_debug.
is_command(notrace_shoen,   0,M) :- M=listener_cmd_debug.
is_command(spy_reduction,   0,M) :- M=listener_cmd_debug.
is_command(spy_fork,        0,M) :- M=listener_cmd_debug.
is_command(spy,             4,M) :- M=listener_cmd_debug.
is_command(nospy,           4,M) :- M=listener_cmd_debug.
is_command(spy,             3,M) :- M=listener_cmd_debug.
is_command(nospy,           3,M) :- M=listener_cmd_debug.
is_command(spy,             2,M) :- M=listener_cmd_debug.
is_command(nospy,           2,M) :- M=listener_cmd_debug.
is_command(nospy,           0,M) :- M=listener_cmd_debug.
is_command(spy,             1,M) :- M=listener_cmd_debug.
is_command(nospy,           1,M) :- M=listener_cmd_debug.
is_command(spying_patterns, 0,M) :- M=listener_cmd_debug.
is_command(spying,          0,M) :- M=listener_cmd_debug.
is_command(spying,          1,M) :- M=listener_cmd_debug.
is_command(spying,          2,M) :- M=listener_cmd_debug.
is_command(trace,           1,M) :- M=listener_cmd_debug.
is_command(trace,           3,M) :- M=listener_cmd_debug.
is_command(trace,           4,M) :- M=listener_cmd_debug.
is_command(notrace_all,     0,M) :- M=listener_cmd_debug.
is_command(notrace,         1,M) :- M=listener_cmd_debug.
is_command(notrace,         3,M) :- M=listener_cmd_debug.
is_command(notrace,         4,M) :- M=listener_cmd_debug.
is_command(tracing,         0,M) :- M=listener_cmd_debug.
is_command(display_ancestor,0,M) :- M=listener_cmd_debug.
is_command(display_ancestor,1,M) :- M=listener_cmd_debug.
is_command(display_ancestor,2,M) :- M=listener_cmd_debug.
is_command(inspect,         1,M) :- M=listener_cmd_debug.
is_command(monitor,         1,M) :- M=listener_cmd_debug.
is_command(monitor,         2,M) :- M=listener_cmd_debug.
is_command(monitor_and_fork,1,M) :- M=listener_cmd_debug.
is_command(monitor_and_fork,2,M) :- M=listener_cmd_debug.

%%%%%%%%%%%%%%%%%%%%%
% PARAGRAPH COMMAND %
%%%%%%%%%%%%%%%%%%%%%
is_command(paragraph,       0,M) :- M=listener_cmd_paragraph.
is_command(interval,        0,M) :- M=listener_cmd_paragraph.
is_command(interval,        1,M) :- M=listener_cmd_paragraph.

%%%%%%%%%%%%%%%%%%%%%
% directory command %
%%%%%%%%%%%%%%%%%%%%%
%is_command(listing,         0,M) :- M=listener_cmd_directory.
%is_command(listing,         1,M) :- M=listener_cmd_directory.
is_command(listing,         2,M) :- M=listener_cmd_directory.
is_command(pwd,             0,M) :- M=listener_cmd_directory.
is_command(pwd,             1,M) :- M=listener_cmd_directory.
is_command(cd,              0,M) :- M=listener_cmd_directory.
is_command(cd,              1,M) :- M=listener_cmd_directory.
is_command(cd,              2,M) :- M=listener_cmd_directory.
is_command(delete,          1,M) :- M=listener_cmd_directory.
is_command(undelete,        1,M) :- M=listener_cmd_directory.
is_command(deleted,         0,M) :- M=listener_cmd_directory.
is_command(deleted,         1,M) :- M=listener_cmd_directory.
is_command(purge,           0,M) :- M=listener_cmd_directory.
is_command(expunge,         0,M) :- M=listener_cmd_directory.
is_command(def,             2,M) :- M=listener_cmd_directory.
is_command(def,             1,M) :- M=listener_cmd_directory.
is_command(def,             0,M) :- M=listener_cmd_directory.
is_command(con,             1,M) :- M=listener_cmd_directory.
is_command(pushd,           0,M) :- M=listener_cmd_directory.
is_command(pushd,           1,M) :- M=listener_cmd_directory.
is_command(popd,            0,M) :- M=listener_cmd_directory.
is_command(dirs,            0,M) :- M=listener_cmd_directory.
is_command(attributes,      1,M) :- M=listener_cmd_directory.

%%%%%%%%%%%%%%%%%%%%%%%
% environment command %
%%%%%%%%%%%%%%%%%%%%%%%
is_command(printenv,0,                      M) :- M=listener_cmd_environment.
is_command(printenv,1,                      M) :- M=listener_cmd_environment.
is_command(getenv,1,                        M) :- M=listener_cmd_environment.
is_command(getenv,2,                        M) :- M=listener_cmd_environment.
is_command(setenv,1,                        M) :- M=listener_cmd_environment.
is_command(setenv,3,                        M) :- M=listener_cmd_environment.
is_command(unsetenv,1,                      M) :- M=listener_cmd_environment.
is_command(unsetenv,2,                      M) :- M=listener_cmd_environment.
%is_command(get,0,                           M) :- M=listener_cmd_environment.
%is_command(get,1,                           M) :- M=listener_cmd_environment.
%is_command(get,2,                           M) :- M=listener_cmd_environment.
%is_command(set,2,                           M) :- M=listener_cmd_environment.
%is_command(reset,2,                         M) :- M=listener_cmd_environment.
is_command(mode,0,                          M) :- M=listener_cmd_environment.
is_command(mode,1,                          M) :- M=listener_cmd_environment.
is_command(rewrite_length,0,                M) :- M=listener_cmd_environment.
is_command(rewrite_length,1,                M) :- M=listener_cmd_environment.
is_command(rewrite_length,2,                M) :- M=listener_cmd_environment.
is_command(rewrite_depth,0,                 M) :- M=listener_cmd_environment.
is_command(rewrite_depth,1,                 M) :- M=listener_cmd_environment.
is_command(rewrite_depth,2,                 M) :- M=listener_cmd_environment.
is_command(print_length,0,                  M) :- M=listener_cmd_environment.
is_command(print_length,1,                  M) :- M=listener_cmd_environment.
is_command(print_length,2,                  M) :- M=listener_cmd_environment.
is_command(print_depth,0,                   M) :- M=listener_cmd_environment.
is_command(print_depth,1,                   M) :- M=listener_cmd_environment.
is_command(print_depth,2,                   M) :- M=listener_cmd_environment.
is_command(print_variable_mode,0,           M) :- M=listener_cmd_environment.
is_command(print_variable_mode,1,           M) :- M=listener_cmd_environment.
is_command(print_variable_mode,2,           M) :- M=listener_cmd_environment.
is_command(print_string_length,0,           M) :- M=listener_cmd_environment.
is_command(print_string_length,1,           M) :- M=listener_cmd_environment.
is_command(print_string_length,2,           M) :- M=listener_cmd_environment.
is_command(print_atom_length,0,             M) :- M=listener_cmd_environment.
is_command(print_atom_length,1,             M) :- M=listener_cmd_environment.
is_command(print_atom_length,2,             M) :- M=listener_cmd_environment.
is_command(print_integer_radix,0,           M) :- M=listener_cmd_environment.
is_command(print_integer_radix,1,           M) :- M=listener_cmd_environment.
is_command(print_integer_radix,2,           M) :- M=listener_cmd_environment.
is_command(statistics,0,                    M) :- M=listener_cmd_environment.
is_command(statistics,1,                    M) :- M=listener_cmd_environment.
is_command(statistics,2,                    M) :- M=listener_cmd_environment.
is_command(nostatistics,0,                  M) :- M=listener_cmd_environment.
is_command(default_module,0,                M) :- M=listener_cmd_environment.
is_command(default_module,1,                M) :- M=listener_cmd_environment.
is_command(default_module,2,                M) :- M=listener_cmd_environment.
is_command(default_package,0,               M) :- M=listener_cmd_environment.
is_command(default_package,1,               M) :- M=listener_cmd_environment.
is_command(default_package,2,               M) :- M=listener_cmd_environment.
is_command(environment,0,                   M) :- M=listener_cmd_environment.
is_command(environment,1,                   M) :- M=listener_cmd_environment.
is_command(change_macro,0,                  M) :- M=listener_cmd_environment.
is_command(change_macro,1,                  M) :- M=listener_cmd_environment.
is_command(change_portray,1,                M) :- M=listener_cmd_environment.
is_command(scope,       0,                  M) :- M=listener_cmd_environment.
is_command(scope,       1,                  M) :- M=listener_cmd_environment.
is_command(scope,       2,                  M) :- M=listener_cmd_environment.
is_command(change_nodes,0,                  M) :- M=listener_cmd_environment.
is_command(change_nodes,1,                  M) :- M=listener_cmd_environment.
is_command(change_nodes,2,                  M) :- M=listener_cmd_environment.

%%%%%%%%%%%%%%%%%
% basic command %
%%%%%%%%%%%%%%%%%
is_command(help,0,                          M) :- M=listener_cmd_basic.
is_command(help,1,                          M) :- M=listener_cmd_basic.
is_command(commands,0,                      M) :- M=listener_cmd_basic.
is_command(commands,1,                      M) :- M=listener_cmd_basic.
is_command(display,1,                       M) :- M=listener_cmd_basic.
is_command(display,3,                       M) :- M=listener_cmd_basic.
%is_command(apply,1,                        M) :- M=listener_cmd_basic.
is_command(take,1,                          M) :- M=listener_cmd_basic.
is_command(take,0,                          M) :- M=listener_cmd_basic.
is_command(take_init,1,                     M) :- M=listener_cmd_basic.
is_command(prompt,1,                        M) :- M=listener_cmd_basic.
is_command(prompt,2,                        M) :- M=listener_cmd_basic.
is_command(history,0,                       M) :- M=listener_cmd_basic.
is_command(history,1,                       M) :- M=listener_cmd_basic.
is_command(history_length,0,                M) :- M=listener_cmd_basic.
is_command(history_length,1,                M) :- M=listener_cmd_basic.
is_command(history_length,2,                M) :- M=listener_cmd_basic.
%is_command(version,0,                       M) :- M=listener_cmd_basic.
is_command(date,0,                          M) :- M=listener_cmd_basic.
is_command(starting_time,0,                 M) :- M=listener_cmd_basic.
is_command(suspend,0,                       M) :- M=listener_cmd_basic.
is_command(errors,0,                        M) :- M=listener_cmd_basic.
is_command(last_error,0,                    M) :- M=listener_cmd_basic.
is_command(error_queue_length,0,            M) :- M=listener_cmd_basic.
is_command(error_queue_length,1,            M) :- M=listener_cmd_basic.
is_command(error_queue_length,2,            M) :- M=listener_cmd_basic.
is_command(alias,0,                         M) :- M=listener_cmd_basic.
is_command(alias,1,                         M) :- M=listener_cmd_basic.
is_command(alias,2,                         M) :- M=listener_cmd_basic.
is_command(unalias,1,                       M) :- M=listener_cmd_basic.
is_command(alias_expansion,0,               M) :- M=listener_cmd_basic.
is_command(alias_expansion,1,               M) :- M=listener_cmd_basic.
is_command(alias_expansion,2,               M) :- M=listener_cmd_basic.

%%%%%%%%%%%%%%%%%%%
% UTILITY COMMAND %
%%%%%%%%%%%%%%%%%%%
is_command(calculator,0,                    M) :- M=listener_cmd_utility.
is_command(number,1,                        M) :- M=listener_cmd_utility.
is_command(number,2,                        M) :- M=listener_cmd_utility.
is_command(in,1,                            M) :- M=listener_cmd_utility.
is_command(out,1,                           M) :- M=listener_cmd_utility.
is_command(mes,1,                           M) :- M=listener_cmd_utility.
is_command(inter,1,                         M) :- M=listener_cmd_utility.

%%%%%%%%%%%%%%%%%%
% WINDOW COMMAND %
%%%%%%%%%%%%%%%%%%
is_command(add_op,3,                        M) :- M=listener_cmd_window.
is_command(remove_op,3,                     M) :- M=listener_cmd_window.
is_command(operator,0,                      M) :- M=listener_cmd_window.
is_command(operator,1,                      M) :- M=listener_cmd_window.
is_command(operator,2,                      M) :- M=listener_cmd_window.
%is_command(position,0,                      M) :- M=listener_cmd_window.
%is_command(position,1,                      M) :- M=listener_cmd_window.
%is_command(size,0,                          M) :- M=listener_cmd_window.
%is_command(size,1,                          M) :- M=listener_cmd_window.
%is_command(font,0,                          M) :- M=listener_cmd_window.
%is_command(font,1,                          M) :- M=listener_cmd_window.
%is_command(hide,0,                          M) :- M=listener_cmd_window.
%is_command(close,0,                         M) :- M=listener_cmd_window.
%is_command(open,0,                          M) :- M=listener_cmd_window.
%is_command(title,1,                         M) :- M=listener_cmd_window.
%is_command(title,2,                         M) :- M=listener_cmd_window.

%%%%%%%%%%%%%%%%%%%
% library command %
%%%%%%%%%%%%%%%%%%%
is_command((module),2,                      M) :- M=listener_cmd_library.
is_command((public),1,                      M) :- M=listener_cmd_library.
is_command((public),2,                      M) :- M=listener_cmd_library.
is_command(local,1,                         M) :- M=listener_cmd_library.
is_command(local,2,                         M) :- M=listener_cmd_library.
is_command(predicates,3,                    M) :- M=listener_cmd_library.
is_command(predicates,4,                    M) :- M=listener_cmd_library.
is_command(info,1,                          M) :- M=listener_cmd_library.
is_command(modules,0,                       M) :- M=listener_cmd_library.
is_command(modules,1,                       M) :- M=listener_cmd_library.

otherwise.
is_command(_, _,                            M) :- M=unknown.
