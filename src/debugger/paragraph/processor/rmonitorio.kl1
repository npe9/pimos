%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1992 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:- module rmonitor.
:- public go/0, go/1.
:- with_macro pimos.

go :-
    true |
        shoen:raise(pimos_tag#task, general_request, GenReq),
        shoen:raise(pimos_tag#task, get_std(out), StdOut),
        GenReq = [getenv(pmeter:interval,Interval)|GenReq1],
        check_interval(Interval,GenReq1,StdOut,0).

go(T) :-
    true |
        shoen:raise(pimos_tag#task, general_request, GenReq),
        shoen:raise(pimos_tag#task, get_std(out), StdOut),
        GenReq = [getenv(pmeter:interval,Interval)|GenReq1],
        check_interval(Interval,GenReq1,StdOut,T).

%%%%%% interval %%%%%%
check_interval(normal(Interval),GenReq,StdOut,T) :-
    integer(Interval) |
        GenReq = [getenv(pmeter:profiling_node,Node),connection(Result)|GenReq1],
        check_my_node(Result,Interval,Node,GenReq1,StdOut,T).
otherwise.
check_interval(_,GenReq,StdOut,T) :-
    true |
        Interval = 2000,
        GenReq = [getenv(pmeter:profiling_node,Node),connection(Result)|GenReq1],
        check_my_node(Result,Interval,Node,GenReq1,StdOut,T).

%%%%%% my_node %%%%%
% 94.4.11 K.NAKAO
check_my_node(normal(MyNode),Interval,normal(Node),GenReq,StdOut,T):- integer(MyNode) |
%        buffer:character_pool(F),
%        check_profiling_node(Interval,Node,MyNode,GenReq,F,StdOut,T).
        check_profiling_node(Interval,Node,MyNode,GenReq,StdOut,T).
check_my_node(normal(MyNode),Interval,normal(Node),GenReq,StdOut,T):- string(MyNode,_,_) |
%        buffer:character_pool(F),
%        F=[do([putb(MyNode),putl(" . "),flush(_),getwt(normal(atom(MyNode1))),flush(_)])|B],
%        check_profiling_node(Interval,Node,MyNode1,GenReq,B,StdOut,T).
        atom_table:intern(MyNode,{_,MyNode1}),
        check_profiling_node(Interval,Node,MyNode1,GenReq,StdOut,T).
check_my_node(normal(MyNode),Interval,abnormal,GenReq,StdOut,T):- integer(MyNode) |
%        buffer:character_pool(F),
%        check_profiling_node(Interval,abnormal,MyNode,GenReq,F,StdOut,T).
        check_profiling_node(Interval,abnormal,MyNode,GenReq,StdOut,T).
check_my_node(normal(MyNode),Interval,abnormal,GenReq,StdOut,T):- string(MyNode,_,_) |
%        buffer:character_pool(F),
%        F=[do([putb(MyNode),putl(" . "),flush(_),getwt(normal(atom(MyNode1))),flush(_)])|B],
%        check_profiling_node(Interval,abnormal,MyNode1,GenReq,B,StdOut,T).
        atom_table:intern(MyNode,{_,MyNode1}),
        check_profiling_node(Interval,abnormal,MyNode1,GenReq,StdOut,T).
otherwise.
check_my_node(_,_,_,GenReq,StdOut,_):- true |
        StdOut = [putb(" Cannot connect my_node!"),nl,flush(_)],
        GenReq = [].
 
%%%%%% profiling_node %%%%%%
check_profiling_node(Interval,TFEPNO,MyNode,GenReq,StdOut,T) :-
        integer(TFEPNO),
        TFEPNO \= MyNode | 
        GenReq = [getenv(pmeter:profiling_username,USER),
                  getenv(pmeter:profiling_password,PW)|GenReq1],
        check_profiling_user(TFEPNO,USER,PW,GenReq1,Interval,MyNode,StdOut,T).
check_profiling_node(Interval,TFEPNO,MyNode,GenReq,StdOut,T) :-
        integer(TFEPNO),
        TFEPNO = MyNode | 
        shoen:raise(pimos_tag#task,general_request(TFEPNO),TGR),
        TGR=[connection(Result)|TGR1],
        check_display_node0(TGR1,Interval,GenReq,MyNode,StdOut,T).
check_profiling_node(Interval,system_timer,MyNode,GenReq,StdOut,T) :-
    true |
        shoen:raise(pimos_tag#task,general_request,TGR),
        TGR=[connection(Result)|TGR1],
        check_display_node0(TGR1,Interval,GenReq,MyNode,StdOut,T).
check_profiling_node(Interval,abnormal,MyNode,GenReq,StdOut,T) :-
    true |
        shoen:raise(pimos_tag#task,general_request,TGR),
        TGR=[connection(Result)|TGR1],
        check_display_node0(TGR1,Interval,GenReq,MyNode,StdOut,T).
otherwise.
check_profiling_node(Interval,_,_,GenReq,StdOut,T) :-
    true |
        StdOut = [putb(" Cannot connect profiling_node!"),nl,flush(_)],
        GenReq=[].

%%%%% profiling_username, profiling_password %%%%%%
check_profiling_user(TFEPNO,normal(User),normal(Pass),GenReq1,Interval,MyNode,StdOut,T) :-
        true |
        atom_table:get_atom_name(User,normal(UserS)),
        atom_table:get_atom_name(Pass,normal(PassS)),
        shoen:raise(pimos_tag#task,general_request(TFEPNO,UserS,PassS),TGR), 
        TGR=[connection(Result)|TGR1],
        check_profiling_user0(Result,TGR1,Interval,GenReq1,MyNode,StdOut,T).
otherwise.
check_profiling_user(TFEPNO,_,_,GenReq1,Interval,MyNode,StdOut,T) :-
        true |
        shoen:raise(pimos_tag#task,general_request(TFEPNO),TGR), 
        TGR=[connection(Result)|TGR1],
        check_profiling_user0(Result,TGR1,Interval,GenReq1,MyNode,StdOut,T).

check_profiling_user0(normal(TNode),TGR1,Interval,GenReq1,MyNode,StdOut,T):-
       true |
        check_display_node0(TGR1,Interval,GenReq1,MyNode,StdOut,T).
check_profiling_user0(abnormal,TGR1,Interval,GenReq1,MyNode,StdOut,T):-
       true |
       StdOut = [putb(" Cannot connect profiling_node!"),nl,flush(_)],
       TGR1 = [], GenReq1 = [].
        
%%%%%% display_node %%%%%%
check_display_node0(TGR,Interval,GenReq,MyNode,StdOut,T):- true |
        GenReq = [getenv(pmeter:display_node,DNode)|GenReq1],
        check_display_node(DNode,TGR,Interval,GenReq1,MyNode,StdOut,T).

check_display_node(normal(DFEPNO),TGR,Interval,GenReq,MyNode,StdOut,T) :-
    string(DFEPNO,_,_)|
%    B=[do([putb(DFEPNO),putl(" . "),flush(_),getwt(normal(atom(ADFEPNO))),flush(_)])|B1],
%    check_display_node(normal(ADFEPNO),TGR,Interval,GenReq,MyNode,B1,StdOut,T).
    atom_table:intern(DFEPNO,{_,ADFEPNO}),
    check_display_node(normal(ADFEPNO),TGR,Interval,GenReq,MyNode,StdOut,T).
check_display_node(normal(DFEPNO),TGR,Interval,GenReq,MyNode,StdOut,T) :-
    integer(DFEPNO),
    DFEPNO \= MyNode |
        GenReq = [getenv(pmeter:display_username,USER),
                  getenv(pmeter:display_password,PW)|GenReq1],
    check_display_user(DFEPNO,USER,PW,TGR,GenReq1,Interval,MyNode,StdOut,T).
check_display_node(normal(DFEPNO),TGR,Interval,GenReq,MyNode,StdOut,T) :- 
    integer(DFEPNO),
    DFEPNO = MyNode | 
        shoen:raise(pimos_tag#task,general_request(DFEPNO),DGR),
        DGR=[connection(Result)|DGR1],
        check_display_user0(Result,DGR1,TGR,Interval,GenReq,MyNode,StdOut,T).
check_display_node(normal(DFEPNO),TGR,Interval,GenReq,MyNode,StdOut,T) :-
    atom(DFEPNO),
    DFEPNO \= MyNode |
        GenReq = [getenv(pmeter:display_username,USER),
                  getenv(pmeter:display_password,PW)|GenReq1],
        check_display_user_gateway(DFEPNO,USER,PW,TGR,GenReq1,Interval,MyNode,StdOut,T).
check_display_node(normal(DFEPNO),TGR,Interval,GenReq,MyNode,StdOut,T) :-
    atom(DFEPNO),
    DFEPNO = MyNode | 
        atom_table:get_atom_name(DFEPNO,normal(DFEPNOs)),
        shoen:raise(pimos_tag#task,general_request(DFEPNOs),DGR),
        DGR=[connection(Result)|DGR1],
        check_display_user0(Result,DGR1,TGR,Interval,GenReq,MyNode,StdOut,T).
check_display_node(abnormal,TGR,Interval,GenReq,MyNode,StdOut,T) :-
    integer(MyNode) |
        shoen:raise(pimos_tag#task,general_request(MyNode),DGR),
        DGR=[connection(Result)|DGR1],
        check_display_user0(Result,DGR1,TGR,Interval,GenReq,MyNode,StdOut,T).
check_display_node(abnormal,TGR,Interval,GenReq,MyNode,StdOut,T):-
    atom(MyNode) |
        atom_table:get_atom_name(MyNode,normal(MyNodes)),
        shoen:raise(pimos_tag#task,general_request(MyNodes),DGR),
        DGR=[connection(Result)|DGR1],
        check_display_user0(Result,DGR1,TGR,Interval,GenReq,MyNode,StdOut,T).
otherwise.
check_display_node(_,TGR,Interval,GenReq,MyNode,StdOut,T) :-
    true |
        StdOut = [putb(" Cannot connect display_node!"),nl,flush(_)],
        TGR=[], GenReq=[].

%%%%%% display_username, display_password %%%%%%
check_display_user(DFEPNO,normal(User),normal(Pass),TGR,GenReq1,Interval,MyNode,StdOut,T) :-
        atom(User), atom(Pass) |
        atom_table:get_atom_name(User,normal(UserS)),
        atom_table:get_atom_name(Pass,normal(PassS)),
        shoen:raise(pimos_tag#task,general_request(DFEPNO,UserS,PassS),DGR), 
        DGR=[connection(Result)|DGR1],
        check_display_user0(Result,DGR1,TGR,Interval,GenReq1,MyNode,StdOut,T).
otherwise.
check_display_user(DFEPNO,_,_,TGR,GenReq1,Interval,MyNode,StdOut,T) :-
        true |
        shoen:raise(pimos_tag#task,general_request(DFEPNO),DGR), 
        DGR=[connection(Result)|DGR1],
        check_display_user0(Result,DGR1,TGR,Interval,GenReq1,MyNode,StdOut,T).

%%%%%% gateway_node %%%%%%
check_display_user_gateway(DFEPNO,User,Pass,TGR,GenReq,Interval,MyNode,StdOut,T) :-
        true |
        GenReq = [getenv(pmeter:gateway_node,GWFEP)|GenReq1],
        check_gate_way(GWFEP,User,Pass,DFEPNO,TGR,Interval,GenReq1,MyNode,StdOut,T).

check_gate_way(normal(GWFEP),normal(User),normal(Pass),DFEPNO,TGR,Interval,GenReq,MyNode,StdOut,T) :-
    integer(GWFEP), atom(User), atom(Pass)|
        atom_table:get_atom_name(User,normal(UserS)),
        atom_table:get_atom_name(Pass,normal(PassS)),
        atom_table:get_atom_name(DFEPNO,normal(DFEPNOs)),
        shoen:raise(pimos_tag#task,general_request(GWFEP,DFEPNOs,UserS,PassS),DGR), 
        DGR=[connection(Result)|DGR1],
        check_display_user0(Result,DGR1,TGR,Interval,GenReq,MyNode,StdOut,T).
check_gate_way(abnormal,normal(User),normal(Pass),DFEPNO,TGR,Interval,GenReq,MyNode,StdOut,T) :-
     atom(User), atom(Pass) |
        atom_table:get_atom_name(User,normal(UserS)),
        atom_table:get_atom_name(Pass,normal(PassS)),
        atom_table:get_atom_name(DFEPNO,normal(DFEPNOs)),
        shoen:raise(pimos_tag#task,general_request(DFEPNOs,UserS,PassS),DGR), 
        DGR=[connection(Result)|DGR1],
        check_display_user0(Result,DGR1,TGR,Interval,GenReq,MyNode,StdOut,T).
otherwise.
check_gate_way(_,_,_,DFEPNO,TGR,Interval,GenReq,MyNode,StdOut,T) :-
    atom(DFEPNO) |
        atom_table:get_atom_name(DFEPNO,normal(DFEPNOs)),
        shoen:raise(pimos_tag#task,general_request(DFEPNOs),DGR), 
        DGR=[connection(Result)|DGR1],
        check_display_user0(Result,DGR1,TGR,Interval,GenReq,MyNode,StdOut,T).
otherwise.
check_gate_way(_,_,_,_,TGR,_,GenReq,_,StdOut,_) :- true |
        StdOut = [putb(" Cannot connect gateway_node!"),nl,flush(_)],
        TGR = [], GenReq = [].
 

%%%%%%%%
check_display_user0(normal(DNode),DGR1,TGR,Interval,GenReq1,MyNode,StdOut,T):-
       true |
       check_node(DNode,DGR1,TGR,Interval,GenReq1,MyNode,StdOut,T).
check_display_user0(abnormal,DGR1,TGR,Interval,GenReq1,MyNode,StdOut,T):-
       true |
        StdOut = [putb(" Cannot connect display_node!"),nl,flush(_)],
        DGR1 = [], TGR = [], GenReq1 = [].
   
%%%%%%% create_pmeter %%%%%%%%
check_node(Node,DGR,TGR,Interval,GenReq,_,StdOut,T) :- integer(Node) |
        StdOut = [],
        create_pmeter(DGR,TGR,Interval,GenReq,T).
check_node(Node,DGR,TGR,Interval,GenReq,_,StdOut,T) :- string(Node,_,_) |
        StdOut = [],
        create_pmeter(DGR,TGR,Interval,GenReq,T).
otherwise.
check_node(_,DGR,TGR,Interval,GenReq,MyNode,StdOut,_) :- true |
        StdOut = [putb(" Cannot connect display_node4!"),nl,flush(_)],
        DGR=[],TGR=[],GenReq=[].

create_pmeter(DGR,TGR,Interval,GenReq,T) :- true |
        GenReq = [getenv(pmeter:display,Color),
                  getenv(pmeter:item,INFO)],
        color_flag(Color,CF),
        info_flag(INFO,InF),
        current_node(_,NPE),
        get_topology(NPE,NX,NY),
        TGR = [request(profiling_device,_,Status)],        
        make_p_meter(DGR,Status,{NX,NY},Interval,CF,InF,T).

 color_flag(normal(color),Color):- true |
        Color = 1.
 color_flag(normal(mono),Color):- true |
        Color = 0.
 color_flag(abnormal,Color):- true |
        Color = 1.

 info_flag(normal(Integer),InF):- integer(Integer),Integer \=0  |
        InF = Integer.
 info_flag(abnormal,InF):- true |
        InF = 111.
otherwise.
 info_flag(normal(_),InF):- true |
        InF = 111.


make_p_meter(DGR,normal(Prof),PE,Interval,CF,InF,T) :-
    true |
    Prof = [create(Interval,[idling_time,local_gc,message_handling_time],Status)],
    DGR = [string_io(StrState)],
    make_p_meter1(StrState, Status, PE, Interval,CF,InF,T).
make_p_meter(DGR,abnormal,PE,Interval,CF,InF,T) :- true |
    DGR = [].

make_p_meter1(normal(StrReq,_,_), normal(Prof,_,_), PE, Interval,CF,InF,T) :- true |
    StrReq = [create(string#"paragraph##performance_meter", PST1)],
    make_p_meter2(PST1, Prof, PE, Interval,CF,InF,T).

make_p_meter2(normal(Pmeter,_,_), Prof, PE, Interval,CF,InF,T) :- true |
    r_monitor_shoen:go(Pmeter, Prof, PE, Interval, CF,InF,T).


get_topology( 1,X,Y) :-
    true |    X=1,    Y=1.
get_topology( 2,X,Y) :-
    true |    X=2,    Y=1.
get_topology( 3,X,Y) :-
    true |    X=3,    Y=1.
get_topology( 4,X,Y) :-
    true |    X=2,    Y=2.
get_topology( 6,X,Y) :-
    true |    X=3,    Y=2.
get_topology( 8,X,Y) :-
    true |    X=4,    Y=2.
get_topology( 9,X,Y) :-
    true |    X=3,    Y=3.
get_topology( 10,X,Y) :-
    true |   X=5,    Y=2.
get_topology( 12,X,Y) :-
    true |   X=4,    Y=3.
get_topology( 14,X,Y) :-
    true |   X=7,    Y=2.
get_topology( 15,X,Y) :-
    true |   X=5,    Y=3.
get_topology( 16,X,Y) :-
    true |   X=4,    Y=4.
get_topology( 18,X,Y) :-
    true |   X=6,    Y=3.
get_topology( 20,X,Y) :-
    true |   X=5,    Y=4.
get_topology( 21,X,Y) :-
    true |   X=7,    Y=3.
get_topology( 22,X,Y) :-
    true |   X=11,   Y=2.
get_topology( 24,X,Y) :-
    true |   X=6,    Y=4.
get_topology( 25,X,Y) :-
    true |   X=5,    Y=5.
get_topology( 26,X,Y) :-
    true |   X=13,   Y=3.
get_topology( 27,X,Y) :-
    true |   X=9,    Y=3.
get_topology( 28,X,Y) :-
    true |   X=7,    Y=4.
get_topology( 30,X,Y) :-
    true |   X=6,    Y=5.
get_topology( 32,X,Y) :-
    true |   X=8,    Y=4.
get_topology( 33,X,Y) :-
    true |   X=11,   Y=3.
get_topology( 35,X,Y) :-
    true |   X=7,    Y=5.
get_topology( 36,X,Y) :-
    true |   X=9,    Y=4.
get_topology( 38,X,Y) :-
    true |   X=19,   Y=2.
get_topology( 39,X,Y) :-
    true |   X=13,   Y=3.
get_topology( 40,X,Y) :-
    true |   X=8,    Y=5.
get_topology( 42,X,Y) :-
    true |   X=7,    Y=6.
get_topology( 44,X,Y) :-
    true |   X=11,   Y=4.
get_topology( 45,X,Y) :-
    true |   X=9,    Y=5.
get_topology( 46,X,Y) :-
    true |   X=23,   Y=2.
get_topology( 48,X,Y) :-
    true |   X=8,    Y=6.
get_topology( 49,X,Y) :-
    true |   X=7,    Y=7.
get_topology( 50,X,Y) :-
    true |   X=10,   Y=5.
get_topology( 52,X,Y) :-
    true |   X=13,   Y=4.
get_topology( 54,X,Y) :-
    true |   X=9,    Y=6.
get_topology( 55,X,Y) :-
    true |   X=11,   Y=5.
get_topology( 56,X,Y) :-
    true |   X=8,    Y=7.
get_topology( 57,X,Y) :-
    true |   X=19,   Y=3.
get_topology( 58,X,Y) :-
    true |   X=29,   Y=2.
get_topology( 60,X,Y) :-
    true |   X=10,   Y=6.
get_topology( 62,X,Y) :-
    true |   X=31,   Y=2.
get_topology( 63,X,Y) :-
    true |   X=9,    Y=7.
get_topology( 64,X,Y) :-
    true |   X=8,    Y=8.
get_topology( 128,X,Y) :-
    true |    X=16,    Y=8.
get_topology( 256,X,Y) :-
    true |    X=16,    Y=16.
otherwise.
get_topology(PE,X,Y) :-
    true | X=PE,   Y=1.
