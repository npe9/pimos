%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1992 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  This is Shell Operator Pool module.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- with_macro pimos.
:- module shellOperator.
:- public update/2.


update(Pimos, User) :- true |
    makePool(Pool),
    operator:empty_pool(OpPool),
    updateOperator(OpPool, NewOpPool, Pool),
    Pimos = [change_op_pool(NewOpPool) | User].

updateOperator(Old, New, []) :- true | Old = New.
otherwise.
updateOperator(Old, New, [Instruction | Pool]) :- true |
    Old = [Instruction | Next],
    updateOperator(Next, New, Pool).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%  Operator Precedence Table.  %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

makePool(Pool) :- true |
    Pool = [
%        add_op(1200, xfx, ('%')),    % Commentary
        add_op(1000, xf , ('&')),       % Expressed Back-ground-job
        add_op(1000, xfy, ('&')),       % Implied   Back-ground-job
        add_op( 900, xfy, (';')),       % Sequential Execution
        add_op( 800, xfy, ('|')),       % Piped Pararel Execution

        add_op( 500, yfx, ('<=')),      % Standard_input
        add_op( 500, yfx, ('=>')),      % Standard_output
%        add_op( 500, yfx, ('=>>')),
        add_op( 450, yfx, ('->')),      % Standard_message
%        add_op( 450, yfx, ('->>')),
%        add_op( 450, yfx, ('!>')),      % Standard_message
%%        add_op( 450, yfx, ('!>>')),

%        add_op( 400, yfx, ('-')),       % Future spec
%        add_op( 400, yfx, ('+')),       % Future spec
%        add_op( 400, yfx, ('@')),       % Future spec

        add_op( 380, fx, 'stop'),
        add_op( 380, fx, 'kill'),
        add_op( 380, fx, 'fore'),
        add_op( 380, fx, 'back'),
        add_op( 380, fx, 'status'),
        add_op( 380, fx, 'exit'),
        add_op( 380, fx, 'history'),
        add_op( 380, fx, 'unsetenv'),
        add_op( 380, fx, 'setenv'),
        add_op( 380, fx, 'getenv'),
        add_op( 380, fx, 'unset'),
        add_op( 380, fx, 'set'),
        add_op( 380, fx, 'get'),
        add_op( 380, fx, 'take'),
        add_op( 380, fx, 'cd'),
        add_op( 380, fx, 'pushd'),
        add_op( 380, fx, 'popd'),
        add_op( 380, fx, 'dirs'),
        add_op( 380, fx, 'def'),        % for Secret Command
        add_op( 380, fx, 'con'),        % for Secret Command
        add_op( 380, fx, 'alias'),
        add_op( 380, fx, 'unalias'),
        add_op( 380, fx, 'do'),
        add_op( 380, fx, 'clear_stack'),
%        add_op( 380, fx, 'do_stack'),
        add_op( 380, fx, 'script'),

        add_op( 370, xfx, ('=')),

        add_op( 360,  fx, ('$')),

        add_op( 350, xfx, (':')),       % Module:predicate
        add_op( 330, xfx, ('::')),      % Package::Module
        add_op( 300,  fx, ('^')),       % Output mode
%        add_op( 300,  fx, ('~')),       % Home Directory
        add_op( 280,  fy, ('>')),       % Root Directory
        add_op( 280, xfy, ('>')),       % Directory
        add_op( 280,  fy, ('/')),       % Root Directory
        add_op( 280, xfy, ('/')),       % Directory

        add_op( 270, yfx, ('+')),       % Dummy
        add_op( 270,  fx, ('+')),       % Dummy
        add_op( 270, yfx, ('-')),       % Dummy
        add_op( 270,  fx, ('-')),       % Dummy
        add_op( 260, yfx, ('*'))        % Dummy
%        add_op( 260,  fx, ('/'))        % Dummy
        ].


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  End of Shell Operator Pool.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
