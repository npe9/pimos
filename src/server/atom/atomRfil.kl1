%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1992 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 :- module atomreq_filter .
 :- public atomreq_filter /2 .
:- with_macro pimos.

atomreq_filter(User,OS) :-true|
        atomreq_filter(User,OS,_,[]) .
atomreq_filter(User,normal(__1,__2,__3),_,Error) :-true|
        User =normal(_1,__2,_3),
        '+normal$$$stream$1'(_1,__1,Flag,[atom_request]),
        '-attention'(_3,__3,Flag,[atom_request]) .
atomreq_filter(User,abnormal,_,Error) :-true|
        User =abnormal .
atomreq_filter(User,aborted,_,Error) :-true|
        User =aborted .
atomreq_filter(User,disconnected,_,Error) :-true|
        User =disconnected .
'+normal$$$stream$1'([User|U2],OS,_,Error) :-true|
        '+atomreq_command'(User,OS1,Flag,[atom_request]),
        '+normal$$$stream$1$wait'(U2,OS,OS1,Flag,Error) .
'+normal$$$stream$1'([],OS,_,Error) :-true|
        []=OS .
otherwise .
'+normal$$$stream$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+normal$$$stream$1$wait'(U2,OS,OS1,_,Error) :-wait(OS1)|
        OS =[OS1|OS2],
        '+normal$$$stream$1'(U2,OS2,_,Error) .
'+normal$$$stream$1$wait'(U2,OS,OS1,fail,Error) :-true|
        true .
'-attention'(User,attention,_,Error) :-true|
        User =attention .
'-attention'(User,[],_,Error) :-true|
        User =[] .
'+atomreq_command'(create(_1),OS,_,Error) :-true|
        create(__1) =OS,
        '-create$$$enu$1'(_1,__1,Flag,[atom_device]) .
otherwise .
'+atomreq_command'(User,OS,Flag,Error) :-true|
        '+aa_command'(User,OS,Flag,Error) .
'-create$$$enu$1'(User,normal(__1,__2,__3),_,Error) :-true|
        User =normal(_1,__2,_3),
        '+normal$$$stream$2'(_1,__1,Flag,Error),
        '-attention'(_3,__3,Flag,Error) .
'-create$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-create$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-create$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'+normal$$$stream$2'([User|U2],OS,_,Error) :-true|
        '+atom_command'(User,OS1,Flag,Error),
        '+normal$$$stream$2$wait'(U2,OS,OS1,Flag,Error) .
'+normal$$$stream$2'([],OS,_,Error) :-true|
        []=OS .
otherwise .
'+normal$$$stream$2'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+normal$$$stream$2$wait'(U2,OS,OS1,_,Error) :-wait(OS1)|
        OS =[OS1|OS2],
        '+normal$$$stream$2'(U2,OS2,_,Error) .
'+normal$$$stream$2$wait'(U2,OS,OS1,fail,Error) :-true|
        true .
'+aa_command'(reset(_1),OS,_,Error) :-true|
        reset(__1) =OS,
        '-reset$$$enu$1'(_1,__1,Flag,['reset /1'|Error]) .
'+aa_command'(next_attention(_1),OS,_,Error) :-true|
        next_attention(__1) =OS,
        '-next_attention$$$enu$1'(_1,__1,Flag,['next_attention /1'|Error]) .
'+aa_command'(resend(_1,_2),OS,_,Error) :-true|
        '+aa_command$wait'(resend(__1,_2),OS,Flag,Error),
        '+msgid'(_1,__1,Flag,[msgid,'resend /2'|Error]) .
'+aa_command'(cancel(_1,_2),OS,_,Error) :-true|
        '+aa_command$wait'(cancel(__1,_2),OS,Flag,Error),
        '+msgid'(_1,__1,Flag,[msgid,'cancel /2'|Error]) .
otherwise .
'+aa_command'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+aa_command$wait'(User,OS,fail,Error) :-true|
        true .
'+aa_command$wait'(resend(__1,_2),OS,_,Error) :-wait(__1)|
        resend(__1,__2) =OS,
        '-status'(_2,__2,Flag,['resend /2'|Error]) .
'+aa_command$wait'(cancel(__1,_2),OS,_,Error) :-wait(__1)|
        cancel(__1,__2) =OS,
        '-status'(_2,__2,Flag,['cancel /2'|Error]) .
'+atom_command'(get_atom(_1,_2),OS,_,Error) :-true|
        '+atom_command$wait'(get_atom(__1,_2),OS,Flag,Error),
        '+atomname'(_1,__1,Flag,[atomname,'get_atom /2'|Error]) .
'+atom_command'(get_atom_name(_1,_2),OS,_,Error) :-true|
        '+atom_command$wait'(get_atom_name(__1,_2),OS,Flag,Error),
        '+get_atom_name$atom$1'(_1,__1,Flag,[atom,'get_atom_name /2'|Error]) .
'+atom_command'(intern(_1,_2),OS,_,Error) :-true|
        '+atom_command$wait'(intern(__1,_2),OS,Flag,Error),
        '+atomname'(_1,__1,Flag,[atomname,'intern /2'|Error]) .
'+atom_command'(get_all_atoms(_1),OS,_,Error) :-true|
        get_all_atoms(__1) =OS,
        '-get_all_atoms$$$enu$1'(_1,__1,Flag,['get_all_atoms /1'|Error]) .
otherwise .
'+atom_command'(User,OS,Flag,Error) :-true|
        '+aa_command'(User,OS,Flag,Error) .
'+atom_command$wait'(User,OS,fail,Error) :-true|
        true .
'+atom_command$wait'(get_atom(__1,_2),OS,_,Error) :-wait(__1)|
        get_atom(__1,__2) =OS,
        '-get_atom$$$enu$1'(_2,__2,Flag,['get_atom /2'|Error]) .
'+atom_command$wait'(get_atom_name(__1,_2),OS,_,Error) :-wait(__1)|
        get_atom_name(__1,__2) =OS,
        '-get_atom_name$$$enu$1'(_2,__2,Flag,['get_atom_name /2'|Error]) .
'+atom_command$wait'(intern(__1,_2),OS,_,Error) :-wait(__1)|
        intern(__1,__2) =OS,
        '-intern$$$enu$1'(_2,__2,Flag,['intern /2'|Error]) .
'+get_atom_name$atom$1'(User,OS,_,Error) :-atom(User)|
        User =OS .
otherwise .
'+get_atom_name$atom$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'-reset$$$enu$1'(User,normal(__1,__2,__3),_,Error) :-true|
        User =normal(__1,_2,_3),
        '-attention'(_2,__2,Flag,[attention|Error]),
        '-msgid'(_3,__3,Flag,[msgid|Error]) .
'-reset$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-reset$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-reset$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-next_attention$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-attention'(_1,__1,Flag,Error) .
'-next_attention$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-next_attention$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-next_attention$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'+msgid'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+msgid'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'-status'(User,normal,_,Error) :-true|
        User =normal .
'-status'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-status'(User,aborted,_,Error) :-true|
        User =aborted .
'-status'(User,disconnected,_,Error) :-true|
        User =disconnected .
'+atomname'(User,OS,_,Error) :-string(User,_,_)|
        User =OS .
otherwise .
'+atomname'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'-get_atom$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-normal$atom$1'(_1,__1,Flag,Error) .
'-get_atom$$$enu$1'(User,protection_violation,_,Error) :-true|
        User =protection_violation .
'-get_atom$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-get_atom$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-get_atom$$$enu$1'(User,non_existent(__1),_,Error) :-true|
        User =non_existent(_1),
        '-dkey'(_1,__1,Flag,Error) .
'-normal$atom$1'(User,OS,_,Error) :-atom(OS)|
        OS =User .
'-get_atom_name$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-atomname'(_1,__1,Flag,Error) .
'-get_atom_name$$$enu$1'(User,protection_violation,_,Error) :-true|
        User =protection_violation .
'-get_atom_name$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-get_atom_name$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-get_atom_name$$$enu$1'(User,non_existent(__1),_,Error) :-true|
        User =non_existent(_1),
        '-dkey'(_1,__1,Flag,Error) .
'-intern$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-normal$atom$2'(_1,__1,Flag,Error) .
'-intern$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-intern$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-intern$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-normal$atom$2'(User,OS,_,Error) :-atom(OS)|
        OS =User .
'-get_all_atoms$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-atominfo'(_1,__1,Flag,Error) .
'-get_all_atoms$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-get_all_atoms$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-get_all_atoms$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-msgid'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'-dkey'(User,OS,_,Error) :-string(OS,_,_)|
        User =OS .
'-dkey'(User,OS,_,Error) :-atom(OS)|
        User =OS .
'-atomname'(User,OS,_,Error) :-string(OS,_,_)|
        OS =User .
'-atominfo'(User,[OS|OS2],Flag,Error) :-true|
        '-atominfo2'(User1,OS,Flag,Error),
        '-atominfo$wait'(User,OS2,User1,Flag,Error) .
'-atominfo'(User,[],Flag,Error) :-true|
        User =[] .
'-atominfo$wait'(User,OS2,User1,Flag,Error) :-wait(User1)|
        User =[User1|User2],
        '-atominfo'(User2,OS2,Flag,Error) .
'-atominfo2'(User,{__1,__2},_,Error) :-true|
        User ={_1,_2},
        '-atominfo2$atom$1'(_1,__1,Flag,Error),
        '-atominfo2$string$1'(_2,__2,Flag,Error) .
'-atominfo2$atom$1'(User,OS,_,Error) :-atom(OS)|
        OS =User .
'-atominfo2$string$1'(User,OS,_,Error) :-string(OS,_,_)|
        OS =User .
%%%%% system defined protocols %%%%%%%%%%
'+ground'(X, Y) :- list(X) | '$$groundl'(X, Y).
'+ground'(X, Y) :- vector(X,Size), Size \= 0 | 
        '$$groundv'(X, 0, Size, X2),
        '$$groundv2'(X2, Y).
otherwise.
'+ground'(X, Y) :- wait(X) | Y = X.
'-ground'(X, Y) :- list(Y) | '$$groundl'(Y, X).
'-ground'(X, Y) :- vector(Y,Size), Size \= 0 | 
        '$$groundv'(Y, 0, Size, Y2),
        '$$groundv2'(Y2, X).
otherwise.
'-ground'(X, Y) :- wait(Y) | Y = X.
'$$groundl'([X1|X2], Y) :- true | '+ground'(X1,X11),
        '$$groundl2'(X11, X2, Y).
'$$groundl'([], Y) :- true | Y = [].
'$$groundl2'(X11, X2, Y) :- wait(X11) |
        '$$groundl31'(X2, [X11|Tail], Tail, Y).
'$$groundl31'([X1|X2], Top, Tail, Y) :- true |
        '+ground'(X1,X11),
        '$$groundl32'(X11, X2, Top, Tail, Y).
'$$groundl31'([], Top, Tail, Y) :- true |
        Tail = [],
        Top = Y.
'$$groundl32'(X11, X2, Top, Tail, Y) :- wait(X11), X2 \= [] |
        Tail = [X11|Tail2],
        '$$groundl31'(X2, Top, Tail2, Y).
'$$groundl32'(X11, [], Top, Tail, Y) :- wait(X11) |
        Tail = [X11],
        Y = Top.
'$$groundv2'(X2, Y) :- wait(X2) | X2 = Y.
'$$groundv'(X, Pos, Size, X2) :- Pos \= Size |
        vector_element(X, Pos, Elm, NX),
        '+ground'(Elm,Elm2),
        Npos := Pos + 1,
        '$$groundv3'(Elm2, NX, Npos, Size, X2).
'$$groundv3'(Elm, X, Pos, Size, X2) :- wait(Elm), Pos \= Size |
        vector_element(X, Pos, Nelm, NX),
        '+ground'(Nelm, Nelm2),
        Npos := Pos + 1,
        '$$groundv3'(Nelm2, NX, Npos, Size, X2).
'$$groundv3'(Elm, X, Size, Size, X2) :- wait(Elm) |
        X = X2. 
%%%%% to raise error %%%%%%%%%%
raise_error(Info,Msg):- true |
        atom_table:cache_table(Atom),
        formatInfo(Info,[],Fstring,Atom),
        shoen:raise(pimos_tag#error,'$PIMOS$'(illegal_message_to_PIMOS,Fstring),Msg).
formatInfo([Infoatom | Info], StringList,Fstring,Atom):- 
        atom(Infoatom) |
        Atom = [get_atom_name(Infoatom,normal(InfoString)) | Atail],
        NSlist = [InfoString | StringList],
        formatInfo(Info, NSlist, Fstring, Atail).
formatInfo([], Slist, Fstring, Atom):- true |
        Atom = [],
        new_string(New,1,16),
        set_string_element(New,0,key#lf,NL),
        format(1,Slist,StringList,NL),
        builtin#append_string(StringList, Fstring).
format(1,[Info|Tail],StringList,NL):- true |
        StringList = ["Device : ",Info,NL |Stail2],
        format(2,Tail,Stail2,NL).
format(2,[Info|Tail],StringList,NL):- true |
        StringList = ["Message : ",Info,NL | Stail2],
        format(3,Tail,Stail2,NL).
format(3,[Info|Tail],StringList,NL):- true |
        StringList = [Info,NL | Stail2],
        format(3,Tail,Stail2,NL).
format(_,[],StringList,_):- true |
        StringList = [].
