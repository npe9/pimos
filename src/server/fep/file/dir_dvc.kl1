%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1994 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- module dir_device.
:- with_macro pimos.
:- public driver/5.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% driver(CAbort,DS,F,If,FA)
%%      CAbort  :: Termination variable from the client task
%%                 = abort ; []
%%      DS      :: Input stream from the client task
%%      F       :: Output stream to scsi_fep_module (vector stream)
%%      If      :: ={0,Conf,SCont,SAbort}
%%                 Conf  :: Output stream to confirmation device (merged)
%%                 SCont :: Server control stream
%%                 SAbort:: Server control abortion variable
%%      FA      :: FEP Atributes

driver(CAbort,DS,F,If,FA) :- true |
        id_table:id_table(T),
        driver_0(CAbort,DS,F,T,If,A,A,dummy_attention,_,FA).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% driver_0(CAb,DS,F,T,If,A,A1,AtF,Att,FA)
%%      T       :: Output stream to the keyed_bag which is used to store the
%%                      list of the aborted requests with the key ID.
%%      A,A1    :: d-list for aborted messages
%%      Att     :: Attention line to OS

driver_0(CAb,_,F,T,If,_,_,_,_,FA) :- wait(CAb) |
        device_driver:abort(If,F,T,fep#normal,_).
driver_0(CAb,[reset(Args)|DS],F,T,If,A,A1,AtF,Att,FA) :- true |
        F={fep#reset,AbF1,AtF1,S,F1},
        wait_01(CAb,DS,F1,T,If,A,A1,AtF,Att,Args,AtF1,AbF1,S,FA).
driver_0(_,[close(S)|_],F,T,If,A,A1,_,Att,FA) :- true |
        device_driver:terminate(If,S,F,T,Att,_,A,A1).
alternatively.
driver_0(CAb,[Req|DS],F,T,If,A,A1,AtF,Att,FA) :- 
    vector_element(Req,0,MsgName),MsgName\=reset,MsgName\=close |
        A1=[Req|A2],
        driver_0(CAb,DS,F,T,If,A,A2,AtF,Att,FA).
driver_0(_,[],F,T,If,A,A1,_,Att,FA) :- true |
        device_driver:terminate(If,_,F,T,Att,_,A,A1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% wait_01(CAb,DS,F,T,If,A,A1,AtF,Att,Args,AtF1,AbF1,S,FA)
%%      Args    :: = normal(Ab,Att,ID)
%%                      Ab      :: New abort line from OS
%%                      Att     :: New attention line to OS
%%                      ID      :: Id number for aborted messages
%%                 ; abnormal
%%                 ; disconnected
%%      AbF1    :: New abort line to fep

wait_01(CAb,DS,F,T,If,A,A1,_,Att,Args,AtF1,AbF1,fep#normal,FA) :- true |
        Att=[],
        A1=[],
        T=[put_with_new_id(ID,A)|T1],
        Args=normal(Ab1,Att1,ID),
        driver_1(CAb,DS,F,T1,If,Ab1,B,B,AtF1,Att1,AbF1,FA).
wait_01(CAb,DS,F,T,If,A,A1,AtF,Att,Args,_,AbF1,fep#abnormal,FA) :- true |
        Args=abnormal,
        AbF1=fep#nil,
        driver_0(CAb,DS,F,T,If,A,A1,AtF,Att,FA).
wait_01(CAb,DS,F,T,If,A,A1,_,Att,Args,_,AbF1,fep#disconnected,FA) :- true |
        Args=disconnected,
        AbF1=fep#nil,
        device_driver:disconnected(CAb,DS,F,T,If,A,A1,Att,_).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% driver_1(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,FA)
%%      Ab      :: Abort line from OS
%%      AbF     :: Abort line to fep

driver_1(CAb,_,F,T,If,_,_,_,_,_,AbF,FA) :- wait(CAb) |
        device_driver:abort(If,F,T,fep#normal,AbF).
driver_1(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,FA) :- wait(Ab) |
        AbF=fep#abort,
        driver_0(CAb,DS,F,T,If,A,A1,AtF,Att,FA).
alternatively.
driver_1(CAb,[Req|DS],F,T,If,Ab,A,A1,AtF,Att,AbF,FA) :- true |
        io_req(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,Req,FA).
driver_1(_,[],F,T,If,_,A,A1,_,Att,AbF,FA) :- true |
        device_driver:terminate(If,_,F,T,Att,AbF,A,A1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% io_req(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,Req,FA)
%%      Req     :: Io_request message

io_req(CAb,DS,F,T,If,_,A,A1,AtF,Att,AbF,{reset,Args},FA) :- true |
        AbF=fep#abort,
%        F={fep#reset,AbF1,AtF1,S,F1},                          % patch for fep
%        wait_01(CAb,DS,F1,T,If,A,A1,AtF,Att,Args,AtF1,AbF1,S).
        fep_patch(CAb,DS,F,T,If,_,A,A1,AtF,Att,_,Args,FA).
io_req(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,{next_attention,Args},FA) :- true |
        Att=[],
        Args=normal(Att1),
        driver_1(CAb,DS,F,T,If,Ab,A,A1,AtF,Att1,AbF,FA).
io_req(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,{resend,ID,S},FA) :- true |
        device_driver:resend(DS,DS1,T,T1,ID,S),
        driver_1(CAb,DS1,F,T1,If,Ab,A,A1,AtF,Att,AbF,FA).
io_req(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,{cancel,ID,S},FA) :- true |
        device_driver:cancel(T,T1,ID,S),
        driver_1(CAb,DS,F,T1,If,Ab,A,A1,AtF,Att,AbF,FA).

/*
% never receives from NEW resource tree
io_req(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,{change_processor,PE,S}) :- true |
        change_processor(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,S)@processor(PE).
*/

io_req(_,_,F,T,If,_,A,A1,_,Att,AbF,{close,S},FA) :- true |
        device_driver:terminate(If,S,F,T,Att,AbF,A,A1).

otherwise.
io_req(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,Req,FA) :- true |
        vector_element(FA,0,Code,FA0),
        send_message(Req,Req1,F,Val,S,F1,Code),
        driver_2(CAb,DS,F1,T,If,Ab,A,A1,AtF,Att,AbF,Req1,Val,S,FA0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% change_processor(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,S)

/*
change_processor(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,S) :- true |
        S=normal,
        driver_1(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF).
*/


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% driver_2(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,Req,Val,S,FA)
%%      Req     :: Io_request message that is processing now
%%      Val     :: Values from fep (vector)

driver_2(CAb,_,F,T,If,_,_,_,_,_,AbF,_,_,S,FA) :- wait(CAb) |
        device_driver:abort(If,F,T,S,AbF).
driver_2(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,Req,Val,S,FA) :- wait(Ab) |
        AbF=fep#abort,
        wait_20(CAb,DS,F,T,If,A,A1,AtF,Att,Req,Val,S,FA).
alternatively.
driver_2(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,Req,Val,fep#normal,FA) :- true |
        vector_element(FA,0,Code,FA0),
        return_values(Req,Val,Code),
        driver_1(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,FA0).
driver_2(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,Req,_,fep#abnormal,FA) :- true |
        device_driver:return_ab_status(Req,abnormal),
        driver_1(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,FA).
driver_2(CAb,DS,F,T,If,_,A,A1,_,Att,AbF,Req,_,fep#disconnected,FA) :- true |
        device_driver:return_ab_status(Req,disconnected),
        device_driver:disconnected(CAb,DS,F,T,If,A,A1,Att,AbF).
driver_2(CAb,DS,F,T,If,Ab,A,A1,AtF,Att,AbF,Req,_,fep#aborted,FA) :- true |
        A1=[Req|A2],
        driver_1(CAb,DS,F,T,If,Ab,A,A2,AtF,Att,AbF,FA).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% wait_20(CAb,DS,F,T,If,A,A1,AtF,Att,Req,Val,S,FA)

wait_20(CAb,DS,F,T,If,A,A1,AtF,Att,Req,Val,fep#normal,FA) :- true |
        vector_element(FA,0,Code,FA0),
        return_values(Req,Val,Code),
        driver_0(CAb,DS,F,T,If,A,A1,AtF,Att,FA0).
wait_20(CAb,DS,F,T,If,A,A1,AtF,Att,Req,_,fep#abnormal,FA) :- true |
        device_driver:return_ab_status(Req,abnormal),
        driver_0(CAb,DS,F,T,If,A,A1,AtF,Att,FA).
wait_20(CAb,DS,F,T,If,A,A1,_,Att,Req,_,fep#disconnected,FA) :- true |
        device_driver:return_ab_status(Req,disconnected),
        device_driver:disconnected(CAb,DS,F,T,If,A,A1,Att,_).
wait_20(CAb,DS,F,T,If,A,A1,AtF,Att,Req,_,fep#aborted,FA) :- true |
        A1=[Req|A2],
        driver_0(CAb,DS,F,T,If,A,A2,AtF,Att,FA).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% send_message(Req,Req1,F,Val,S,F1,FA)
%%      Req     :: Io_request message
%%      Req1    :: New io_request message
%%      F,F1    :: Output stream to fep (vector)
%%      Val     :: Values from fep (vector)
%%      S       :: Status from fep

%% put type messages
send_message({kill,WC,Args},Req,F,Val,S,F1,0) :- true |
        change_element_size(WC,8,WC0),
%        F0={fep#kill,WC0,S,F1},
        F0={239,WC0,S,F1},
        wait_and_send(F,F0),
        Req={kill,WC,Args},
        Val={}.
send_message({kill,WC,Args},Req,F,Val,S,F1,1) :- true |
        code_convert:jis_to_euc(WC,WC0),
%        F0={fep#kill,WC0,S,F1},
        F0={239,WC0,S,F1},
        wait_and_send(F,F0),
        Req={kill,WC,Args},
        Val={}.
send_message({delete,WC,Args},Req,F,Val,S,F1,0) :- true |
        change_element_size(WC,8,WC0),
        F0={fep#delete,WC0,S,F1},
        wait_and_send(F,F0),
        Req={delete,WC,Args},
        Val={}.
send_message({delete,WC,Args},Req,F,Val,S,F1,1) :- true |
        code_convert:jis_to_euc(WC,WC0),
        F0={fep#delete,WC0,S,F1},
        wait_and_send(F,F0),
        Req={delete,WC,Args},
        Val={}.
send_message({undelete,WC,Args},Req,F,Val,S,F1,0) :- true |
        change_element_size(WC,8,WC0),
        F0={fep#undelete,WC0,S,F1},
        wait_and_send(F,F0),
        Req={undelete,WC,Args},
        Val={}.
send_message({undelete,WC,Args},Req,F,Val,S,F1,1) :- true |
        code_convert:jis_to_euc(WC,WC0),
        F0={fep#undelete,WC0,S,F1},
        wait_and_send(F,F0),
        Req={undelete,WC,Args},
        Val={}.
send_message({purge,WC,Args},Req,F,Val,S,F1,0) :- true |
        change_element_size(WC,8,WC0),
        F0={fep#purge,WC0,S,F1},
        wait_and_send(F,F0),
        Req={purge,WC,Args},
        Val={}.
send_message({purge,WC,Args},Req,F,Val,S,F1,1) :- true |
        code_convert:jis_to_euc(WC,WC0),
        F0={fep#purge,WC0,S,F1},
        wait_and_send(F,F0),
        Req={purge,WC,Args},
        Val={}.
send_message({expunge,Args},Req,F,Val,S,F1,_) :- true |
        F={fep#expunge,S,F1},
        Req={expunge,Args},
        Val={}.
send_message({listing,WC,Args},Req,F,Val,S,F1,0) :- true |
        change_element_size(WC,8,WC0),
        F0={fep#listing_all,WC0,Str,S,F1},
        wait_and_send(F,F0),
        Req={listing,WC,Args},
        Val={Str}.
send_message({listing,WC,Args},Req,F,Val,S,F1,1) :- true |
        code_convert:jis_to_euc(WC,WC0),
        F0={fep#listing_all,WC0,Str,S,F1},
        wait_and_send(F,F0),
        Req={listing,WC,Args},
        Val={Str}.
send_message({deleted,WC,Args},Req,F,Val,S,F1,0) :- true |
        change_element_size(WC,8,WC0),
        F0={fep#deleted_all,WC0,Str,S,F1},
        wait_and_send(F,F0),
        Req={deleted,WC,Args},
        Val={Str}.
send_message({deleted,WC,Args},Req,F,Val,S,F1,1) :- true |
        code_convert:jis_to_euc(WC,WC0),
        F0={fep#deleted_all,WC0,Str,S,F1},
        wait_and_send(F,F0),
        Req={deleted,WC,Args},
        Val={Str}.

%% get type messages
send_message({pathname,Args},Req,F,Val,S,F1,_) :- true |
        F={fep#pathname,Pathname,S,F1},
        Req={pathname,Args},
        Val={Pathname}.

otherwise.
send_message(Com,Req,F,Val,S,F1,_) :- true |
        S=fep#abnormal,
        F=F1,
        Req=Com,
        Val={}.

wait_and_send(F,F0):- vector_element(F0,1,E),wait(E) | F=F0.

return_values({listing,WC,Args},{Str},Code) :- true |
        return_filenames0({listing,WC,Args},{Str},Code).
return_values({deleted,WC,Args},{Str},Code) :- true |
        return_filenames0({deleted,WC,Args},{Str},Code).
return_values({pathname,Args},{Str},Code) :- true |
        return_pathname({pathname,Args},{Str},Code).
otherwise.
return_values(Req,Val,Code) :- true |
        device_driver:return_values(Req,Val).

return_pathname(Req,{Str},0):- true |
        change_element_size(Str,16,Str2),
        device_driver:return_values(Req,{Str2}).
return_pathname(Req,{Str},1):- true |
        code_convert:euc_to_jis(Str,Str2),
        device_driver:return_values(Req,{Str2}).
otherwise.
return_pathname(Req,{Str},_):- true |
        device_driver:return_ab_status(Req,abnormal).

return_filenames0({_,_,Args},{Str},0):- true |
        change_element_size(Str,16,Str2),
        return_filenames(Str2,Args).
return_filenames0({_,_,Args},{Str},1):- true |
        code_convert:euc_to_jis(Str,Str2),
        return_filenames(Str2,Args).
otherwise.
return_filenames0(Req,{Str},_):- true |
        device_driver:return_ab_status(Req,abnormal).

return_filenames(Str,Args) :- string(Str,N,_) |
        Args=normal(L),
        filenames(0,N,Str,L).
otherwise.
return_filenames(_,Args) :- true | Args=abnormal.

filenames(I,N,Str,L) :- I<N |
        get_data(I,N,I,P,Str,Str1,Name),
        L=[Name|L1],
        filenames(P,N,Str1,L1).
filenames(N,N,_,L) :- true | L=[].

get_data(I,N,P,Q,Str,Str1,Data) :- true |
        string_element(Str,I,E,Str0),
        if_lf(~(I+1),N,P,Q,Str0,Str1,Data,E).

if_lf(I,_,P,Q,Str,Str1,Data,10) :- true |
        Q:=I,
        builtin#substring(Str,P,~(I-P-1),Data,Str1).
otherwise.
if_lf(I,N,P,Q,Str,Str1,Data,_) :- I<N |
        string_element(Str,I,E,Str0),
        if_lf(~(I+1),N,P,Q,Str0,Str1,Data,E).
if_lf(N,N,P,Q,Str,Str1,Data,_) :- true |
        Q:=N,
        builtin#substring(Str,P,~(N-P),Data,Str1).


fep_patch(CAb,DS,F,T,If,_,A,A1,AtF,Att,_,Args,FA) :- true |
        F={fep#next_attention,AtF1,S,F1},
        now_reset(CAb,DS,F1,T,If,_,A,A1,AtF,Att,_,Args,S,FA).

now_reset(CAb,DS,F,T,If,_,A,A1,AtF,Att,_,Args,S,FA) :- wait(S) |
        F={fep#reset,AbF1,AtF1,S1,F1},
        wait_01(CAb,DS,F1,T,If,A,A1,AtF,Att,Args,AtF1,AbF1,S1,FA).
