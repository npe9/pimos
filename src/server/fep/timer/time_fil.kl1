%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1994 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 :- module timer_filter .
 :- public timer_filter /2 .
:- with_macro pimos.

timer_filter(User,OS) :-true|
        timer_filter(User,OS,_,[]) .
timer_filter(User,normal(__1,__2,__3),_,Error) :-true|
        User =normal(_1,__2,_3),
        '+normal$$$stream$1'(_1,__1,Flag,[timer]),
        '-attention'(_3,__3,Flag,[timer]) .
timer_filter(User,abnormal,_,Error) :-true|
        User =abnormal .
timer_filter(User,aborted,_,Error) :-true|
        User =aborted .
timer_filter(User,disconnected,_,Error) :-true|
        User =disconnected .
'+normal$$$stream$1'([User|U2],OS,_,Error) :-true|
        '+timer_command'(User,OS1,Flag,[timer]),
        '+normal$$$stream$1$wait'(U2,OS,OS1,Flag,Error) .
'+normal$$$stream$1'([],OS,_,Error) :-true|
        []=OS .
otherwise .
'+normal$$$stream$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+normal$$$stream$1$wait'(U2,OS,OS1,_,Error) :-wait(OS1)|
        OS =[OS1|OS2],
        '+normal$$$stream$1'(U2,OS2,_,Error) .
'+normal$$$stream$1$wait'(U2,OS,OS1,fail,Error) :-true|
        true .
'-attention'(User,attention,_,Error) :-true|
        User =attention .
'-attention'(User,[],_,Error) :-true|
        User =[] .
'+timer_command'(get_count(_1),OS,_,Error) :-true|
        get_count(__1) =OS,
        '-get_count$$$enu$1'(_1,__1,Flag,['get_count /1'|Error]) .
'+timer_command'(on_at(_1,_2),OS,_,Error) :-true|
        '+timer_command$wait'(on_at(__1,_2),OS,Flag,Error),
        '+count'(_1,__1,Flag,[count,'on_at /2'|Error]) .
'+timer_command'(on_after(_1,_2),OS,_,Error) :-true|
        '+timer_command$wait'(on_after(__1,_2),OS,Flag,Error),
        '+count'(_1,__1,Flag,[count,'on_after /2'|Error]) .
'+timer_command'(get_date_time(_1),OS,_,Error) :-true|
        get_date_time(__1) =OS,
        '-get_date_time$$$enu$1'(_1,__1,Flag,['get_date_time /1'|Error]) .
'+timer_command'(where(_1),OS,_,Error) :-true|
        where(__1) =OS,
        '-where$$$enu$1'(_1,__1,Flag,['where /1'|Error]) .
'+timer_command'(set_time_unit(_1,_2),OS,_,Error) :-true|
        '+timer_command$wait'(set_time_unit(__1,_2),OS,Flag,Error),
        '+time_unit'(_1,__1,Flag,[time_unit,'set_time_unit /2'|Error]) .
'+timer_command'(get_time_unit(_1),OS,_,Error) :-true|
        get_time_unit(__1) =OS,
        '-get_time_unit$$$enu$1'(_1,__1,Flag,['$$user /status'|Error]) .
otherwise .
'+timer_command'(User,OS,Flag,Error) :-true|
        '+aa_command'(User,OS,Flag,Error) .
'+timer_command$wait'(User,OS,fail,Error) :-true|
        true .
'+timer_command$wait'(on_at(__1,_2),OS,_,Error) :-wait(__1)|
        on_at(__1,__2) =OS,
        '-on_at$$$enu$1'(_2,__2,Flag,['on_at /2'|Error]) .
'+timer_command$wait'(on_after(__1,_2),OS,_,Error) :-wait(__1)|
        on_after(__1,__2) =OS,
        '-on_after$$$enu$1'(_2,__2,Flag,['on_after /2'|Error]) .
'+timer_command$wait'(set_time_unit(__1,_2),OS,_,Error) :-wait(__1)|
        set_time_unit(__1,__2) =OS,
        '-status'(_2,__2,Flag,['set_time_unit /2'|Error]) .
'-get_count$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-count'(_1,__1,Flag,Error) .
'-get_count$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-get_count$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-get_count$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-on_at$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-now'(_1,__1,Flag,Error) .
'-on_at$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-on_at$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-on_at$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-on_after$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-now'(_1,__1,Flag,Error) .
'-on_after$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-on_after$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-on_after$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-get_date_time$$$enu$1'(User,normal(__1,__2),_,Error) :-true|
        User =normal(_1,_2),
        '-date_count'(_1,__1,Flag,Error),
        '-time_count'(_2,__2,Flag,Error) .
'-get_date_time$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-get_date_time$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-get_date_time$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-where$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-timer_id'(_1,__1,Flag,Error) .
'-where$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-where$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-where$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-get_time_unit$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-time_unit'(_1,__1,Flag,Error) .
'-get_time_unit$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-get_time_unit$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-get_time_unit$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'+count'({_1,_2,_3},OS,_,Error) :-true|
        '+count$wait'({__1,__2,__3},OS,Flag,Error),
        '+spec'(_1,__1,Flag,[count,'on_at /2'|Error]),
        '+sign'(_2,__2,Flag,[count,'on_at /2'|Error]),
        '+numer'(_3,__3,Flag,[count,'on_at /2'|Error]) .
'+count'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+count'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+count$wait'(User,OS,fail,Error) :-true|
        true .
'+count$wait'({__1,__2,__3},OS,_,Error) :-wait(__1),wait(__2),wait(__3)|
        {__1,__2,__3} =OS .
'+time_unit'(sec,OS,_,Error) :-true|
        sec =OS .
'+time_unit'(msec,OS,_,Error) :-true|
        msec =OS .
'+time_unit'(msec16,OS,_,Error) :-true|
        msec16 =OS .
'+time_unit'(usec,OS,_,Error) :-true|
        usec =OS .
'+time_unit'(usec15,OS,_,Error) :-true|
        usec15 =OS .
otherwise .
'+time_unit'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'-status'(User,normal,_,Error) :-true|
        User =normal .
'-status'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-status'(User,aborted,_,Error) :-true|
        User =aborted .
'-status'(User,disconnected,_,Error) :-true|
        User =disconnected .
'+aa_command'(reset(_1),OS,_,Error) :-true|
        reset(__1) =OS,
        '-reset$$$enu$1'(_1,__1,Flag,['reset /1'|Error]) .
'+aa_command'(next_attention(_1),OS,_,Error) :-true|
        next_attention(__1) =OS,
        '-next_attention$$$enu$1'(_1,__1,Flag,['next_attention /1'|Error]) .
'+aa_command'(resend(_1,_2),OS,_,Error) :-true|
        '+aa_command$wait'(resend(__1,_2),OS,Flag,Error),
        '+msgid'(_1,__1,Flag,[msgid,'resend /2'|Error]) .
'+aa_command'(cancel(_1,_2),OS,_,Error) :-true|
        '+aa_command$wait'(cancel(__1,_2),OS,Flag,Error),
        '+msgid'(_1,__1,Flag,[msgid,'cancel /2'|Error]) .
otherwise .
'+aa_command'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+aa_command$wait'(User,OS,fail,Error) :-true|
        true .
'+aa_command$wait'(resend(__1,_2),OS,_,Error) :-wait(__1)|
        resend(__1,__2) =OS,
        '-status'(_2,__2,Flag,['resend /2'|Error]) .
'+aa_command$wait'(cancel(__1,_2),OS,_,Error) :-wait(__1)|
        cancel(__1,__2) =OS,
        '-status'(_2,__2,Flag,['cancel /2'|Error]) .
'-count'(User,{__1,__2,__3},_,Error) :-true|
        User ={_1,_2,_3},
        '-spec'(_1,__1,Flag,Error),
        '-sign'(_2,__2,Flag,Error),
        '-numer'(_3,__3,Flag,Error) .
'-count'(User,OS,_,Error) :-integer(OS)|
        User =OS .
'-now'(User,wake_up,_,Error) :-true|
        User =wake_up .
'-now'(User,aborted,_,Error) :-true|
        User =aborted .
'-reset$$$enu$1'(User,normal(__1,__2,__3),_,Error) :-true|
        User =normal(__1,_2,_3),
        '-attention'(_2,__2,Flag,[attention|Error]),
        '-msgid'(_3,__3,Flag,[msgid|Error]) .
'-reset$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-reset$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-reset$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-next_attention$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-attention'(_1,__1,Flag,Error) .
'-next_attention$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-next_attention$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-next_attention$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-date_count'(User,{__1,__2,__3},_,Error) :-true|
        User ={_1,_2,_3},
        '-spec'(_1,__1,Flag,Error),
        '-sign'(_2,__2,Flag,Error),
        '-numer'(_3,__3,Flag,Error) .
'-date_count'(User,OS,_,Error) :-integer(OS)|
        User =OS .
'-time_count'(User,{__1,__2,__3},_,Error) :-true|
        User ={_1,_2,_3},
        '-spec'(_1,__1,Flag,Error),
        '-sign'(_2,__2,Flag,Error),
        '-numer'(_3,__3,Flag,Error) .
'-time_count'(User,OS,_,Error) :-integer(OS)|
        User =OS .
'-timer_id'(User,fep,_,Error) :-true|
        User =fep .
'-timer_id'(User,OS,_,Error) :-integer(OS)|
        User =OS .
'-time_unit'(User,sec,_,Error) :-true|
        User =sec .
'-time_unit'(User,msec,_,Error) :-true|
        User =msec .
'-time_unit'(User,msec16,_,Error) :-true|
        User =msec16 .
'-time_unit'(User,usec,_,Error) :-true|
        User =usec .
'-time_unit'(User,usec15,_,Error) :-true|
        User =usec15 .
'+msgid'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+msgid'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+spec'('$bignum',OS,_,Error) :-true|
        '$bignum' =OS .
otherwise .
'+spec'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+sign'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+sign'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+numer'(User,OS,_,Error) :-string(User,_,_)|
        User =OS .
otherwise .
'+numer'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'-spec'(User,'$bignum',_,Error) :-true|
        User ='$bignum' .
'-sign'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'-numer'(User,OS,_,Error) :-string(OS,_,_)|
        OS =User .
'-msgid'(User,OS,_,Error) :-integer(OS)|
        OS =User .
%%%%% system defined protocols %%%%%%%%%%
'+ground'(X, Y) :- list(X) | '$$groundl'(X, Y).
'+ground'(X, Y) :- vector(X,Size),Size \= 0 | 
        '$$groundv'(X, 0, Size, X2),
        '$$groundv2'(X2, Y).
otherwise.
'+ground'(X, Y) :- wait(X) | Y = X.
'-ground'(X, Y) :- list(Y) | '$$groundl'(Y, X).
'-ground'(X, Y) :- vector(Y,Size), Size \= 0 | 
        '$$groundv'(Y, 0, Size, Y2),
        '$$groundv2'(Y2, X).
otherwise.
'-ground'(X, Y) :- wait(Y) | Y = X.
'$$groundl'([X1|X2], Y) :- true | '+ground'(X1,X11),
        '$$groundl2'(X11, X2, Y).
'$$groundl'([], Y) :- true | Y = [].
'$$groundl2'(X11, X2, Y) :- wait(X11) |
        '$$groundl31'(X2, [X11|Tail], Tail, Y).
'$$groundl31'([X1|X2], Top, Tail, Y) :- true |
        '+ground'(X1,X11),
        '$$groundl32'(X11, X2, Top, Tail, Y).
'$$groundl31'([], Top, Tail, Y) :- true |
        Tail = [],
        Top = Y.
'$$groundl32'(X11, X2, Top, Tail, Y) :- wait(X11), X2 \= [] |
        Tail = [X11|Tail2],
        '$$groundl31'(X2, Top, Tail2, Y).
'$$groundl32'(X11, [], Top, Tail, Y) :- wait(X11) |
        Tail = [X11],
        Y = Top.
'$$groundv2'(X2, Y) :- wait(X2) | X2 = Y.
'$$groundv'(X, Pos, Size, X2) :- Pos \= Size |
        vector_element(X, Pos, Elm, NX),
        '+ground'(Elm,Elm2),
        Npos := Pos + 1,
        '$$groundv3'(Elm2, NX, Npos, Size, X2).
'$$groundv3'(Elm, X, Pos, Size, X2) :- wait(Elm), Pos \= Size |
        vector_element(X, Pos, Nelm, NX),
        '+ground'(Nelm, Nelm2),
        Npos := Pos + 1,
        '$$groundv3'(Nelm2, NX, Npos, Size, X2).
'$$groundv3'(Elm, X, Size, Size, X2) :- wait(Elm) |
        X = X2. 
%%%%% to raise error %%%%%%%%%%
raise_error(Info,Msg):- true |
        atom_table:cache_table(Atom),
        formatInfo(Info,[],Fstring,Atom),
        shoen:raise(pimos_tag#error,'$PIMOS$'(illegal_message_to_PIMOS,Fstring),Msg).
formatInfo([Infoatom | Info], StringList,Fstring,Atom):- 
        atom(Infoatom) |
        Atom = [get_atom_name(Infoatom,normal(InfoString)) | Atail],
        NSlist = [InfoString | StringList],
        formatInfo(Info, NSlist, Fstring, Atail).
formatInfo([], Slist, Fstring, Atom):- true |
        Atom = [],
        new_string(New,1,16),
        set_string_element(New,0,key#lf,NL),
        format(1,Slist,StringList,NL),
        builtin#append_string([""|StringList], Fstring).
format(1,[Info|Tail],StringList,NL):- true |
        StringList = ["Device : ",Info |Stail2],
        format(2,Tail,Stail2,NL).
format(2,[Info|Tail],StringList,NL):- true |
        StringList = [NL,"Message : ",Info | Stail2],
        format(3,Tail,Stail2,NL).
format(3,[Info|Tail],StringList,NL):- true |
        StringList = [NL,Info | Stail2],
        format(3,Tail,Stail2,NL).
format(_,[],StringList,_):- true |
        StringList = [].
