%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1994 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- module socket_device.
:- with_macro pimos.
:- public driver/4.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% driver(CAbort,DS,F,If)
%%      CAbort  :: Termination variable from the client task
%%                 = abort ; []
%%      DS      :: Input stream from the client task
%%      F       :: Output stream to scsi_fep_module (vector stream)
%%      If      :: ={0,Conf,SCont,SAbort}
%%                 Conf  :: Output stream to confirmation device (merged)
%%                 SCont :: Server control stream
%%                 SAbort:: Server control abortion variable

driver(CAbort,DS,F,If) :- true |
        id_table:id_table(T),
        driver_0(CAbort,DS,F,T,If,dummy_attention,A,A,{0,_},_).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% driver_0(CAb,DS,F,T,If,AtF,A,A1,G,Att)
%%      T       :: Output stream to the keyed_bag which is used to store the
%%                      list of the aborted requests with the key ID.
%%      AtF     :: Attention line from fep
%%      A,A1    :: d-list for aborted messages
%%      G       :: Rest string information for getb (which has been input from windows
%%                  but has not been returned to users. )
%%                 = {Length,String}
%%      Att     :: Attention line to OS

driver_0(CAb,_,F,T,If,_,_,_,_,_) :- wait(CAb) |
        device_driver:abort(If,F,T,fep#normal,_).
driver_0(CAb,DS,F,T,If,fep#attention,A,A1,G,Att) :- true |
        Att=attention,
        driver_0(CAb,DS,F,T,If,dummy_attention,A,A1,G,_).
alternatively.
driver_0(CAb,[reset(Args)|DS],F,T,If,AtF,A,A1,G,Att) :- true |
        F={fep#reset,AbF1,AtF1,S,F1},
        wait_01(CAb,DS,F1,T,If,AtF,A,A1,G,Att,Args,AbF1,AtF1,S).
driver_0(_,[close(S)|_],F,T,If,_,A,A1,_,Att) :- true |
        terminate(If,S,F,T,Att,_,A,A1,fep#normal).
driver_0(CAb,[Req|DS],F,T,If,AtF,A,A1,G,Att) :-
    vector_element(Req,0,MsgName),MsgName\=reset,MsgName\=close |
        A1=[Req|A2],
        driver_0(CAb,DS,F,T,If,AtF,A,A2,G,Att).
driver_0(_,[],F,T,If,_,A,A1,_,Att) :- true |
        terminate(If,_,F,T,Att,_,A,A1,fep#normal).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% wait_01(CAb,DS,F,T,If,AtF,A,A1,G,Att,Args,AbF1,AtF1,S)
%%      Args    :: = normal(Ab,Att,ID)
%%                      Ab      :: New abort line from OS
%%                      Att     :: New attention line to OS
%%                      ID      :: Id number for aborted messages
%%                 ; abnormal
%%                 ; disconnected
%%      AbF1    :: New abort line to fep
%%      AtF1    :: New attention line from fep

wait_01(CAb,DS,F,T,If,fep#attention,A,A1,G,Att,Args,AbF1,AtF1,S) :- true |
        Att=attention,
        wait_01(CAb,DS,F,T,If,_,A,A1,G,_,Args,AbF1,AtF1,S).
wait_01(CAb,DS,F,T,If,_,A,A1,G,Att,Args,AbF1,AtF1,fep#normal) :- true |
        Att=[],
        A1=[],
        T=[put_with_new_id(ID,{A,G})|T1],
        Args=normal(Ab1,Att1,ID),
        driver_1(CAb,DS,F,T1,If,AtF1,Ab1,B,B,{0,_},Att1,AbF1).
wait_01(CAb,DS,F,T,If,AtF,A,A1,G,Att,Args,AbF1,_,fep#abnormal) :- true |
        Args=abnormal,
        AbF1=fep#nil,
        driver_0(CAb,DS,F,T,If,AtF,A,A1,G,Att).
wait_01(CAb,DS,F,T,If,_,A,A1,_,Att,Args,AbF1,_,fep#disconnected) :- true |
        Args=disconnected,
        AbF1=fep#nil,
        disconnected(CAb,DS,F,T,If,A,A1,Att,_).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% driver_1(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF)
%%      Ab      :: Abort line from OS
%%      AbF     :: Abort line to fep

driver_1(CAb,_,F,T,If,_,_,_,_,_,_,AbF) :- wait(CAb) |
        device_driver:abort(If,F,T,fep#normal,AbF).
driver_1(CAb,DS,F,T,If,fep#attention,Ab,A,A1,G,Att,AbF) :- true |
        Att=attention,
        driver_1(CAb,DS,F,T,If,_,Ab,A,A1,G,_,AbF).
driver_1(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF) :- wait(Ab) |
        AbF=fep#abort,
        driver_0(CAb,DS,F,T,If,AtF,A,A1,G,Att).
alternatively.
driver_1(CAb,[Req|DS],F,T,If,AtF,Ab,A,A1,G,Att,AbF) :- true |
        io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,Req).
driver_1(_,[],F,T,If,_,_,A,A1,_,Att,AbF) :- true |
        F={fep#flush,S,F1},
        terminate(If,_,F1,T,Att,AbF,A,A1,S).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,Req)
%%      Req     :: Io_request message

io_req(CAb,DS,F,T,If,AtF,_,A,A1,G,Att,AbF,{reset,Args}) :- true |
        AbF=fep#abort,
%        F={fep#reset,AbF1,AtF1,S,F1},                              % patch for fep
%        wait_01(CAb,DS,F1,T,If,AtF,A,A1,G,Att,Args,AbF1,AtF1,S).
        fep_patch(CAb,DS,F,T,If,AtF,_,A,A1,G,Att,_,Args).
io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,{next_attention,Args}) :- true |
        F={fep#next_attention,AtF1,S,F1},
        wait_1(CAb,DS,F1,T,If,AtF,Ab,A,A1,G,Att,AbF,Args,AtF1,S).
io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,{resend,ID,S}) :- true |
        resend(DS,DS1,T,T1,ID,G,G1,S),
        driver_1(CAb,DS1,F,T1,If,AtF,Ab,A,A1,G1,Att,AbF).
io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,{cancel,ID,S}) :- true |
        cancel(T,T1,ID,S),
        driver_1(CAb,DS,F,T1,If,AtF,Ab,A,A1,G,Att,AbF).

/*
% never receives from NEW resource tree
io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,{change_processor,PE,S}) :- true |
        change_processor(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,S)@processor(PE).
*/

io_req(_,_,F,T,If,_,_,A,A1,_,Att,AbF,{close,S}) :- true |
        F={fep#flush,S0,F1},
        terminate(If,S,F1,T,Att,AbF,A,A1,S0).

otherwise.
io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,Req) :- true |
        send_message(Req,Req1,G,G1,F,Val,S,F1),
        driver_2(CAb,DS,F1,T,If,AtF,Ab,A,A1,G1,Att,AbF,Req1,Val,S).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% wait_1(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,Args,AtF1,S).
%%      AtF1    :: New attention line from fep

wait_1(CAb,DS,F,T,If,fep#attention,Ab,A,A1,G,Att,AbF,Args,AtF1,S) :- true |
        Att=attention,
        wait_1(CAb,DS,F,T,If,_,Ab,A,A1,G,_,AbF,Args,AtF1,S).
wait_1(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,Args,AtF1,S) :- wait(Ab) |
        AbF=fep#abort,
        wait_10(CAb,DS,F,T,If,AtF,A,A1,G,Att,Args,AtF1,S).
alternatively.
wait_1(CAb,DS,F,T,If,_,Ab,A,A1,G,Att,AbF,Args,AtF1,fep#normal) :- true |
        Att=[],
        Args=normal(Att1),
        driver_1(CAb,DS,F,T,If,AtF1,Ab,A,A1,G,Att1,AbF).
wait_1(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,Args,_,fep#abnormal) :- true |
        Args=abnormal,
        driver_1(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF).
wait_1(CAb,DS,F,T,If,_,_,A,A1,_,Att,AbF,Args,_,fep#disconnected) :- true |
        Args=disconnected,
        disconnected(CAb,DS,F,T,If,A,A1,Att,AbF).
wait_1(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,Args,_,fep#aborted) :- true |
        A1=[{next_attention,Args}|A2],
        driver_1(CAb,DS,F,T,If,AtF,Ab,A,A2,G,Att,AbF).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% wait_10(CAb,DS,F,T,If,AtF,A,A1,G,Att,Args,AtF1,S)
%%      AtF1    :: New attention line from fep

wait_10(CAb,DS,F,T,If,fep#attention,A,A1,G,Att,Args,AtF1,S) :- true |
        Att=attention,
        wait_10(CAb,DS,F,T,If,_,A,A1,G,_,Args,AtF1,S).
alternatively.
wait_10(CAb,DS,F,T,If,_,A,A1,G,Att,Args,AtF1,fep#normal) :- true |
        Att=[],
        Args=normal(Att1),
        driver_0(CAb,DS,F,T,If,AtF1,A,A1,G,Att1).
wait_10(CAb,DS,F,T,If,_,A,A1,_,Att,Args,_,fep#disconnected) :- true |
        Args=disconnected,
        disconnected(CAb,DS,F,T,If,A,A1,Att,_).
wait_10(CAb,DS,F,T,If,AtF,A,A1,G,Att,Args,_,fep#aborted) :- true |
        A1=[{next_attention,Args}|A2],
        driver_0(CAb,DS,F,T,If,AtF,A,A2,G,Att).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% resend(DS,DS1,T,T1,ID,G,G1,S)
%% cancel(T,T1,ID,S)
%%      ID      :: ID number for aborted messages

resend(DS,DS1,T,T1,ID,G,G1,S) :- true |
        T=[get_if_any(ID,X)|T1],
        if_resend(X,DS,DS1,G,G1,S).

if_resend({{Req,G}},DS,DS1,_,G1,S) :- true |
        S=normal,
        G1=G,
        prepend(Req,DS,DS1).
if_resend({},DS,DS1,G,G1,S) :- true |
        S=abnormal,
        G=G1,DS=DS1.

prepend([Req|R],DS,DS1) :- true |
        DS1=[Req|DS2],
        prepend(R,DS,DS2).
prepend([],DS,DS1) :- true | DS1=DS.

cancel(T,T1,ID,S) :- true |
        T=[get_if_any(ID,X)|T1],
        if_cancel(X,S).

if_cancel({{Req,_}},S) :- true |
        S=normal,
        device_driver:abort_msg(Req,_,_).
if_cancel({},S) :- true | S=abnormal.

/*
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% change_processor(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,S)

change_processor(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,S) :- true |
        S=normal,
        driver_1(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF).
*/


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% driver_2(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,Req,Val,S)
%%      Req     :: Io_request message that is processing now
%%      Val     :: Values from fep (vector)

driver_2(CAb,_,F,T,If,_,_,_,_,_,_,AbF,_,_,S) :- wait(CAb) |
        device_driver:abort(If,F,T,S,AbF).
driver_2(CAb,DS,F,T,If,fep#attention,Ab,A,A1,G,Att,AbF,Req,Val,S) :- true |
        Att=attention,
        driver_2(CAb,DS,F,T,If,_,Ab,A,A1,G,_,AbF,Req,Val,S).
driver_2(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,Req,Val,S) :- wait(Ab) |
        AbF=fep#abort,
        wait_20(CAb,DS,F,T,If,AtF,A,A1,G,Att,Req,Val,S).
alternatively.
%driver_2(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,Req,Val,fep#normal) :- true |
driver_2(CAb,DS,F,T,{0,Conf,SC,SAb},AtF,Ab,A,A1,G,Att,AbF,Req,Val,fep#normal)
:- true |
%        return_values(Req,G,G1,Val),
        merge({Conf1,Conf2},Conf),
        merge({SC1,SC2},SC),
        return_values(CAb,{0,Conf1,SC1,SAb},Req,G,G1,Val),
%        driver_1(CAb,DS,F,T,If,AtF,Ab,A,A1,G1,Att,AbF).
        driver_1(CAb,DS,F,T,{0,Conf2,SC2,SAb},AtF,Ab,A,A1,G1,Att,AbF).
driver_2(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,Req,_,fep#abnormal) :- true |
        device_driver:return_ab_status(Req,abnormal),
        driver_1(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF).
driver_2(CAb,DS,F,T,If,_,_,A,A1,_,Att,AbF,Req,_,fep#disconnected) :- true |
        device_driver:return_ab_status(Req,disconnected),
        disconnected(CAb,DS,F,T,If,A,A1,Att,AbF).
driver_2(CAb,DS,F,T,If,AtF,Ab,A,A1,G,Att,AbF,Req,_,fep#aborted) :- true |
        A1=[Req|A2],
        driver_1(CAb,DS,F,T,If,AtF,Ab,A,A2,G,Att,AbF).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% wait_20(CAb,DS,F,T,If,AtF,A,A1,G,Att,Req,Val,S)

%wait_20(CAb,DS,F,T,If,AtF,A,A1,G,Att,Req,Val,fep#normal) :- true |
wait_20(CAb,DS,F,T,{0,Conf,SC,SAb},AtF,A,A1,G,Att,Req,Val,fep#normal) :- true |
%        return_values(Req,G,G1,Val),
        merge({Conf1,Conf2},Conf),
        merge({SC1,SC2},SC),
        return_values(CAb,{0,Conf1,SC1,SAb},Req,G,G1,Val),
%        driver_0(CAb,DS,F,T,If,AtF,A,A1,G1,Att).
        driver_0(CAb,DS,F,T,{0,Conf2,SC2,SAb},AtF,A,A1,G1,Att).
wait_20(CAb,DS,F,T,If,AtF,A,A1,G,Att,Req,_,fep#abnormal) :- true |
        device_driver:return_ab_status(Req,abnormal),
        driver_0(CAb,DS,F,T,If,AtF,A,A1,G,Att).
wait_20(CAb,DS,F,T,If,_,A,A1,_,Att,Req,_,fep#disconnected) :- true |
        device_driver:return_ab_status(Req,disconnected),
        disconnected(CAb,DS,F,T,If,A,A1,Att,_).
wait_20(CAb,DS,F,T,If,AtF,A,A1,G,Att,Req,_,fep#aborted) :- true |
        A1=[Req|A2],
        driver_0(CAb,DS,F,T,If,AtF,A,A2,G,Att).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% send_message(Req,Req1,G,G1,F,Val,S,F1)
%%      Req     :: Io_request message
%%      Req1    :: New io_request message
%%      F,F1    :: Output stream to fep (vector)
%%      Val     :: Values from fep (vector)
%%      S       :: Status from fep

%% socket type messages
send_message({bind,Address,Args},Req,G,G1,F,Val,S,F1) :- true |
        socket_address_vector_to_string(Address,AddStr),
        F={fep#bind,AddStr,S,F1},
        Req={bind,Address,Args},
        Val={},
        G=G1.
send_message({listen,Backlog,Args},Req,G,G1,F,Val,S,F1) :- true |
        F={fep#listen,Backlog,S,F1},
        Req={listen,Backlog,Args},
        Val={},
        G=G1.
send_message({accept,Args},Req,G,G1,F,Val,S,F1) :- true |
        F={fep#accept,Address,NewSocket,S,F1},
        Req={accept,Args},
        Val={Address,NewSocket},
        G=G1.

%send_message({connect,Address,Args},Req,G,G1,F,Val,S,F1)
%:- true |
%        socket_address_vector_to_string(Address,AddStr),
%        F={fep#connect,AddStr,S,F1},
%        Req={connect,Address,Args},
%        Val={},
%        G=G1.
send_message({connect,{{A,B,C,D},E},Args},Req,G,G1,F,Val,S,F1)
:- true |
        socket_address_vector_to_string({{A,B,C,D},E},AddStr),
        F={fep#connect,AddStr,S,F1},
        Req={connect,{{A,B,C,D},E},Args},
        Val={},
        G=G1.
send_message({connect,{A},Args},Req,G,G1,F,Val,S,F1)
:- true |
        socket_address_vector_to_string({A},AddStr),
        F={fep#connect,AddStr,S,F1},
        Req={connect,{A},Args},
        Val={},
        G=G1.
send_message({connect,{A,B},Args},Req,G,G1,F,Val,S,F1)
:- string(A,_,16) |
%        F={fep#connect_hostname,B,A,S,F1},
%%        F={812,B,A,S,F1},
%        Req={connect,{A,B},Args},
%        Val={},
%        G=G1.
        check_hostname:check_hostname(A,X),
        send_message2({connect,{X,B},Args},Req,G,G1,F,Val,S,F1).
send_message({connect,{A,B},Args},Req,G,G1,F,Val,S,F1)
:- string(A,_,1) |
        F=F1,
        S=fep#abnormal,
        Req={connect,{A,B},Args},
        Val={},
        G=G1.
send_message({connect,{A,B},Args},Req,G,G1,F,Val,S,F1)
:- string(A,_,8) |
        F=F1,
        S=fep#abnormal,
        Req={connect,{A,B},Args},
        Val={},
        G=G1.
send_message({connect,{A,B},Args},Req,G,G1,F,Val,S,F1)
:- string(A,_,32) |
        F=F1,
        S=fep#abnormal,
        Req={connect,{A,B},Args},
        Val={},
        G=G1.

send_message({set_option,Option,Args},Req,G,G1,F,Val,S,F1) :- true |
        socket_option_parse(Option,OptionVal),
        send_message_option(OptionVal,F,S,F1),
        Req={set_option,Option,Args},
        Val={},
        G=G1.
send_message({send_timeout,Time,Args},Req,G,G1,F,Val,S,F1) :- true |
        F={fep#send_timeout,Time,S,F1},
        Req={send_timeout,Time,Args},
        Val={},
        G=G1.
send_message({receive_timeout,Time,Args},Req,G,G1,F,Val,S,F1) :- true |
        F={fep#receive_timeout,Time,S,F1},
        Req={receive_timeout,Time,Args},
        Val={},
        G=G1.


%% put type messages
send_message({send,Str,Args},Req,G,G1,F,Val,S,F1) :- string(Str,Size,8) |
        change_element_size(Str,16,Str2),
        F={fep#putb,Str2,Size,S,F1},
        Req={send,Str,Args},
        Val={},
        G=G1.
send_message({send,Str,Args},Req,G,G1,F,Val,S,F1) :- string(Str,_,1) |
        F=F1,
        S=fep#abnormal,
        Req={send,Str,Args},
        Val={},
        G=G1.
send_message({send,Str,Args},Req,G,G1,F,Val,S,F1) :- string(Str,_,16) |
        F=F1,
        S=fep#abnormal,
        Req={send,Str,Args},
        Val={},
        G=G1.
send_message({send,Str,Args},Req,G,G1,F,Val,S,F1) :- string(Str,_,32) |
        F=F1,
        S=fep#abnormal,
        Req={send,Str,Args},
        Val={},
        G=G1.
send_message({flush,Args},Req,G,G1,F,Val,S,F1) :- true |
        F=F1,
        S=fep#normal,
        Req={flush,Args},
        Val={},
        G=G1.

%% get type messages
send_message({receive,Size,Args},Req,G,G1,F,Val,S,F1) :- true |
        Req={receive,Size,Args},
        send_getl_message(Size,G,G1,F,Val,S,F1).

%% get_attributes
send_message({get_attributes,Args},Req,G,G1,F,Val,S,F1) :- true |
        F=F1,
        S=fep#normal,
        Req={get_attributes,Args},
        Val={},
        G=G1.

otherwise.
send_message(Req1,Req,G,G1,F,Val,S,F1) :- true |
        F=F1,
        S=fep#abnormal,
        Req=Req1,
        Val={},
        G=G1.


send_message2({connect,{A,B},Args},Req,G,G1,F,Val,S,F1)
:- string(A,_,16) |
        F={fep#connect_hostname,B,A,S,F1},
        Req={connect,{A,B},Args},
        Val={},
        G=G1.
otherwise.
send_message2({connect,{A,B},Args},Req,G,G1,F,Val,S,F1)
:- true |
        send_message({connect,{A,B},Args},Req,G,G1,F,Val,S,F1).

send_getl_message(Size,{0,_},G,F,Val,S,F1) :- Size>=0 |
%        F={fep#getl,Line,S,F1},
        F={fep#getb,Size,Line,ReturnSize,S,F1},
        G={0,_},
%        Val={Line}.
        Val={ReturnSize,Line}.
send_getl_message(Size,{N,RStr},G,F,Val,S,F1) :- N>0,Size>=0 |
        F=F1,
        G={N,RStr},
        Val={},
        S=fep#normal.
send_getl_message(Size,G,G1,F,Val,S,F1) :- Size<0 |
        F=F1,
        G=G1,
        Val={},
        S=fep#abnormal.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% return_values(CAb,If,Req,G,G1,Val)
%%      Req     :: io_request message
%%      Val     :: Values from fep (vector)

return_values(CAb,{0,Conf,SC,SAb},{receive,Size,Args},G,G1,Val) :- true |
        Conf=[],SC=[],
        return_getb_values(Size,G,G1,Val,Args).
return_values(CAb,If,{accept,Args},G,G1,Val) :- true |
        return_accept_values(CAb,If,G,G1,Val,Args).
return_values(CAb,{0,Conf,SC,SAb},{get_attributes,Args},G,G1,Val) :- true |
        Conf=[],SC=[],
        G=G1,
        Args=normal(socket,[]).
otherwise.
return_values(CAb,{0,Conf,SC,SAb},Req,G,G1,Val) :- true |
        Conf=[],SC=[],
        G=G1,
        device_driver:return_values(Req,Val).

%return_accept_values(CAb,If,G,G1,{Address,NewSocket},Args):- true |
%        G=G1,
%%        Args={normal,Address,DS},
%        socket_address_string_to_vector(Address,AddVec),
%        Args={normal,AddVec,DS},
%        driver(CAb,DS,NewSocket,If).
return_accept_values(CAb,{0,Conf,SC,SAb},G,G1,{Address,NewSocket},Args):- true |
        G=G1,
        SC=[add_resource(socket,"socket",Res)],
        return_accept_values2(Res,CAb,Conf,{Address,NewSocket},Args).

return_accept_values2(normal(SC,SAb),CAb,Conf,{Address,NewSocket},Args):- true |
        socket_address_string_to_vector(Address,AddVec),
%        Args={normal,AddVec,DS},
        DS=[reset(Res)|NDS],
        return_accept_values3(Res,AddVec,NDS,Args),
        driver(CAb,DS,NewSocket,{0,Conf,SC,SAb}).
otherwise.
return_accept_values2(Res,_,Conf,{Address,NewSocket},Args):- true |
        Args=Res,
        NewSocket=fep#nil,
        Conf=[].

return_accept_values3(normal(Ab,At,_),AddVec,DS,Args):- true |
        Args={normal,AddVec,DS,Ab,At}.
otherwise.
return_accept_values3(Res,_,DS,Args):- true |
        Args=Res,
        DS=[].

%return_getb_values(Size,G,G1,{L0},Args) :- string(L0,Size0,_) |
return_getb_values(Size,G,G1,{Return,L0},Args) :- string(L0,Size0,_) |
%        lf(LF),
%        builtin#append_string([L0,LF],Line0),
        L0=Line0,
%        getb_substring(Size,~(Size0+1),G,G1,Line0,Args).
        getb_substring(Size,Size0,G,G1,{Return,Line0},Args).
return_getb_values(Size,G,G1,{},Args) :- true |
        getb_rest_substring(Size,G,G1,Args).

%getb_substring(N,N0,G,G1,Line,Args) :- N>=N0 |
%        Args=normal(Line),
getb_substring(N,N0,G,G1,{Return,Line},Args) :- N>=N0 |
        change_element_size(Line,8,Line2),
        builtin#substring(Line2,0,Return,Line3,_),
        Args={normal,Line3},
        G=G1.
getb_substring(N,N0,_,G,Line,Args) :- N<N0 |
        N1:=N0-N,
        builtin#substring(Line,0,N,SubStr,Line0),
        builtin#substring(Line0,N,N1,Line1,_),
        Args=normal(SubStr),
        G={N1,Line1}.

getb_rest_substring(Size,{N,RStr},G,Args) :- Size>=N |
        Args=normal(RStr),
        G={0,_}.
getb_rest_substring(Size,{N,RStr},G,Args) :- Size<N |
        N1:=N-Size,
        builtin#substring(RStr,0,Size,SubStr,RStr0),
        builtin#substring(RStr0,Size,N1,RStr1,_),
        Args=normal(SubStr),
        G={N1,RStr1}.

%lf(LF) :- true |
%        builtin#new_string(LF0,1),
%        set_string_element(LF0,0,10,LF).

%% same as device_driver:terminate/8,
%% except (1) it runs after 'flush' has completed,
%%        (2) data format of id_table is different from that of default.
terminate({_,Conf,SCont,_},Status,F,T,Att,AbF,A,A1,S0) :- wait(S0) |
        Conf=[],
        F={fep#reset,AbF1,AtF1,S1,F1},
        T=[get_all(A2)],
        Att=[],
        AbF=fep#nil,
        A1=[],
        abort_all_msg(A2,SS,SS1),
        device_driver:abort_msg(A,SS1,normal),
        device_driver:terminate_fep(SCont,Status,SS,AbF1,AtF1,S1,F1).

abort_all_msg([{_,{A,_}}|A1],S,S1) :- true |
        device_driver:abort_msg(A,S,S0),
        abort_all_msg(A1,S0,S1).
abort_all_msg([],S,S1) :- true | S=S1.

disconnected(CAb,DS,F,T,{_,Conf,SCont,_},A,A1,Att,AbF) :- true |
        Conf=[],
        F=fep#nil,
        AbF=fep#nil,
        T=[get_all(A2)],
        A1=[],
        abort_all_msg(A2,S,S1),
        device_driver:abort_msg(A,S1,normal),
        return_disconnected(CAb,DS,SCont,Att,S).

return_disconnected(CAb,_,SCont,_,_) :- wait(CAb) | SCont=[].
alternatively.
return_disconnected(CAb,[Req|DS],SCont,Att,S) :- true |
        device_driver:return_ab_status(Req,disconnected,S,S1),
        return_disconnected(CAb,DS,SCont,Att,S1).
return_disconnected(_,[],SCont,Att,normal) :- true | SCont=[],Att=[].


%% Patch for fep_bug: 'abort' and 'reset' message crossing each other
%%                    when the device is used by remote control.
fep_patch(CAb,DS,F,T,If,AtF,_,A,A1,G,Att,_,Args) :- true |
        F={fep#next_attention,AtF1,S,F1},
        now_reset(CAb,DS,F1,T,If,AtF,_,A,A1,G,Att,_,Args,S).

now_reset(CAb,DS,F,T,If,AtF,_,A,A1,G,Att,_,Args,S) :- wait(S) |
        F={fep#reset,AbF1,AtF1,S1,F1},
        wait_01(CAb,DS,F1,T,If,AtF,A,A1,G,Att,Args,AbF1,AtF1,S1).


%%% in use only socket %%%%%%%%%%%%%%%%%%%
send_message_option({},F,S,F1):- true |
        F=F1,
        S=fep#abnormal.
send_message_option({O1},F,S,F1):- true |
        F={fep#set_socket_option,O1,S,F1}.
send_message_option({O1,O2},F,S,F1):- true |
        F={fep#set_socket_option,O1,O2,S,F1}.
send_message_option({O1,O2,O3},F,S,F1):- true |
        F={fep#set_socket_option,O1,O2,O3,S,F1}.

%set_socket_option({Option1},F,S,F1):- true |
%        set_socket_option1(Option1,Option_num1),
%        F={fep#set_socket_option,Option_num1,S,F1}.
%set_socket_option({Option1,Option2},F,S,F1):- true |
%        set_socket_option1(Option1,Option_num1),
%        set_socket_option1(Option2,Option_num2),
%        F={fep#set_socket_option,Option_num1,Option_num2,S,F1}.
%set_socket_option({Option1,Option2,Option3},F,S,F1):- true |
%        set_socket_option1(Option1,Option_num1),
%        set_socket_option1(Option2,Option_num2),
%        set_socket_option1(Option3,Option_num3),
%        F={fep#set_socket_option,Option_num1,Option_num2,Option_num3,S,F1}.
%
%set_socket_option1(debug,Option_num)
%:- true | Option_num = fep#so_debug.
%set_socket_option1(reuseaddr,Option_num)
%:- true | Option_num = fep#so_reuseaddr.
%set_socket_option1(keepalive,Option_num)
%:- true | Option_num = fep#so_keepalive.

socket_option_parse(Option,Val):- true |
        socket_option_parse(Option,Val,0,0,0).

socket_option_parse([],Val,Op1,Op2,Op3):- true |
        socket_option_set(Val,Op1,Op2,Op3).
socket_option_parse([debug|Next],Val,0,Op2,Op3):- true |
        socket_option_parse(Next,Val,1,Op2,Op3).
socket_option_parse([debug|Next],Val,1,Op2,Op3):- true | Val={}.
socket_option_parse([reuseaddr|Next],Val,Op1,0,Op3):- true |
        socket_option_parse(Next,Val,Op1,1,Op3).
socket_option_parse([reuseaddr|Next],Val,Op1,1,Op3):- true | Val={}.
socket_option_parse([keepalive|Next],Val,Op1,Op2,0):- true |
        socket_option_parse(Next,Val,Op1,Op2,1).
socket_option_parse([keepalive|Next],Val,Op1,Op2,1):- true | Val={}.

socket_option_set(Val,0,0,0):- true | Val={}.
socket_option_set(Val,0,0,1):- true | Val={fep#so_keepalive}.
socket_option_set(Val,0,1,0):- true | Val={fep#so_reuseaddr}.
socket_option_set(Val,0,1,1):- true | Val={fep#so_reuseaddr,fep#so_keepalive}.
socket_option_set(Val,1,0,0):- true | Val={fep#so_debug}.
socket_option_set(Val,1,0,1):- true | Val={fep#so_debug,fep#so_keepalive}.
socket_option_set(Val,1,1,0):- true | Val={fep#so_debug,fep#so_reuseaddr}.
socket_option_set(Val,1,1,1):- true | Val={fep#so_debug,fep#so_reuseaddr,
                                            fep#so_keepalive}.

socket_address_vector_to_string({Port},AddStr):- true |
        new_string(New,16,8),
        set_string_element(New,0,16#"02",New1),
        set_string_element(New1,1,16#"00",New2),
%        set_string_element(New2,4,0,New3),
%        set_string_element(New3,5,0,New4),
%        set_string_element(New4,6,0,New5),
%        set_string_element(New5,7,0,New6),
        and(16#"FF",Port,Port1),
%        set_string_element(New6,2,Port1,New7),
        set_string_element(New2,2,Port1,New7),
        shift_right(Port,8,Port2),
        and(16#"FF",Port2,Port3),
        set_string_element(New7,3,Port3,New8),
        change_element_size(New8,16,AddStr).
socket_address_vector_to_string({{Add1,Add2,Add3,Add4},Port},AddStr):- true |
        new_string(New,16,8),
        set_string_element(New,0,16#"02",New1),
        set_string_element(New1,1,16#"00",New2),
        set_string_element(New2,4,Add4,New3),
        set_string_element(New3,5,Add3,New4),
        set_string_element(New4,6,Add2,New5),
        set_string_element(New5,7,Add1,New6),
        and(16#"FF",Port,Port1),
        set_string_element(New6,2,Port1,New7),
        shift_right(Port,8,Port2),
        and(16#"FF",Port2,Port3),
        set_string_element(New7,3,Port3,New8),
        change_element_size(New8,16,AddStr).

socket_address_string_to_vector(Address,AddVec):- string(Address,_,16) |
        change_element_size(Address,8,New),
        string_element(New,4,Add4,New2),
        string_element(New2,5,Add3,New3),
        string_element(New3,6,Add2,New4),
        string_element(New4,7,Add1,New5),
        string_element(New5,2,Port1,New6),
        string_element(New6,3,Port2,_),
        Port3:= Port2 << 8,
        Port:= Port3 + Port1,
        AddVec={{Add1,Add2,Add3,Add4},Port}.
