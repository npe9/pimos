%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1994 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- module string_io_device.
:- with_macro pimos.
:- public driver/4.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% driver(CAbort,DS,F,If)
%%      CAbort  :: Termination variable from the client task
%%                 = abort ; []
%%      DS      :: Input stream from the client task
%%      F       :: Output stream to scsi_fep_module (vector stream)
%%      If      :: ={0,Conf,SCont,SAbort}
%%                 Conf  :: Output stream to confirmation device (merged)
%%                 SCont :: Server control stream
%%                 SAbort:: Server control abortion variable

driver(CAbort,DS,F,If) :- true |
        id_table:id_table(T),
        driver_0(CAbort,DS,F,T,If,dummy_attention,A,A,_).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% driver_0(CAb,DS,F,T,If,AtF,A,A1,Att)
%%      T       :: Output stream to the keyed_bag which is used to store the
%%                      list of the aborted requests with the key ID.
%%      AtF     :: Attention line from fep
%%      A,A1    :: d-list for aborted messages
%%      Att     :: Attention line to OS

driver_0(CAb,_,F,T,If,_,_,_,_) :- wait(CAb) |
        device_driver:abort(If,F,T,fep#normal,_).
driver_0(CAb,DS,F,T,If,fep#attention,A,A1,Att) :- true |
        Att=attention,
        driver_0(CAb,DS,F,T,If,_,A,A1,_).
alternatively.
driver_0(CAb,[reset(Args)|DS],F,T,If,AtF,A,A1,Att) :- true |
        F={fep#reset,AbF1,AtF1,S,F1},
        wait_01(CAb,DS,F1,T,If,AtF,A,A1,Att,Args,AbF1,AtF1,S).
driver_0(_,[close(S)|_],F,T,If,_,A,A1,Att) :- true |
        device_driver:terminate(If,S,F,T,Att,_,A,A1).
driver_0(CAb,[Req|DS],F,T,If,AtF,A,A1,Att) :-
    vector_element(Req,0,MsgName),MsgName\=reset,MsgName\=close |
        A1=[Req|A2],
        driver_0(CAb,DS,F,T,If,AtF,A,A2,Att).
driver_0(_,[],F,T,If,_,A,A1,Att) :- true |
        device_driver:terminate(If,_,F,T,Att,_,A,A1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% wait_01(CAb,DS,F,T,If,AtF,A,A1,Att,Args,AbF1,AtF1,S)
%%      Args    :: = normal(Ab,Att,ID)
%%                      Ab      :: New abort line from OS
%%                      Att     :: New attention line to OS
%%                      ID      :: Id number for aborted messages
%%                 ; abnormal
%%                 ; disconnected
%%      AbF1    :: New abort line to fep
%%      AtF1    :: New attention line from fep

wait_01(CAb,DS,F,T,If,fep#attention,A,A1,Att,Args,AbF1,AtF1,S) :- true |
        Att=attention,
        wait_01(CAb,DS,F,T,If,_,A,A1,_,Args,AbF1,AtF1,S).
wait_01(CAb,DS,F,T,If,_,A,A1,Att,Args,AbF1,AtF1,fep#normal) :- true |
        Att=[],
        A1=[],
        T=[put_with_new_id(ID,A)|T1],
        Args=normal(Ab1,Att1,ID),
        driver_1(CAb,DS,F,T1,If,AtF1,Ab1,B,B,Att1,AbF1).
wait_01(CAb,DS,F,T,If,AtF,A,A1,Att,Args,AbF1,_,fep#abnormal) :- true |
        Args=abnormal,
        AbF1=fep#nil,
        driver_0(CAb,DS,F,T,If,AtF,A,A1,Att).
wait_01(CAb,DS,F,T,If,_,A,A1,Att,Args,AbF1,_,fep#disconnected) :- true |
        Args=disconnected,
        AbF1=fep#nil,
        device_driver:disconnected(CAb,DS,F,T,If,A,A1,Att,_).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% driver_1(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF)
%%      Ab      :: Abort line from OS
%%      AbF     :: Abort line to fep

driver_1(CAb,_,F,T,If,_,_,_,_,_,AbF) :- wait(CAb) |
        device_driver:abort(If,F,T,fep#normal,AbF).
driver_1(CAb,DS,F,T,If,fep#attention,Ab,A,A1,Att,AbF) :- true |
        Att=attention,
        driver_1(CAb,DS,F,T,If,_,Ab,A,A1,_,AbF).
driver_1(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF) :- wait(Ab) |
        AbF=fep#abort,
        driver_0(CAb,DS,F,T,If,AtF,A,A1,Att).
alternatively.
driver_1(CAb,[Req|DS],F,T,If,AtF,Ab,A,A1,Att,AbF) :- true |
        io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,Req).
driver_1(_,[],F,T,If,_,_,A,A1,Att,AbF) :- true |
        device_driver:terminate(If,_,F,T,Att,AbF,A,A1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,Req)
%%      Req     :: Io_request message

io_req(CAb,DS,F,T,If,AtF,_,A,A1,Att,AbF,{reset,Args}) :- true |
        AbF=fep#abort,
%        F={fep#reset,AbF1,AtF1,S,F1},                          % patch for fep
%        wait_01(CAb,DS,F1,T,If,AtF,A,A1,Att,Args,AbF1,AtF1,S).
        fep_patch(CAb,DS,F,T,If,AtF,_,A,A1,Att,_,Args).
io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,{next_attention,Args}) :- true |
        F={fep#next_attention,AtF1,S,F1},
        wait_1(CAb,DS,F1,T,If,AtF,Ab,A,A1,Att,AbF,Args,AtF1,S).
io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,{resend,ID,S}) :- true |
        device_driver:resend(DS,DS1,T,T1,ID,S),
        driver_1(CAb,DS1,F,T1,If,AtF,Ab,A,A1,Att,AbF).
io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,{cancel,ID,S}) :- true |
        device_driver:cancel(T,T1,ID,S),
        driver_1(CAb,DS,F,T1,If,AtF,Ab,A,A1,Att,AbF).

/*
% never receives from NEW resource tree
io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,{change_processor,PE,S}) :- true |
        change_processor(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,S)@processor(PE).
*/

io_req(_,_,F,T,If,_,_,A,A1,Att,AbF,{close,S}) :- true |
        device_driver:terminate(If,S,F,T,Att,AbF,A,A1).

otherwise.
io_req(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,Req) :- true |
        send_message(Req,Req1,F,Val,S,F1),
        driver_2(CAb,DS,F1,T,If,AtF,Ab,A,A1,Att,AbF,Req1,Val,S).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% wait_1(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,Args,AtF1,S).
%%      AtF1    :: New attention line from fep

wait_1(CAb,DS,F,T,If,fep#attention,Ab,A,A1,Att,AbF,Args,AtF1,S) :- true |
        Att=attention,
        wait_1(CAb,DS,F,T,If,_,Ab,A,A1,_,AbF,Args,AtF1,S).
wait_1(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,Args,AtF1,S) :- wait(Ab) |
        AbF=fep#abort,
        wait_10(CAb,DS,F,T,If,AtF,A,A1,Att,Args,AtF1,S).
alternatively.
wait_1(CAb,DS,F,T,If,_,Ab,A,A1,Att,AbF,Args,AtF1,fep#normal) :- true |
        Att=[],
        Args=normal(Att1),
        driver_1(CAb,DS,F,T,If,AtF1,Ab,A,A1,Att1,AbF).
wait_1(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,Args,_,fep#abnormal) :- true |
        Args=abnormal,
        driver_1(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF).
wait_1(CAb,DS,F,T,If,_,_,A,A1,Att,AbF,Args,_,fep#disconnected) :- true |
        Args=disconnected,
        device_driver:disconnected(CAb,DS,F,T,If,A,A1,Att,AbF).
wait_1(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,Args,_,fep#aborted) :- true |
        A1=[{next_attention,Args}|A2],
        driver_1(CAb,DS,F,T,If,AtF,Ab,A,A2,Att,AbF).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% wait_10(CAb,DS,F,T,If,AtF,A,A1,Att,Args,AtF1,S)
%%      AtF1    :: New attention line from fep

wait_10(CAb,DS,F,T,If,fep#attention,A,A1,Att,Args,AtF1,S) :- true |
        Att=attention,
        wait_10(CAb,DS,F,T,If,_,A,A1,_,Args,AtF1,S).
alternatively.
wait_10(CAb,DS,F,T,If,_,A,A1,Att,Args,AtF1,fep#normal) :- true |
        Att=[],
        Args=normal(Att1),
        driver_0(CAb,DS,F,T,If,AtF1,A,A1,Att1).
wait_10(CAb,DS,F,T,If,AtF,A,A1,Att,Args,_,fep#abnormal) :- true |
        Args=abnormal,
        driver_0(CAb,DS,F,T,If,AtF,A,A1,Att).
wait_10(CAb,DS,F,T,If,_,A,A1,Att,Args,_,fep#disconnected) :- true |
        Args=disconnected,
        device_driver:disconnected(CAb,DS,F,T,If,A,A1,Att,_).
wait_10(CAb,DS,F,T,If,AtF,A,A1,Att,Args,_,fep#aborted) :- true |
        A1=[{next_attention,Args}|A2],
        driver_0(CAb,DS,F,T,If,AtF,A,A2,Att).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% change_processor(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,S)

change_processor(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,S) :- true |
        S=normal,
        driver_1(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% driver_2(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,Req,Val,S)
%%      Req     :: Io_request message that is processing now
%%      Val     :: Values from fep (vector)

driver_2(CAb,_,F,T,If,_,_,_,_,_,AbF,_,_,S) :- wait(CAb) |
        device_driver:abort(If,F,T,S,AbF).
driver_2(CAb,DS,F,T,If,fep#attention,Ab,A,A1,Att,AbF,Req,Val,S) :- true |
        Att=attention,
        driver_2(CAb,DS,F,T,If,_,Ab,A,A1,_,AbF,Req,Val,S).
driver_2(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,Req,Val,S) :- wait(Ab) |
        AbF=fep#abort,
        wait_20(CAb,DS,F,T,If,AtF,A,A1,Att,Req,Val,S).
alternatively.
driver_2(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,
                {io,Command,ToFep,Args},Val,fep#normal) :- true |
        device_driver:return_values({io,Command,ToFep,Args},Val),
        driver_1(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF).
driver_2(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,
                {get_attributes,Args},Val,fep#normal) :- true |
        Args=normal(string_io,[]),
        driver_1(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF).
driver_2(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,Req,_,fep#abnormal) :- true |
        device_driver:return_ab_status(Req,abnormal),
        driver_1(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF).
driver_2(CAb,DS,F,T,If,_,_,A,A1,Att,AbF,Req,_,fep#disconnected) :- true |
        device_driver:return_ab_status(Req,disconnected),
        device_driver:disconnected(CAb,DS,F,T,If,A,A1,Att,AbF).
driver_2(CAb,DS,F,T,If,AtF,Ab,A,A1,Att,AbF,Req,_,fep#aborted) :- true |
        A1=[Req|A2],
        driver_1(CAb,DS,F,T,If,AtF,Ab,A,A2,Att,AbF).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% wait_20(CAb,DS,F,T,If,AtF,A,A1,Att,Req,Val,S)

wait_20(CAb,DS,F,T,If,AtF,A,A1,Att,Req,Val,fep#normal) :- true |
        device_driver:return_values(Req,Val),
        driver_0(CAb,DS,F,T,If,AtF,A,A1,Att).
wait_20(CAb,DS,F,T,If,AtF,A,A1,Att,Req,_,fep#abnormal) :- true |
        device_driver:return_ab_status(Req,abnormal),
        driver_0(CAb,DS,F,T,If,AtF,A,A1,Att).
wait_20(CAb,DS,F,T,If,_,A,A1,Att,Req,_,fep#disconnected) :- true |
        device_driver:return_ab_status(Req,disconnected),
        device_driver:disconnected(CAb,DS,F,T,If,A,A1,Att,_).
wait_20(CAb,DS,F,T,If,AtF,A,A1,Att,Req,_,fep#aborted) :- true |
        A1=[Req|A2],
        driver_0(CAb,DS,F,T,If,AtF,A,A2,Att).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% send_message(Req,Req1,F,Val,S,F1)
%%      Req     :: Io_request message
%%      Req1    :: New io_request message
%%      F,F1    :: Output stream to fep (vector)
%%      Val     :: Values from fep (vector)
%%      S       :: Status from fep

%% get type messages
send_message({io,Command,ToFep,Args},Req,F,Val,S,F1) :- true |
        F={fep#io,Command,ToFep,From,S,F1},
        Req={io,Command,ToFep,Args},
        Val={From}.
send_message({get_attributes,Args},Req,F,Val,S,F1) :- true |
        F=F1,
        S=fep#normal,
        Req={get_attributes,Args},
        Val={}.
otherwise.
send_message(Req1,Req,F,Val,S,F1) :- true |
        F=F1,
        S=fep#abnormal,
        Req=Req1,
        Val={}.


fep_patch(CAb,DS,F,T,If,AtF,_,A,A1,Att,_,Args) :- true |
        F={fep#next_attention,AtF1,S,F1},
        now_reset(CAb,DS,F1,T,If,AtF,_,A,A1,Att,_,Args,S).

now_reset(CAb,DS,F,T,If,AtF,_,A,A1,Att,_,Args,S) :- wait(S) |
        F={fep#reset,AbF1,AtF1,S1,F1},
        wait_01(CAb,DS,F1,T,If,AtF,A,A1,Att,Args,AbF1,AtF1,S1).
