%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1992 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% stdio_converter %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:- with_macro pimos.
:- module stdio_converter.
:- public mesConv2/2, mesConv3/2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Message Converter process [1]  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%mesConv1(In, Out) :- true | messageConverter1(In, Out).
%
%messageConverter1([], Out) :- true | Out = [].
%messageConverter1([Mes | In], Out) :- true |
%%%%%%  Input message convert  %%%%%
%    (Mes = igetc(C) -> Out = [getc(C) | NOut] ;
%     Mes = igetb(Str, Size) -> Out = [getb(Str, Size) | NOut] ;
%     Mes = igetl(Line) -> Out = [getl(Line) | NOut] ;
%     Mes = igett(T) -> Out = [gett(T) | NOut] ;
%     Mes = igett(T, NVP) -> Out = [gett(T, NVP) | NOut] ;
%     Mes = igett(T, VT, NVT) -> Out = [gett(T, VT, NVT) | NOut] ;
%     Mes = igetwt(Term) -> Out = [getwt(Term) | NOut] ;
%     Mes = iprompt(Str) -> Out = [prompt(Str) | NOut] ;
%     Mes = iungetb(Str,Stat) -> Out = [ungetb(Str, Stat) | NOut] ;
%     Mes = iskip(C) -> Out = [skip(C) | NOut] ;
%     Mes = iungetc(C) -> Out = [ungetc(C) | NOut] ;
%%%%%%  Output message convert  %%%%%
%     Mes = iputc(C) -> Out = [putc(C) | NOut] ;
%     Mes = iputb(Str) -> Out = [putb(Str) | NOut] ;
%     Mes = iputl(Line) -> Out = [putl(Line) | NOut] ;
%     Mes = iputt(Term) -> Out = [putt(Term) | NOut] ;
%     Mes = iputt(Term, PD, PL) -> Out = [putt(Term, PD, PL) | NOut] ;
%     Mes = iputwt(Term) -> Out = [putwt(Term) | NOut] ;
%     Mes = iputwt(Term, PD, PL) -> Out = [putwt(Term, PD, PL) | NOut] ;
%     Mes = iputtq(Term) -> Out = [puttq(Term) | NOut] ;
%     Mes = iputtq(Term, PD, PL) -> Out = [puttq(Term, PD, PL) | NOut] ;
%     Mes = iputwtq(Term) -> Out = [putwtq(Term) | NOut] ;
%     Mes = iputwtq(Term, PD, PL) -> Out = [putwtq(Term, PD, PL) | NOut] ;
%     Mes = iputf(Frmt, Args) -> Out = [putf(Frmt, Args) | NOut] ;
%     Mes = iprint_error(Error) -> Out = [print_error(Error) | NOut] ;
%     Mes = inl -> Out = [nl | NOut] ;
%     Mes = itab(N) -> Out = [tab(N) | NOut] ;
%     Mes = iflush(Done) -> Out = [flush(Done) | NOut] ;
%%%%%%  Operator handling message convert  %%%%%
%     Mes = iadd_op(Pred, Type, OpName) ->
%        Out = [add_op(Pred, Type, OpName) | NOut] ;
%     Mes = iremove_op(Pred, Type, OpName) ->
%        Out = [remove_op(Pred, Type, OpName) | NOut] ;
%     Mes = ioperator(OpName, Def) -> Out = [operator(OpName, Def) | NOut] ;
%     Mes = ichange_op_pool(OpPool) ->
%        Out = [change_op_pool(OpPool) | NOut] ;
%     Mes = ireplace_op_pool(Old, New) ->
%        Out = [replace_op_pool(Old, New) | NOut] ;
%%%%%%  Special Message handling  %%%%%
%     Mes = ido(Messages) -> Out = [do(Messages) | NOut] ;
%%%%%%  Buffer Controlling message handling  %%%%%
%     Mes = iprint_length(New) ->
%        Out = [print_length(New) | NOut] ;
%     Mes = iprint_length(Old, New) ->
%        Out = [print_length(Old, New) | NOut] ;
%     Mes = iprint_depth(New) ->
%        Out = [print_depth(New) | NOut] ;
%     Mes = iprint_depth(Old, New) ->
%        Out = [print_depth(Old, New) | NOut] ;
%     Mes = iprint_atom_length(New) ->
%        Out = [print_atom_length(New) | NOut] ;
%     Mes = iprint_atom_length(Old, New) ->
%        Out = [print_atom_length(Old, New) | NOut] ;
%     Mes = iprint_string_length(New) ->
%        Out = [print_string_length(New) | NOut] ;
%     Mes = iprint_string_length(Old, New) ->
%        Out = [print_string_length(Old, New) | NOut] ;
%%%%%%  Message error handling  %%%%%
%    otherwise ;
%     true -> NOut = Out ),
%    messageConverter1(In, NOut).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Message Converter process [2]  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mesConv2(In, Out) :- true | messageConverter2(In, Out).

messageConverter2([], Out) :- true | Out = [].
messageConverter2([Mes | In], Out) :- true |
    (Mes = getb(Size, StrWithStat) ->
        Out = [igetb(Size, StrWithStat) | NOut] ;
     Mes = getb_noecho(Size, StrWithStat) ->
        Out = [igetb_noecho(Size, StrWithStat) | NOut] ;
     Mes = prompt(Str, Stat) ->
        Out = [iprompt(Str, Stat) | NOut] ;
     Mes = ungetb(Str, Stat) ->
        Out = [iungetb(Str, Stat) | NOut] ;
     Mes = putb(Str, Stat) ->
        Out = [iputb(Str, Stat) | NOut] ;
     Mes = flush(Done) ->
        Out = [iflush(Done) | NOut] ;
%%%%%  Message error handling  %%%%%
    otherwise ;
      true -> Out = [Mes | NOut] ),
%     true -> NOut = Out ),
    messageConverter2(In, NOut).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Message Converter process [3]  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mesConv3(In, Out) :- true | messageConverter3(In, Out).

messageConverter3([], Out) :- true | Out = [].
messageConverter3([Mes | In], Out) :- true |
    (Mes = igetb(Size, StrWithStat) ->
        Out = [getb(Size, StrWithStat) | NOut] ;
     Mes = igetb_noecho(Size, StrWithStat) ->
        Out = [getb_noecho(Size, StrWithStat) | NOut] ;
     Mes = iprompt(Str, Stat) -> Out = [prompt(Str, Stat) | NOut] ;
     Mes = iungetb(Str, Stat) -> Out = [ungetb(Str, Stat) | NOut] ;
     Mes = iputb(Str, Stat) -> Out = [putb(Str, Stat) | NOut] ;
     Mes = iflush(Done) -> Out = [flush(Done) | NOut] ;
     Mes = switch(Status) -> Status = abnormal, NOut = Out ;
     Mes = am_I_there(Status) -> Status = abnormal, NOut = Out ;
%%%%%  Other Message handling  %%%%%
    otherwise ;
     true -> Out = [Mes | NOut] ),
    messageConverter3(In, NOut).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% End %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
