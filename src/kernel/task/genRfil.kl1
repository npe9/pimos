%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1994 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 :- module genreq_filter .
 :- public genreq_filter /2 .
:- with_macro pimos.

genreq_filter(User,OS) :-true|
        genreq_filter(User,OS,_,[]) .
genreq_filter([User|U2],OS,_,Error) :-true|
        '+genreq_command'(User,OS1,Flag,[general_request]),
        'genreq_filter$wait'(U2,OS,OS1,Flag,Error) .
genreq_filter([],OS,_,Error) :-true|
        [] =OS .
otherwise .
genreq_filter(User,OS,Flag,Error) :-true|
        Flag = fail,
        OS =[],
        raise_error(Error,User) .
'genreq_filter$wait'(U2,OS,OS1,_,Error) :-wait(OS1)|
        OS =[OS1|OS2],
        genreq_filter(U2,OS2,_,Error) .
'genreq_filter$wait'(U2,OS,OS1,fail,Error) :-true|
        true .
'+genreq_command'(execute(_1,_2,_3,_4),OS,_,Error) :-true|
        '+genreq_command$wait'(execute(__1,__2,__3,_4),OS,Flag,Error),
        '+execode'(_1,__1,Flag,[execode,'execute /4'|Error]),
        '+argv'(_2,__2,Flag,[argv,'execute /4'|Error]),
        '+initrsc_or_list'(_3,__3,Flag,[initrsc_or_list,'execute /4'|Error]) .
'+genreq_command'(execute_super(_1,_2,_3,_4,_5,_6),OS,_,Error) :-true|
        '+genreq_command$wait'(execute_super(__1,__2,__3,__4,__5,_6),OS,Flag,Error),
        '+modulename'(_1,__1,Flag,[modulename,'execute_super /6'|Error]),
        '+predname'(_2,__2,Flag,[predname,'execute_super /6'|Error]),
        '+arity'(_3,__3,Flag,[arity,'execute_super /6'|Error]),
        '+argv'(_4,__4,Flag,[argv,'execute_super /6'|Error]),
        '+initrsc_or_list'(_5,__5,Flag,[initrsc_or_list,'execute_super /6'|Error]) .
'+genreq_command'(profile(_1,_2,_3,_4),OS,_,Error) :-true|
        '+genreq_command$wait'(profile(__1,__2,__3,_4),OS,Flag,Error),
        '+execode'(_1,__1,Flag,[execode,'profile /4'|Error]),
        '+argv'(_2,__2,Flag,[argv,'profile /4'|Error]),
        '+initrsc_or_list'(_3,__3,Flag,[initrsc_or_list,'profile /4'|Error]) .
'+genreq_command'(execute(_1,_2,_3,_4,_5,_6,_7,_8),OS,_,Error) :-true|
        '+genreq_command$wait'(execute(__1,__2,__3,__4,__5,__6,__7,_8),OS,Flag,Error),
        '+execode'(_1,__1,Flag,[execode,'execute /8'|Error]),
        '+argv'(_2,__2,Flag,[argv,'execute /8'|Error]),
        '+taskname'(_3,__3,Flag,[taskname,'execute /8'|Error]),
        '+minprio'(_4,__4,Flag,[minprio,'execute /8'|Error]),
        '+maxprio'(_5,__5,Flag,[maxprio,'execute /8'|Error]),
        '+tag'(_6,__6,Flag,[tag,'execute /8'|Error]),
        '+initrsc_or_list'(_7,__7,Flag,[initrsc_or_list,'execute /8'|Error]) .
'+genreq_command'(execute(_1,_2,_3,_4,_5,_6,_7),OS,_,Error) :-true|
        '+genreq_command$wait'(execute(__1,__2,__3,__4,__5,__6,_7),OS,Flag,Error),
        '+execode'(_1,__1,Flag,[execode,'execute /7'|Error]),
        '+argv'(_2,__2,Flag,[argv,'execute /7'|Error]),
        '+taskname'(_3,__3,Flag,[taskname,'execute /7'|Error]),
        '+minprio'(_4,__4,Flag,[minprio,'execute /7'|Error]),
        '+maxprio'(_5,__5,Flag,[maxprio,'execute /7'|Error]),
        '+tag'(_6,__6,Flag,[tag,'execute /7'|Error]) .
'+genreq_command'(profile(_1,_2,_3,_4,_5,_6,_7,_8),OS,_,Error) :-true|
        '+genreq_command$wait'(profile(__1,__2,__3,__4,__5,__6,__7,_8),OS,Flag,Error),
        '+execode'(_1,__1,Flag,[execode,'profile /8'|Error]),
        '+argv'(_2,__2,Flag,[argv,'profile /8'|Error]),
        '+taskname'(_3,__3,Flag,[taskname,'profile /8'|Error]),
        '+minprio'(_4,__4,Flag,[minprio,'profile /8'|Error]),
        '+maxprio'(_5,__5,Flag,[maxprio,'profile /8'|Error]),
        '+tag'(_6,__6,Flag,[tag,'profile /8'|Error]),
        '+initrsc'(_7,__7,Flag,[initrsc,'profile /8'|Error]) .
'+genreq_command'(profile(_1,_2,_3,_4,_5,_6,_7),OS,_,Error) :-true|
        '+genreq_command$wait'(profile(__1,__2,__3,__4,__5,__6,_7),OS,Flag,Error),
        '+execode'(_1,__1,Flag,[execode,'profile /7'|Error]),
        '+argv'(_2,__2,Flag,[argv,'profile /7'|Error]),
        '+taskname'(_3,__3,Flag,[taskname,'profile /7'|Error]),
        '+minprio'(_4,__4,Flag,[minprio,'profile /7'|Error]),
        '+maxprio'(_5,__5,Flag,[maxprio,'profile /7'|Error]),
        '+tag'(_6,__6,Flag,[tag,'profile /7'|Error]) .
'+genreq_command'(execute_remote(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,__11),OS,_,Error) :-true|
        '+genreq_command$wait'(execute_remote(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10,__11),OS,Flag,Error),
        '+execode'(_1,__1,Flag,[execode,'execute_remote /11'|Error]),
        '+argv'(_2,__2,Flag,[argv,'execute_remote /11'|Error]),
        '+taskname'(_3,__3,Flag,[taskname,'execute_remote /11'|Error]),
        '+minprio'(_4,__4,Flag,[minprio,'execute_remote /11'|Error]),
        '+maxprio'(_5,__5,Flag,[maxprio,'execute_remote /11'|Error]),
        '+tag'(_6,__6,Flag,[tag,'execute_remote /11'|Error]),
        '+initrsc'(_7,__7,Flag,[initrsc,'execute_remote /11'|Error]),
        '+fepnodeno'(_8,__8,Flag,[fepnodeno,'execute_remote /11'|Error]),
        '+ruser'(_9,__9,Flag,[ruser,'execute_remote /11'|Error]),
        '+rpassword'(_10,__10,Flag,[rpassword,'execute_remote /11'|Error]) .
'+genreq_command'(execute_remote(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10),OS,_,Error) :-true|
        '+genreq_command$wait'(execute_remote(__1,__2,__3,__4,__5,__6,__7,__8,__9,_10),OS,Flag,Error),
        '+execode'(_1,__1,Flag,[execode,'execute_remote /10'|Error]),
        '+argv'(_2,__2,Flag,[argv,'execute_remote /10'|Error]),
        '+taskname'(_3,__3,Flag,[taskname,'execute_remote /10'|Error]),
        '+minprio'(_4,__4,Flag,[minprio,'execute_remote /10'|Error]),
        '+maxprio'(_5,__5,Flag,[maxprio,'execute_remote /10'|Error]),
        '+tag'(_6,__6,Flag,[tag,'execute_remote /10'|Error]),
        '+fepnodeno'(_7,__7,Flag,[fepnodeno,'execute_remote /10'|Error]),
        '+ruser'(_8,__8,Flag,[ruser,'execute_remote /10'|Error]),
        '+rpassword'(_9,__9,Flag,[rpassword,'execute_remote /10'|Error]) .
'+genreq_command'(execute_super(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10),OS,_,Error) :-true|
        '+genreq_command$wait'(execute_super(__1,__2,__3,__4,__5,__6,__7,__8,__9,_10),OS,Flag,Error),
        '+modulename'(_1,__1,Flag,[modulename,'execute_super /10'|Error]),
        '+predname'(_2,__2,Flag,[predname,'execute_super /10'|Error]),
        '+arity'(_3,__3,Flag,[arity,'execute_super /10'|Error]),
        '+argv'(_4,__4,Flag,[argv,'execute_super /10'|Error]),
        '+taskname'(_5,__5,Flag,[taskname,'execute_super /10'|Error]),
        '+minprio'(_6,__6,Flag,[minprio,'execute_super /10'|Error]),
        '+maxprio'(_7,__7,Flag,[maxprio,'execute_super /10'|Error]),
        '+tag'(_8,__8,Flag,[tag,'execute_super /10'|Error]),
        '+initrsc'(_9,__9,Flag,[initrsc,'execute_super /10'|Error]) .
'+genreq_command'(execute_super(_1,_2,_3,_4,_5,_6,_7,_8,_9),OS,_,Error) :-true|
        '+genreq_command$wait'(execute_super(__1,__2,__3,__4,__5,__6,__7,__8,_9),OS,Flag,Error),
        '+modulename'(_1,__1,Flag,[modulename,'execute_super /9'|Error]),
        '+predname'(_2,__2,Flag,[predname,'execute_super /9'|Error]),
        '+arity'(_3,__3,Flag,[arity,'execute_super /9'|Error]),
        '+argv'(_4,__4,Flag,[argv,'execute_super /9'|Error]),
        '+taskname'(_5,__5,Flag,[taskname,'execute_super /9'|Error]),
        '+minprio'(_6,__6,Flag,[minprio,'execute_super /9'|Error]),
        '+maxprio'(_7,__7,Flag,[maxprio,'execute_super /9'|Error]),
        '+tag'(_8,__8,Flag,[tag,'execute_super /9'|Error]) .
'+genreq_command'(execute_user(_1,_2,_3,_4,_5,_6,_7,_8,_9),OS,_,Error) :-true|
        '+genreq_command$wait'(execute_user(__1,__2,__3,__4,__5,__6,__7,__8,_9),OS,Flag,Error),
        '+execode'(_1,__1,Flag,[execode,'execute_user /9'|Error]),
        '+argv'(_2,__2,Flag,[argv,'execute_user /9'|Error]),
        '+taskname'(_3,__3,Flag,[taskname,'execute_user /9'|Error]),
        '+minprio'(_4,__4,Flag,[minprio,'execute_user /9'|Error]),
        '+maxprio'(_5,__5,Flag,[maxprio,'execute_user /9'|Error]),
        '+tag'(_6,__6,Flag,[tag,'execute_user /9'|Error]),
        '+initrsc'(_7,__7,Flag,[initrsc,'execute_user /9'|Error]),
        '+userid'(_8,__8,Flag,[userid,'execute_user /9'|Error]) .
'+genreq_command'(execute_user(_1,_2,_3,_4,_5,_6,_7,_8),OS,_,Error) :-true|
        '+genreq_command$wait'(execute_user(__1,__2,__3,__4,__5,__6,__7,_8),OS,Flag,Error),
        '+execode'(_1,__1,Flag,[execode,'execute_user /8'|Error]),
        '+argv'(_2,__2,Flag,[argv,'execute_user /8'|Error]),
        '+taskname'(_3,__3,Flag,[taskname,'execute_user /8'|Error]),
        '+minprio'(_4,__4,Flag,[minprio,'execute_user /8'|Error]),
        '+maxprio'(_5,__5,Flag,[maxprio,'execute_user /8'|Error]),
        '+tag'(_6,__6,Flag,[tag,'execute_user /8'|Error]),
        '+user'(_7,__7,Flag,[user,'execute_user /8'|Error]) .
'+genreq_command'(execute_user(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,__11,__12),OS,_,Error) :-true|
        '+genreq_command$wait'(execute_user(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10,__11,__12),OS,Flag,Error),
        '+execode'(_1,__1,Flag,[execode,'execute_user /12'|Error]),
        '+argv'(_2,__2,Flag,[argv,'execute_user /12'|Error]),
        '+taskname'(_3,__3,Flag,[taskname,'execute_user /12'|Error]),
        '+minprio'(_4,__4,Flag,[minprio,'execute_user /12'|Error]),
        '+maxprio'(_5,__5,Flag,[maxprio,'execute_user /12'|Error]),
        '+tag'(_6,__6,Flag,[tag,'execute_user /12'|Error]),
        '+initrsc'(_7,__7,Flag,[initrsc,'execute_user /12'|Error]),
        '+user'(_8,__8,Flag,[user,'execute_user /12'|Error]),
        '+fepnodeno'(_9,__9,Flag,[fepnodeno,'execute_user /12'|Error]),
        '+ruser'(_10,__10,Flag,[ruser,'execute_user /12'|Error]),
        '+rpassword'(__11,__11,Flag,[rpassword,'execute_user /12'|Error]) .
'+genreq_command'(execute_user(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,__11),OS,_,Error) :-true|
        '+genreq_command$wait'(execute_user(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10,__11),OS,Flag,Error),
        '+execode'(_1,__1,Flag,[execode,'execute_user /11'|Error]),
        '+argv'(_2,__2,Flag,[argv,'execute_user /11'|Error]),
        '+taskname'(_3,__3,Flag,[taskname,'execute_user /11'|Error]),
        '+minprio'(_4,__4,Flag,[minprio,'execute_user /11'|Error]),
        '+maxprio'(_5,__5,Flag,[maxprio,'execute_user /11'|Error]),
        '+tag'(_6,__6,Flag,[tag,'execute_user /11'|Error]),
        '+user'(_7,__7,Flag,[user,'execute_user /11'|Error]),
        '+fepnodeno'(_8,__8,Flag,[fepnodeno,'execute_user /11'|Error]),
        '+ruser'(_9,__9,Flag,[ruser,'execute_user /11'|Error]),
        '+rpassword'(_10,__10,Flag,[rpassword,'execute_user /11'|Error]) .
'+genreq_command'(execute_user_with_proc(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,__11),OS,_,Error) :-true|
        '+genreq_command$wait'(execute_user_with_proc(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10,__11),OS,Flag,Error),
        '+execode'(_1,__1,Flag,[execode,'execute_user_with_proc /11'|Error]),
        '+argv'(_2,__2,Flag,[argv,'execute_user_with_proc /11'|Error]),
        '+taskname'(_3,__3,Flag,[taskname,'execute_user_with_proc /11'|Error]),
        '+minprio'(_4,__4,Flag,[minprio,'execute_user_with_proc /11'|Error]),
        '+maxprio'(_5,__5,Flag,[maxprio,'execute_user_with_proc /11'|Error]),
        '+execute_user_with_proc$integer$1'(_6,__6,Flag,['execute_user_with_proc /11'|Error]),
        '+execute_user_with_proc$integer$2'(_7,__7,Flag,['execute_user_with_proc /11'|Error]),
        '+tag'(_8,__8,Flag,[tag,'execute_user_with_proc /11'|Error]),
        '+initrsc'(_9,__9,Flag,[initrsc,'execute_user_with_proc /11'|Error]),
        '+userid'(_10,__10,Flag,[userid,'execute_user_with_proc /11'|Error]) .
'+genreq_command'(suicide(_1),OS,_,Error) :-true|
        suicide(__1) =OS,
        '-status'(_1,__1,Flag,['suicide /1'|Error]) .
'+genreq_command'(abort(_1,_2),OS,_,Error) :-true|
        '+genreq_command$wait'(abort(__1,_2),OS,Flag,Error),
        '+rscpath'(_1,__1,Flag,[rscpath,'abort /2'|Error]) .
'+genreq_command'(number_of_feps(_1),OS,_,Error) :-true|
        number_of_feps(__1) =OS,
        '-number_of_feps$$$enu$1'(_1,__1,Flag,['number_of_feps /1'|Error]) .
'+genreq_command'(ipl_versions(_1),OS,_,Error) :-true|
        ipl_versions(__1) =OS,
        '-ipl_versions$$$enu$1'(_1,__1,Flag,['ipl_versions /1'|Error]) .
'+genreq_command'(fep_attributes(_1),OS,_,Error) :-true|
        fep_attributes(__1) =OS,
        '-fep_attributes$$$enu$1'(_1,__1,Flag,['fep_attributes /1'|Error]) .
'+genreq_command'(setenv(_1,_2,_3),OS,_,Error) :-true|
        '+genreq_command$wait'(setenv(__1,__2,_3),OS,Flag,Error),
        '+envname'(_1,__1,Flag,[envname,'setenv /3'|Error]),
        '+value'(_2,__2,Flag,[value,'setenv /3'|Error]) .
'+genreq_command'(getenv(_1,_2),OS,_,Error) :-true|
        '+genreq_command$wait'(getenv(__1,_2),OS,Flag,Error),
        '+envname'(_1,__1,Flag,[envname,'getenv /2'|Error]) .
'+genreq_command'(getenv(_1),OS,_,Error) :-true|
        getenv(__1) =OS,
        '-getenv$$$enu$2'(_1,__1,Flag,['getenv /1'|Error]) .
'+genreq_command'(unsetenv(_1,_2),OS,_,Error) :-true|
        '+genreq_command$wait'(unsetenv(__1,_2),OS,Flag,Error),
        '+envname'(_1,__1,Flag,['unsetenv /2'|Error]) .
'+genreq_command'(get_puid(_1),OS,_,Error) :-true|
        get_puid(__1) =OS,
        '-get_puid$$$enu$1'(_1,__1,Flag,['get_puid /1'|Error]) .
'+genreq_command'(connection(_1),OS,_,Error) :-true|
        connection(__1) =OS,
        '-connection$$$enu$1'(_1,__1,Flag,['connection /1'|Error]) .
'+genreq_command'(get_gid(_1),OS,_,Error) :-true|
        get_gid(__1) =OS,
        '-get_gid$$$enu$1'(_1,__1,Flag,['get_gid /1'|Error]) .
'+genreq_command'(set_gid(_1,_2),OS,_,Error) :-true|
        '+genreq_command$wait'(set_gid(__1,_2),OS,Flag,Error),
        '+set_gid$integer$1'(_1,__1,Flag,['set_gid /2'|Error]) .
'+genreq_command'(register(_1,_2,_3),OS,_,Error) :-true|
        '+genreq_command$wait'(register(__1,__2,_3),OS,Flag,Error),
        '+register$atom$1'(_1,__1,Flag,[atom,'register /3'|Error]),
        '+register$$$vector$1'(_2,__2,Flag,['register /3'|Error]) .
'+genreq_command'(request(_1,_2,_3),OS,_,Error) :-true|
        '+genreq_command$wait'(request(__1,_2,_3),OS,Flag,Error),
        '+request$atom$1'(_1,__1,Flag,[atom,'request /3'|Error]) .
'+genreq_command'(request_anyway(_1,_2,_3),OS,_,Error) :-true|
        '+genreq_command$wait'(request_anyway(__1,_2,_3),OS,Flag,Error),
        '+request_anyway$atom$1'(_1,__1,Flag,[atom,'request_anyway /3'|Error]) .
'+genreq_command'(window(_1),OS,_,Error) :-true|
        window(_1) =OS .
'+genreq_command'(file(_1),OS,_,Error) :-true|
        file(_1) =OS .
'+genreq_command'(timer(_1),OS,_,Error) :-true|
        timer(_1) =OS .
'+genreq_command'(string_io(_1),OS,_,Error) :-true|
        string_io(_1) =OS .
'+genreq_command'(socket(_1),OS,_,Error) :-true|
        socket(_1) =OS .
'+genreq_command'(module(_1),OS,_,Error) :-true|
        module(_1) =OS .
'+genreq_command'(atom(_1),OS,_,Error) :-true|
        atom(_1) =OS .
'+genreq_command'(user(_1),OS,_,Error) :-true|
        user(_1) =OS .
otherwise .
'+genreq_command'(User,OS,Flag,Error) :-true|
        '+ask_task_command'(User,OS,Flag,Error) .
'+genreq_command$wait'(User,OS,fail,Error) :-true|
        true .
'+genreq_command$wait'(execute(__1,__2,__3,_4),OS,_,Error) :-wait(__1),wait(__2),wait(__3)|
        execute(__1,__2,__3,__4) =OS,
        '-task'(_4,__4,Flag,['execute /4'|Error]) .
'+genreq_command$wait'(execute_super(__1,__2,__3,__4,__5,_6),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5)|
        execute_super(__1,__2,__3,__4,__5,__6) =OS,
        '-task'(_6,__6,Flag,['execute_super /6'|Error]) .
'+genreq_command$wait'(profile(__1,__2,__3,_4),OS,_,Error) :-wait(__1),wait(__2),wait(__3)|
        profile(__1,__2,__3,__4) =OS,
        '-task'(_4,__4,Flag,['profile /4'|Error]) .
'+genreq_command$wait'(execute(__1,__2,__3,__4,__5,__6,__7,_8),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5),wait(__6),wait(__7)|
        execute(__1,__2,__3,__4,__5,__6,__7,__8) =OS,
        '-task'(_8,__8,Flag,['execute /8'|Error]) .
'+genreq_command$wait'(execute(__1,__2,__3,__4,__5,__6,_7),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5),wait(__6)|
        execute(__1,__2,__3,__4,__5,__6,__7) =OS,
        '-task'(_7,__7,Flag,['execute /7'|Error]) .
'+genreq_command$wait'(profile(__1,__2,__3,__4,__5,__6,__7,_8),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5),wait(__6),wait(__7)|
        profile(__1,__2,__3,__4,__5,__6,__7,__8) =OS,
        '-task'(_8,__8,Flag,['profile /8'|Error]) .
'+genreq_command$wait'(profile(__1,__2,__3,__4,__5,__6,_7),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5),wait(__6)|
        profile(__1,__2,__3,__4,__5,__6,__7) =OS,
        '-task'(_7,__7,Flag,['profile /7'|Error]) .
'+genreq_command$wait'(execute_remote(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10,__11),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5),wait(__6),wait(__7),wait(__8),wait(__9),wait(__10)|
        execute_remote(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10,__11) =OS,
        '-task'(__11,__11,Flag,['execute_remote /11'|Error]) .
'+genreq_command$wait'(execute_remote(__1,__2,__3,__4,__5,__6,__7,__8,__9,_10),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5),wait(__6),wait(__7),wait(__8),wait(__9)|
        execute_remote(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10) =OS,
        '-task'(_10,__10,Flag,['execute_remote /10'|Error]) .
'+genreq_command$wait'(execute_super(__1,__2,__3,__4,__5,__6,__7,__8,__9,_10),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5),wait(__6),wait(__7),wait(__8),wait(__9)|
        execute_super(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10) =OS,
        '-task'(_10,__10,Flag,['execute_super /10'|Error]) .
'+genreq_command$wait'(execute_super(__1,__2,__3,__4,__5,__6,__7,__8,_9),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5),wait(__6),wait(__7),wait(__8)|
        execute_super(__1,__2,__3,__4,__5,__6,__7,__8,__9) =OS,
        '-task'(_9,__9,Flag,['execute_super /9'|Error]) .
'+genreq_command$wait'(execute_user(__1,__2,__3,__4,__5,__6,__7,__8,_9),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5),wait(__6),wait(__7),wait(__8)|
        execute_user(__1,__2,__3,__4,__5,__6,__7,__8,__9) =OS,
        '-task'(_9,__9,Flag,['execute_user /9'|Error]) .
'+genreq_command$wait'(execute_user(__1,__2,__3,__4,__5,__6,__7,_8),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5),wait(__6),wait(__7)|
        execute_user(__1,__2,__3,__4,__5,__6,__7,__8) =OS,
        '-task'(_8,__8,Flag,['execute_user /8'|Error]) .
'+genreq_command$wait'(execute_user(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10,__11,__12),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5),wait(__6),wait(__7),wait(__8),wait(__9),wait(__10),wait(__11)|
        execute_user(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10,__11,__12) =OS,
        '-task'(__12,__12,Flag,['execute_user /12'|Error]) .
'+genreq_command$wait'(execute_user(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10,__11),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5),wait(__6),wait(__7),wait(__8),wait(__9),wait(__10)|
        execute_user(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10,__11) =OS,
        '-task'(__11,__11,Flag,['execute_user /11'|Error]) .
'+genreq_command$wait'(execute_user_with_proc(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10,__11),OS,_,Error) :-wait(__1),wait(__2),wait(__3),wait(__4),wait(__5),wait(__6),wait(__7),wait(__8),wait(__9),wait(__10)|
        execute_user_with_proc(__1,__2,__3,__4,__5,__6,__7,__8,__9,__10,__11) =OS,
        '-task'(__11,__11,Flag,['execute_user_with_proc /11'|Error]) .
'+genreq_command$wait'(abort(__1,_2),OS,_,Error) :-wait(__1)|
        abort(__1,__2) =OS,
        '-status'(_2,__2,Flag,['abort /2'|Error]) .
'+genreq_command$wait'(setenv(__1,__2,_3),OS,_,Error) :-wait(__1),wait(__2)|
        setenv(__1,__2,__3) =OS,
        '-status'(_3,__3,Flag,['setenv /3'|Error]) .
'+genreq_command$wait'(getenv(__1,_2),OS,_,Error) :-wait(__1)|
        getenv(__1,__2) =OS,
        '-getenv$$$enu$1'(_2,__2,Flag,['getenv /2'|Error]) .
'+genreq_command$wait'(unsetenv(__1,_2),OS,_,Error) :-wait(__1)|
        unsetenv(__1,__2) =OS,
        '-status'(_2,__2,Flag,['unsetenv /2'|Error]) .
'+genreq_command$wait'(set_gid(__1,_2),OS,_,Error) :-wait(__1)|
        set_gid(__1,__2) =OS,
        '-status'(_2,__2,Flag,['set_gid /2'|Error]) .
'+genreq_command$wait'(register(__1,__2,_3),OS,_,Error) :-wait(__1),wait(__2)|
        register(__1,__2,__3) =OS,
        '-register_status'(_3,__3,Flag,[register]) .
'+genreq_command$wait'(request(__1,_2,_3),OS,_,Error) :-wait(__1)|
        request(__1,_2,__3) =OS,
        '-status_any0'(_3,__3,Flag,[request]) .
'+genreq_command$wait'(request_anyway(__1,_2,_3),OS,_,Error) :-wait(__1)|
        request_anyway(__1,_2,__3) =OS,
        '-status_any0'(_3,__3,Flag,[request_anyway]) .
'+execute_user_with_proc$integer$1'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+execute_user_with_proc$integer$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+execute_user_with_proc$integer$2'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+execute_user_with_proc$integer$2'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+set_gid$integer$1'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+set_gid$integer$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+register$atom$1'(User,OS,_,Error) :-atom(User)|
        User =OS .
otherwise .
'+register$atom$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+request$atom$1'(User,OS,_,Error) :-atom(User)|
        User =OS .
otherwise .
'+request$atom$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+request_anyway$atom$1'(User,OS,_,Error) :-atom(User)|
        User =OS .
otherwise .
'+request_anyway$atom$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+execode'(User,OS,_,Error) :-code(User,_,_,_)|
        User =OS .
otherwise .
'+execode'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+initrsc_or_list'([In1|In2],Out,Flag,Error) :-true|
        '+task_init_command'(In1,In11,Flag,[initrsc_or_list,'execute /4'|Error]),
        '+initrsc_or_list$list0'(In11,In2,Top,Top,Out,Flag,Error) .
'+initrsc_or_list'([],Out,Flag,Error) :-true|
        [] =OS .
'+initrsc_or_list'({_1,_2},OS,_,Error) :-true|
        '+initrsc_or_list$wait'({__1,__2},OS,Flag,Error),
        '+initrsc_or_list$integer$1'(_1,__1,Flag,[initrsc_or_list,'execute /4'|Error]),
        '+initrsc_or_list$integer$2'(_2,__2,Flag,[initrsc_or_list,'execute /4'|Error]) .
otherwise .
'+initrsc_or_list'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+initrsc_or_list$wait'(User,OS,fail,Error) :-true|
        true .
'+initrsc_or_list$wait'({__1,__2},OS,_,Error) :-wait(__1),wait(__2)|
        {__1,__2} =OS .
'+initrsc_or_list$list0'(In11,In2,Top,Tail,Out,Flag,Error) :-wait(In11)|
        Tail =[In11|Tail2],
        '+initrsc_or_list$list1'(In2,Top,Tail2,Out,Flag,Error) .
'+initrsc_or_list$list0'(In11,In2,Top,Tail,Out,fail,Error) :-true|
        true .
'+initrsc_or_list$list1'([],Top,Tail,Out,Flag,Error) :-true|
        Tail =[],
        Out =Top .
'+initrsc_or_list$list1'([In1|In2],Top,Tail,Out,Flag,Error) :-true|
        '+task_init_command'(In1,In11,Flag,Error),
        '+initrsc_or_list$list0'(In11,In2,Top,Tail,Out,Flag,Error) .
'-task'(User,normal(__1,__2),_,Error) :-true|
        User =normal(_1,_2),
        '+control'(_1,__1,Flag,[control_stream]),
        '-report'(_2,__2,Flag,[report_stream]) .
'-task'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-task'(User,aborted,_,Error) :-true|
        User =aborted .
'-task'(User,disconnected,_,Error) :-true|
        User =disconnected .
'+modulename'(User,OS,_,Error) :-atom(User)|
        User =OS .
otherwise .
'+modulename'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+predname'(User,OS,_,Error) :-atom(User)|
        User =OS .
otherwise .
'+predname'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+arity'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+arity'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+taskname'(User,OS,_,Error) :-string(User,_,_)|
        User =OS .
otherwise .
'+taskname'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+minprio'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+minprio'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+maxprio'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+maxprio'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+tag'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+tag'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+fepnodeno'(User,OS,_,Error) :-string(User,_,_)|
        User =OS .
'+fepnodeno'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+fepnodeno'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+ruser'(User,OS,_,Error) :-string(User,_,_)|
        User =OS .
otherwise .
'+ruser'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+rpassword'(User,OS,_,Error) :-string(User,_,_)|
        User =OS .
otherwise .
'+rpassword'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+userid'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+userid$wait'(User2,OS,Flag,Error) .
'+userid$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+userid$wait'(User2,OS,fail,Error) :-true|
        true .
'+user'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+user'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'-status'(User,normal,_,Error) :-true|
        User =normal .
'-status'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-status'(User,aborted,_,Error) :-true|
        User =aborted .
'-status'(User,disconnected,_,Error) :-true|
        User =disconnected .
'+rscpath'([In1|In2],Out,Flag,Error) :-true|
        '+rscid'(In1,In11,Flag,Error),
        '+rscpath$list0'(In11,In2,Top,Top,Out,Flag,Error) .
'+rscpath'( *,OS,_,Error) :-true|
         * =OS .
'+rscpath'([],OS,_,Error) :-true|
        [] =OS .
otherwise .
'+rscpath'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+rscpath$list0'(In11,In2,Top,Tail,Out,Flag,Error) :-wait(In11)|
        Tail =[In11|Tail2],
        '+rscpath$list1'(In2,Top,Tail2,Out,Flag,Error) .
'+rscpath$list1'([In1|In2],Top,Tail,Out,Flag,Error) :-true|
        '+rscid'(In1,In11,Flag,Error),
        '+rscpath$list0'(In11,In2,Top,Tail,Out,Flag,Error) .
'+rscpath$list1'( *,Top,Tail,Out,Flag,Error) :-true|
        Tail = *,
        Out =Top .
'+rscpath$list1'([],Top,Tail,Out,Flag,Error) :-true|
        Tail =[],
        Out =Top .
otherwise .
'+rscpath$list1'(Pat,Top,Tail,Out,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,Pat) .
'-number_of_feps$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-normal$integer$1'(_1,__1,Flag,Error) .
'-number_of_feps$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-number_of_feps$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-number_of_feps$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-normal$integer$1'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'-ipl_versions$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-normal$$$list$1'(_1,__1,Flag,Error) .
'-ipl_versions$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-ipl_versions$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-ipl_versions$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-fep_attributes$$$enu$1'(User,normal(__1,__2,__3,__4,__5,__6,__7),_,Error) :-true|
        User =normal(_1,_2,_3,_4,_5,_6,_7),
        '-normal$integer$2'(_1,__1,Flag,Error),
        '-normal$string$1'(_2,__2,Flag,Error),
        '-normal$string$2'(_3,__3,Flag,Error),
        '-normal$string$3'(_4,__4,Flag,Error),
        '-normal$string$4'(_5,__5,Flag,Error),
        '-normal$string$5'(_6,__6,Flag,Error),
        '-normal$string$6'(_7,__7,Flag,Error) .
'-fep_attributes$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-fep_attributes$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-fep_attributes$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-normal$integer$2'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'-normal$string$1'(User,OS,_,Error) :-string(OS,_,_)|
        OS =User .
'-normal$string$2'(User,OS,_,Error) :-string(OS,_,_)|
        OS =User .
'-normal$string$3'(User,OS,_,Error) :-string(OS,_,_)|
        OS =User .
'-normal$string$4'(User,OS,_,Error) :-string(OS,_,_)|
        OS =User .
'-normal$string$5'(User,OS,_,Error) :-string(OS,_,_)|
        OS =User .
'-normal$string$6'(User,OS,_,Error) :-string(OS,_,_)|
        OS =User .
'+envname'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+envname$wait'(User2,OS,Flag,Error) .
'+envname$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+envname$wait'(User2,OS,fail,Error) :-true|
        true .
'+value'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+value$wait'(User2,OS,Flag,Error) .
'+value$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+value$wait'(User2,OS,fail,Error) :-true|
        true .
'-getenv$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-value'(_1,__1,Flag,Error) .
'-getenv$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-getenv$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-getenv$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-getenv$$$enu$2'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-envs'(_1,__1,Flag,Error) .
'-getenv$$$enu$2'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-getenv$$$enu$2'(User,aborted,_,Error) :-true|
        User =aborted .
'-getenv$$$enu$2'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-get_puid$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-uid'(_1,__1,Flag,Error) .
'-get_puid$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-get_puid$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-get_puid$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-connection$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-fepnodeno'(_1,__1,Flag,Error) .
'-connection$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-connection$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-connection$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-get_gid$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-uid'(_1,__1,Flag,Error) .
'-get_gid$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-get_gid$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-get_gid$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'+register$$$vector$1'({_1,_2,_3},OS,_,Error) :-true|
        '+register$$$vector$1$wait'({__1,__2,__3},OS,Flag,Error),
        '+uid'(_1,__1,Flag,['register /3'|Error]),
        '+gid'(_2,__2,Flag,['register /3'|Error]),
        '+register$integer$1'(_3,__3,Flag,['register /3'|Error]) .
otherwise .
'+register$$$vector$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+register$$$vector$1$wait'({__1,__2,__3},OS,_,Error) :-wait(__1),wait(__2),wait(__3)|
        {__1,__2,__3} =OS .
'+register$$$vector$1$wait'(User,OS,fail,Error) :-true|
        true .
'+register$integer$1'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+register$integer$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'-register_status'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-register_status'(User,aborted,_,Error) :-true|
        User =aborted .
'-register_status'(User,normal(__1,__2,__3),_,Error) :-true|
        User =normal(_1,__2,_3),
        '+normal$$$stream$1'(_1,__1,Flag,Error),
        '-register_att'(_3,__3,Flag,Error) .
'-status_any0'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-status_any0'(User,aborted,_,Error) :-true|
        User =aborted .
'-status_any0'(User,normal(__1),_,Error) :-true|
        User =normal(__1) .
'+ask_task_command'(id(_1),OS,_,Error) :-true|
        id(__1) =OS,
        '-id$$$enu$1'(_1,__1,Flag,['id /1'|Error]) .
'+ask_task_command'(absolute_id(_1),OS,_,Error) :-true|
        absolute_id(__1) =OS,
        '-absolute_id$$$enu$1'(_1,__1,Flag,['absolute_id /1'|Error]) .
'+ask_task_command'(status(_1,_2,_3,_4),OS,_,Error) :-true|
        '+ask_task_command$wait'(status(__1,__2,__3,_4),OS,Flag,Error),
        '+rscpath'(_1,__1,Flag,[rscpath,'status /4'|Error]),
        '+rscname'(_2,__2,Flag,[rsckind,'status /4'|Error]),
        '+verbosity'(_3,__3,Flag,[verbosity,'status /4'|Error]) .
otherwise .
'+ask_task_command'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+ask_task_command$wait'(User,OS,fail,Error) :-true|
        true .
'+ask_task_command$wait'(status(__1,__2,__3,_4),OS,_,Error) :-wait(__1),wait(__2),wait(__3)|
        status(__1,__2,__3,__4) =OS,
        '-status$$$enu$1'(_4,__4,Flag,['status /4'|Error]) .
'+argv'(In,Out,_,Error) :-vector(In,Size)|
        In =Out .
otherwise .
'+argv'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+initrsc_or_list$integer$1'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+initrsc_or_list$integer$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+initrsc_or_list$integer$2'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+initrsc_or_list$integer$2'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+initrsc'({_1,_2},OS,_,Error) :-true|
        '+initrsc$wait'({__1,__2},OS,Flag,Error),
        '+hrsc'(_1,__1,Flag,Error),
        '+lrsc'(_2,__2,Flag,Error) .
otherwise .
'+initrsc'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+initrsc$wait'({__1,__2},OS,_,Error) :-wait(__1),wait(__2)|
        {__1,__2} =OS .
'+initrsc$wait'(User,OS,fail,Error) :-true|
        true .
'-normal$$$list$1'(User,[OS|OS2],Flag,Error) :-true|
        '-version'(User1,OS,Flag,Error),
        '-normal$$$list$1$wait'(User,OS2,User1,Flag,Error) .
'-normal$$$list$1'(User,[],Flag,Error) :-true|
        User =[] .
'-normal$$$list$1$wait'(User,OS2,User1,Flag,Error) :-wait(User1)|
        User =[User1|User2],
        '-normal$$$list$1'(User2,OS2,Flag,Error) .
'-value'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-uid'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'+uid'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+uid'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+gid'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+gid'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+normal$$$stream$1'([User|U2],OS,_,Error) :-true|
        '+register_command'(User,OS1,Flag,Error),
        '+normal$$$stream$1$wait'(U2,OS,OS1,Flag,Error) .
'+normal$$$stream$1'([],OS,_,Error) :-true|
        [] =OS .
otherwise .
'+normal$$$stream$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+normal$$$stream$1$wait'(U2,OS,OS1,_,Error) :-wait(OS1)|
        OS =[OS1|OS2],
        '+normal$$$stream$1'(U2,OS2,_,Error) .
'+normal$$$stream$1$wait'(U2,OS,OS1,fail,Error) :-true|
        true .
'-register_att'(User,[],_,Error) :-true|
        User =[] .
'-register_att'(User,attention(__1),_,Error) :-true|
        User =attention(_1),
        '-register_att'(_1,__1,Flag,['attention /1'|Error]) .
'-id$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-normal$integer$3'(_1,__1,Flag,Error) .
'-id$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-id$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-id$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-normal$integer$3'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'-absolute_id$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-rscpath'(_1,__1,Flag,Error) .
'-absolute_id$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-absolute_id$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-absolute_id$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'+verbosity'(brief,OS,_,Error) :-true|
        brief =OS .
'+verbosity'(detail,OS,_,Error) :-true|
        detail =OS .
otherwise .
'+verbosity'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'-status$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-rscinfo'(_1,__1,Flag,Error) .
'-status$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-status$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-status$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'+task_init_command'(resource(_1,_2),OS,_,Error) :-true|
        '+task_init_command$wait'(resource(__1,__2),OS,Flag,Error),
        '+resource$integer$1'(_1,__1,Flag,Error),
        '+resource$integer$2'(_2,__2,Flag,Error) .
'+task_init_command'(stdio(_1,_2),OS,_,Error) :-true|
        '+task_init_command$wait'(stdio(__1,_2),OS,Flag,Error),
        '+stdio$$$list$1'(_1,__1,Flag,Error) .
'+task_init_command'(io_node(_1),OS,_,Error) :-true|
        '+task_init_command$wait'(io_node(__1),OS,Flag,Error),
        '+io_node$ground$1'(_1,__1,Flag,Error) .
'+task_init_command'(remote(_1,_2),OS,_,Error) :-true|
        '+task_init_command$wait'(remote(__1,__2),OS,Flag,Error),
        '+remote$string$1'(_1,__1,Flag,Error),
        '+remote$string$2'(_2,__2,Flag,Error) .
'+task_init_command'(uid(_1),OS,_,Error) :-true|
        '+task_init_command$wait'(uid(__1),OS,Flag,Error),
        '+uid$integer$1'(_1,__1,Flag,Error) .
'+task_init_command'(user(_1,_2),OS,_,Error) :-true|
        '+task_init_command$wait'(user(__1,__2),OS,Flag,Error),
        '+user$string$1'(_1,__1,Flag,Error),
        '+user$string$2'(_2,__2,Flag,Error) .
'+task_init_command'(name(_1),OS,_,Error) :-true|
        '+task_init_command$wait'(name(__1),OS,Flag,Error),
        '+name$string$1'(_1,__1,Flag,Error) .
'+task_init_command'(node(_1,_2),OS,_,Error) :-true|
        '+task_init_command$wait'(node(__1,__2),OS,Flag,Error),
        '+node$integer$1'(_1,__1,Flag,Error),
        '+node$integer$2'(_2,__2,Flag,Error) .
'+task_init_command'(prio(_1,_2),OS,_,Error) :-true|
        '+task_init_command$wait'(prio(__1,__2),OS,Flag,Error),
        '+prio$integer$1'(_1,__1,Flag,Error),
        '+prio$integer$2'(_2,__2,Flag,Error) .
'+task_init_command'(tag(_1),OS,_,Error) :-true|
        '+task_init_command$wait'(tag(__1),OS,Flag,Error),
        '+tag$integer$1'(_1,__1,Flag,Error) .
otherwise .
'+task_init_command'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+task_init_command$wait'(User,OS,fail,Error) :-true|
        true .
'+task_init_command$wait'(resource(__1,__2),OS,_,Error) :-wait(__1),wait(__2)|
        resource(__1,__2) =OS .
'+task_init_command$wait'(stdio(__1,_2),OS,_,Error) :-wait(__1)|
        stdio(__1,__2) =OS,
        '-stdio$$$enu$1'(_2,__2,Flag,Error) .
'+task_init_command$wait'(io_node(__1),OS,_,Error) :-wait(__1)|
        io_node(__1) =OS .
'+task_init_command$wait'(remote(__1,__2),OS,_,Error) :-wait(__1),wait(__2)|
        remote(__1,__2) =OS .
'+task_init_command$wait'(uid(__1),OS,_,Error) :-wait(__1)|
        uid(__1) =OS .
'+task_init_command$wait'(user(__1,__2),OS,_,Error) :-wait(__1),wait(__2)|
        user(__1,__2) =OS .
'+task_init_command$wait'(name(__1),OS,_,Error) :-wait(__1)|
        name(__1) =OS .
'+task_init_command$wait'(node(__1,__2),OS,_,Error) :-wait(__1),wait(__2)|
        node(__1,__2) =OS .
'+task_init_command$wait'(prio(__1,__2),OS,_,Error) :-wait(__1),wait(__2)|
        prio(__1,__2) =OS .
'+task_init_command$wait'(tag(__1),OS,_,Error) :-wait(__1)|
        tag(__1) =OS .
'+resource$integer$1'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+resource$integer$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+resource$integer$2'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+resource$integer$2'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+io_node$ground$1'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+io_node$ground$1$wait'(User2,OS,Flag,Error) .
'+io_node$ground$1$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+io_node$ground$1$wait'(User2,OS,fail,Error) :-true|
        true .
'+remote$string$1'(User,OS,_,Error) :-string(User,_,_)|
        User =OS .
otherwise .
'+remote$string$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+remote$string$2'(User,OS,_,Error) :-string(User,_,_)|
        User =OS .
otherwise .
'+remote$string$2'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+uid$integer$1'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+uid$integer$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+user$string$1'(User,OS,_,Error) :-string(User,_,_)|
        User =OS .
otherwise .
'+user$string$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+user$string$2'(User,OS,_,Error) :-string(User,_,_)|
        User =OS .
otherwise .
'+user$string$2'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+name$string$1'(User,OS,_,Error) :-string(User,_,_)|
        User =OS .
otherwise .
'+name$string$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+node$integer$1'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+node$integer$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+node$integer$2'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+node$integer$2'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+prio$integer$1'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+prio$integer$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+prio$integer$2'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+prio$integer$2'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+tag$integer$1'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+tag$integer$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+control'([User|U2],OS,_,Error) :-true|
        '+control_command'(User,OS1,Flag,Error),
        '+control$wait'(U2,OS,OS1,Flag,Error) .
'+control'([],OS,_,Error) :-true|
        [] =OS .
otherwise .
'+control'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+control$wait'(U2,OS,OS1,_,Error) :-wait(OS1)|
        OS =[OS1|OS2],
        '+control'(U2,OS2,_,Error) .
'+control$wait'(U2,OS,OS1,fail,Error) :-true|
        true .
'-report'(User,[OS|OS2],_,Error) :-true|
        '-report_command'(User1,OS,Flag,Error),
        '-report$wait'(User,OS2,User1,Flag,Error) .
'-report'(User,[],_,Error) :-true|
        User =[] .
'-report$wait'(User,OS2,User1,_,Error) :-wait(User1)|
        User =[User1|User2],
        '-report'(User2,OS2,_,Error) .
'+hrsc'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+hrsc'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+lrsc'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+lrsc'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+rscid'( *,OS,_,Error) :-true|
         * =OS .
'+rscid'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+rscid'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'-envs'(User,[OS|OS2],Flag,Error) :-true|
        '-env'(User1,OS,Flag,Error),
        '-envs$wait'(User,OS2,User1,Flag,Error) .
'-envs'(User,[],Flag,Error) :-true|
        User =[] .
'-envs$wait'(User,OS2,User1,Flag,Error) :-wait(User1)|
        User =[User1|User2],
        '-envs'(User2,OS2,Flag,Error) .
'-fepnodeno'(User,OS,_,Error) :-string(OS,_,_)|
        User =OS .
'-fepnodeno'(User,OS,_,Error) :-integer(OS)|
        User =OS .
'+register_command'(get_request(_1,_2,_3),OS,_,Error) :-true|
        '+register_command$wait'(get_request(__1,__2,_3),OS,Flag,Error),
        '+get_request$code$1'(_1,__1,Flag,['get_request /3'|Error]),
        '+get_request$ground$1'(_2,__2,Flag,['get_request /3'|Error]) .
otherwise .
'+register_command'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+register_command$wait'(User,OS,fail,Error) :-true|
        true .
'+register_command$wait'(get_request(__1,__2,_3),OS,_,Error) :-wait(__1),wait(__2)|
        get_request(__1,__2,__3) =OS,
        '-request_out'(_3,__3,Flag,['get_request /3'|Error]) .
'+get_request$code$1'(User,OS,_,Error) :-code(User,_,_,_)|
        User =OS .
otherwise .
'+get_request$code$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+get_request$ground$1'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+get_request$ground$1$wait'(User2,OS,Flag,Error) .
'+get_request$ground$1$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+get_request$ground$1$wait'(User2,OS,fail,Error) :-true|
        true .
'-rscpath'(User,[OS|OS2],Flag,Error) :-true|
        '-rscid'(User1,OS,Flag,Error),
        '-rscpath$wait'(User,OS2,User1,Flag,Error) .
'-rscpath'(User, *,_,Error) :-true|
        User = * .
'-rscpath'(User,[],_,Error) :-true|
        User =[] .
'-rscpath$wait'(User,OS2,User1,Flag,Error) :-wait(User1)|
        User =[User1|User2],
        '-rscpath'(User2,OS2,Flag,Error) .
'+rscname'(User,OS,_,Error) :-atom(User)|
        User =OS .
otherwise .
'+rscname'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+stdio$$$list$1'([In1|In2],Out,Flag,Error) :-true|
        '+stdio_param'(In1,In11,Flag,Error),
        '+stdio$$$list$1$list0'(In11,In2,Top,Top,Out,Flag,Error) .
'+stdio$$$list$1'([],Out,Flag,Error) :-true|
        [] =Out .
'+stdio$$$list$1$list0'(In11,In2,Top,Tail,Out,Flag,Error) :-wait(In11)|
        '+stdio$$$list$1$list1'(In2,Top,Tail2,Out,Flag,Error),
        Tail =[In11|Tail2] .
'+stdio$$$list$1$list0'(In11,In2,Top,Tail,Out,fail,Error) :-true|
        true .
'+stdio$$$list$1$list1'([],Top,Tail,Out,Flag,Error) :-true|
        Tail =[],
        Out =Top .
'+stdio$$$list$1$list1'([In1|In2],Top,Tail,Out,Flag,Error) :-true|
        '+stdio_param'(In1,In11,Flag,Error),
        '+stdio$$$list$1$list0'(In11,In2,Top,Tail,Out,Flag,Error) .
'-stdio$$$enu$1'(User,normal(__1,__2),_,Error) :-true|
        User =normal(_1,_2),
        '-normal$integer$4'(_1,__1,Flag,Error),
        '-normal$$$list$2'(_2,__2,Flag,Error) .
'-stdio$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-stdio$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-stdio$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-normal$integer$4'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'+control_command'(stop,OS,_,Error) :-true|
        stop =OS .
'+control_command'(allow_resource_report,OS,_,Error) :-true|
        allow_resource_report =OS .
'+control_command'(statistics,OS,_,Error) :-true|
        statistics =OS .
'+control_command'(profile,OS,_,Error) :-true|
        profile =OS .
'+control_command'(abort(_1,_2),OS,_,Error) :-true|
        '+control_command$wait'(abort(__1,_2),OS,Flag,Error),
        '+rscpath'(_1,__1,Flag,[rscpath,'abort /2'|Error]) .
'+control_command'(abort(_1),OS,_,Error) :-true|
        abort(__1) =OS,
        '-status'(_1,__1,Flag,['abort /1'|Error]) .
'+control_command'(add_resource(_1,_2),OS,_,Error) :-true|
        '+control_command$wait'(add_resource(__1,__2),OS,Flag,Error),
        '+hrsc'(_1,__1,Flag,[hrsc,'add_resource /2'|Error]),
        '+lrsc'(_2,__2,Flag,[lrsc,'add_resource /2'|Error]) .
'+control_command'(id(_1),OS,_,Error) :-true|
        id(__1) =OS,
        '-id$$$enu$2'(_1,__1,Flag,['id /1'|Error]) .
'+control_command'(absolute_id(_1),OS,_,Error) :-true|
        absolute_id(__1) =OS,
        '-absolute_id$$$enu$2'(_1,__1,Flag,['absolute_id /1'|Error]) .
'+control_command'(status(_1,_2,_3,_4),OS,_,Error) :-true|
        '+control_command$wait'(status(__1,__2,__3,_4),OS,Flag,Error),
        '+rscpath'(_1,__1,Flag,[rscpath,'status /4'|Error]),
        '+rscname'(_2,__2,Flag,[rsckind,'status /4'|Error]),
        '+verbosity'(_3,__3,Flag,[verbosity,'status /4'|Error]) .
otherwise .
'+control_command'(User,OS,Flag,Error) :-true|
        '+aa_command'(User,OS,Flag,Error) .
'+control_command$wait'(User,OS,fail,Error) :-true|
        true .
'+control_command$wait'(abort(__1,_2),OS,_,Error) :-wait(__1)|
        abort(__1,__2) =OS,
        '-status'(_2,__2,Flag,['abort /2'|Error]) .
'+control_command$wait'(add_resource(__1,__2),OS,_,Error) :-wait(__1),wait(__2)|
        add_resource(__1,__2) =OS .
'+control_command$wait'(status(__1,__2,__3,_4),OS,_,Error) :-wait(__1),wait(__2),wait(__3)|
        status(__1,__2,__3,__4) =OS,
        '-status$$$enu$2'(_4,__4,Flag,['status /4'|Error]) .
'-report_command'(User,statistics_started,_,Error) :-true|
        User =statistics_started .
'-report_command'(User,resource_report_allowed,_,Error) :-true|
        User =resource_report_allowed .
'-report_command'(User,resource_added,_,Error) :-true|
        User =resource_added .
'-report_command'(User,resource_low,_,Error) :-true|
        User =resource_low .
'-report_command'(User,aborted,_,Error) :-true|
        User =aborted .
'-report_command'(User,terminated,_,Error) :-true|
        User =terminated .
'-report_command'(User,exception(__1,__2,__3,__4),_,Error) :-true|
        User =exception(_1,_2,__3,__4),
        '-exckind'(_1,__1,Flag,['exception /4'|Error]),
        '-excinfo'(_2,__2,Flag,['exception /4'|Error]) .
'-report_command'(User,statistics(__1,__2),_,Error) :-true|
        User =statistics(_1,_2),
        '-hstat'(_1,__1,Flag,Error),
        '-lstat'(_2,__2,Flag,Error) .
'-report_command'(User,return_resource(__1,__2),_,Error) :-true|
        User =return_resource(_1,_2),
        '-hrsc'(_1,__1,Flag,Error),
        '-lrsc'(_2,__2,Flag,Error) .
'-report_command'(User,profiling_information(__1,__2,__3,__4),_,Error) :-true|
        User =profiling_information(_1,_2,_3,_4),
        '-profile_node'(_1,__1,Flag,Error),
        '-profile_type'(_2,__2,Flag,Error),
        '-profile_depth'(_3,__3,Flag,Error),
        '-profile_data'(_4,__4,Flag,Error) .
'-report_command'(User,profiling_started,_,Error) :-true|
        User =profiling_started .
'-report_command'(User,profiling_rejected,_,Error) :-true|
        User =profiling_rejected .
'-report_command'(User,profiling_completed,_,Error) :-true|
        User =profiling_completed .
'-report_command'(User,stopped(__1,__2),_,Error) :-true|
        User =stopped(_1,_2),
        '+reason_stream'(_1,__1,Flag,[reason_stream,'stopped /2'|Error]),
        '+cancel'(_2,__2,Flag,[cancel,'stopped /2'|Error]) .
'-version'(User,{__1,__2},_,Error) :-true|
        User ={_1,_2},
        '-version$string$1'(_1,__1,Flag,Error),
        '-version_contents'(_2,__2,Flag,Error) .
'-version$string$1'(User,OS,_,Error) :-string(OS,_,_)|
        OS =User .
'-request_out'(User,general_request(__1,__2,__3,__4,__5,__6),_,Error) :-true|
        User =general_request(_1,__2,_3,_4,_5,__6),
        '+general_request$$$stream$1'(_1,__1,Flag,[server_control]),
        '-general_request$ground$1'(_3,__3,Flag,Error),
        '-general_request$ground$2'(_4,__4,Flag,Error),
        '+general_request$ground$1'(_5,__5,Flag,Error) .
'-request_out'(User,standard_io(__1,__2,__3),_,Error) :-true|
        User =standard_io(_1,_2,_3),
        '-standard_io$$$stream$1'(_1,__1,Flag,[std_control]),
        '-standard_io$atom$1'(_2,__2,Flag,Error),
        '-standard_io$ground$1'(_3,__3,Flag,Error) .
'-request_out'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-request_out'(User,aborted,_,Error) :-true|
        User =aborted .
'-general_request$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-general_request$ground$2'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'+general_request$ground$1'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+general_request$ground$1$wait'(User2,OS,Flag,Error) .
'+general_request$ground$1$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+general_request$ground$1$wait'(User2,OS,fail,Error) :-true|
        true .
'-standard_io$atom$1'(User,OS,_,Error) :-atom(OS)|
        OS =User .
'-standard_io$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-rscinfo'(User,[OS|OS2],Flag,Error) :-true|
        '-rscinfo2'(User1,OS,Flag,Error),
        '-rscinfo$wait'(User,OS2,User1,Flag,Error) .
'-rscinfo'(User,[],Flag,Error) :-true|
        User =[] .
'-rscinfo$wait'(User,OS2,User1,Flag,Error) :-wait(User1)|
        User =[User1|User2],
        '-rscinfo'(User2,OS2,Flag,Error) .
'+stdio_param'(in(_1),OS,_,Error) :-true|
        '+stdio_param$wait'(in(__1),OS,Flag,Error),
        '+stdio_param_body'(_1,__1,Flag,['in /1'|Error]) .
'+stdio_param'(out(_1),OS,_,Error) :-true|
        '+stdio_param$wait'(out(__1),OS,Flag,Error),
        '+stdio_param_body'(_1,__1,Flag,['out /1'|Error]) .
'+stdio_param'(inter(_1),OS,_,Error) :-true|
        '+stdio_param$wait'(inter(__1),OS,Flag,Error),
        '+stdio_param_body'(_1,__1,Flag,['inter /1'|Error]) .
'+stdio_param'(in_out(_1),OS,_,Error) :-true|
        '+stdio_param$wait'(in_out(__1),OS,Flag,Error),
        '+stdio_param_body'(_1,__1,Flag,['in_out /1'|Error]) .
'+stdio_param'(in_inter(_1),OS,_,Error) :-true|
        '+stdio_param$wait'(in_inter(__1),OS,Flag,Error),
        '+stdio_param_body'(_1,__1,Flag,['in_inter /1'|Error]) .
'+stdio_param'(out_inter(_1),OS,_,Error) :-true|
        '+stdio_param$wait'(out_inter(__1),OS,Flag,Error),
        '+stdio_param_body'(_1,__1,Flag,['out_inter /1'|Error]) .
'+stdio_param'(in_out_inter(_1),OS,_,Error) :-true|
        '+stdio_param$wait'(in_out_inter(__1),OS,Flag,Error),
        '+stdio_param_body'(_1,__1,Flag,['in_out_inter /1'|Error]) .
otherwise .
'+stdio_param'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+stdio_param$wait'(User,OS,fail,Error) :-true|
        true .
'+stdio_param$wait'(in(__1),OS,_,Error) :-wait(__1)|
        in(__1) =OS .
'+stdio_param$wait'(out(__1),OS,_,Error) :-wait(__1)|
        out(__1) =OS .
'+stdio_param$wait'(inter(__1),OS,_,Error) :-wait(__1)|
        inter(__1) =OS .
'+stdio_param$wait'(in_out(__1),OS,_,Error) :-wait(__1)|
        in_out(__1) =OS .
'+stdio_param$wait'(in_inter(__1),OS,_,Error) :-wait(__1)|
        in_inter(__1) =OS .
'+stdio_param$wait'(out_inter(__1),OS,_,Error) :-wait(__1)|
        out_inter(__1) =OS .
'+stdio_param$wait'(in_out_inter(__1),OS,_,Error) :-wait(__1)|
        in_out_inter(__1) =OS .
'-normal$$$list$2'(User,[OS|OS2],Flag,Error) :-true|
        '-stdio_result'(User1,OS,Flag,Error),
        '-normal$$$list$2$wait'(User,OS2,User1,Flag,Error) .
'-normal$$$list$2'(User,[],Flag,Error) :-true|
        User =[] .
'-normal$$$list$2$wait'(User,OS2,User1,Flag,Error) :-wait(User1)|
        User =[User1|User2],
        '-normal$$$list$2'(User2,OS2,Flag,Error) .
'+aa_command'(reset(_1),OS,_,Error) :-true|
        reset(__1) =OS,
        '-reset$$$enu$1'(_1,__1,Flag,['reset /1'|Error]) .
'+aa_command'(next_attention(_1),OS,_,Error) :-true|
        next_attention(__1) =OS,
        '-next_attention$$$enu$1'(_1,__1,Flag,['next_attention /1'|Error]) .
'+aa_command'(resend(_1,_2),OS,_,Error) :-true|
        '+aa_command$wait'(resend(__1,_2),OS,Flag,Error),
        '+msgid'(_1,__1,Flag,[msgid,'resend /2'|Error]) .
'+aa_command'(cancel(_1,_2),OS,_,Error) :-true|
        '+aa_command$wait'(cancel(__1,_2),OS,Flag,Error),
        '+msgid'(_1,__1,Flag,[msgid,'cancel /2'|Error]) .
otherwise .
'+aa_command'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+aa_command$wait'(User,OS,fail,Error) :-true|
        true .
'+aa_command$wait'(resend(__1,_2),OS,_,Error) :-wait(__1)|
        resend(__1,__2) =OS,
        '-status'(_2,__2,Flag,['resend /2'|Error]) .
'+aa_command$wait'(cancel(__1,_2),OS,_,Error) :-wait(__1)|
        cancel(__1,__2) =OS,
        '-status'(_2,__2,Flag,['cancel /2'|Error]) .
'-exckind'(User,OS,_,Error) :-atom(OS)|
        OS =User .
'-hstat'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'-lstat'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'-hrsc'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'-lrsc'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'-profile_type'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'-profile_depth'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'-profile_data'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'+cancel'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+cancel$wait'(User2,OS,Flag,Error) .
'+cancel$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+cancel$wait'(User2,OS,fail,Error) :-true|
        true .
'-version_contents'(User,[],_,Error) :-true|
        User =[] .
'-version_contents'(User,OS,_,Error) :-string(OS,_,_)|
        User =OS .
'-env'(User,{__1,__2},_,Error) :-true|
        User ={_1,_2},
        '-envname'(_1,__1,Flag,Error),
        '-value'(_2,__2,Flag,Error) .
'+general_request$$$stream$1'([User|U2],OS,_,Error) :-true|
        '+server_control'(User,OS1,Flag,[server_control]),
        '+general_request$$$stream$1$wait'(U2,OS,OS1,Flag,Error) .
'+general_request$$$stream$1'([],OS,_,Error) :-true|
        [] =OS .
otherwise .
'+general_request$$$stream$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+general_request$$$stream$1$wait'(U2,OS,OS1,_,Error) :-wait(OS1)|
        OS =[OS1|OS2],
        '+general_request$$$stream$1'(U2,OS2,_,Error) .
'+general_request$$$stream$1$wait'(U2,OS,OS1,fail,Error) :-true|
        true .
'-standard_io$$$stream$1'(User,[OS|OS2],_,Error) :-true|
        '-std_control'(User1,OS,Flag,[std_control]),
        '-standard_io$$$stream$1$wait'(User,OS2,User1,Flag,Error) .
'-standard_io$$$stream$1'(User,[],_,Error) :-true|
        User =[] .
'-standard_io$$$stream$1$wait'(User,OS2,User1,_,Error) :-wait(User1)|
        User =[User1|User2],
        '-standard_io$$$stream$1'(User2,OS2,_,Error) .
'-rscid'(User, *,_,Error) :-true|
        User = * .
'-rscid'(User,OS,_,Error) :-integer(OS)|
        User =OS .
'-id$$$enu$2'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-normal$integer$5'(_1,__1,Flag,Error) .
'-id$$$enu$2'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-id$$$enu$2'(User,aborted,_,Error) :-true|
        User =aborted .
'-id$$$enu$2'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-absolute_id$$$enu$2'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-rscpath'(_1,__1,Flag,Error) .
'-absolute_id$$$enu$2'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-absolute_id$$$enu$2'(User,aborted,_,Error) :-true|
        User =aborted .
'-absolute_id$$$enu$2'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-status$$$enu$2'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-rscinfo'(_1,__1,Flag,Error) .
'-status$$$enu$2'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-status$$$enu$2'(User,aborted,_,Error) :-true|
        User =aborted .
'-status$$$enu$2'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-reset$$$enu$1'(User,normal(__1,__2,__3),_,Error) :-true|
        User =normal(__1,_2,_3),
        '-attention'(_2,__2,Flag,[attention|Error]),
        '-msgid'(_3,__3,Flag,[msgid|Error]) .
'-reset$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-reset$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-reset$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-next_attention$$$enu$1'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-attention'(_1,__1,Flag,Error) .
'-next_attention$$$enu$1'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-next_attention$$$enu$1'(User,aborted,_,Error) :-true|
        User =aborted .
'-next_attention$$$enu$1'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-excinfo'(Out,In,Flag,Error) :-vector(In,Size)|
        In =Out .
'-profile_node'(Out,In,Flag,Error) :-vector(In,Size),vector_element(In,0,Elm)|
        '-profile_node$vect1'(In,Elm,1,Size,In2,Flag,Error),
        '-profile_node$wait'(In2,Out,Flag,Error) .
'-profile_node$wait'(In2,Out,Flag,Error) :-wait(In2)|
        Out =In2 .
'-profile_node$vect1'(Vector,Elm,Pos,Size,In2,Flag,Error) :-Pos \=Size|
        '-profile_node$integer$1'(Elm2,Elm,Flag,Error),
        '-profile_node$vect2'(Vector,Pos,Elm2,Size,In2,Flag,Error) .
'-profile_node$vect1'(Vector,Elm,Size,Size,In2,Flag,Error) :-true|
        '-profile_node$integer$1'(Elm2,Elm,Flag,Error),
        '-profile_node$vect2'(Vector,Size,Elm2,Size,In2,Flag,Error) .
'-profile_node$vect2'(Vector,Pos,Elm2,Size,In2,Flag,Error) :-wait(Elm2),Pos \=Size,vector_element(Vector,Pos,Nelm)|
        Npos :=Pos + 1,
        '-profile_node$vect1'(Vector,Nelm,Npos,Size,In2,Flag,Error) .
'-profile_node$vect2'(Vector,Size,Elm2,Size,In2,Flag,Error) :-wait(Elm2)|
        Vector =In2 .
'-profile_node$integer$1'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'+reason_stream'([User|U2],OS,_,Error) :-true|
        '+reason_stream$atom$1'(User,OS1,Flag,Error),
        '+reason_stream$wait'(U2,OS,OS1,Flag,Error) .
'+reason_stream'([],OS,_,Error) :-true|
        [] =OS .
otherwise .
'+reason_stream'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+reason_stream$wait'(U2,OS,OS1,_,Error) :-wait(OS1)|
        OS =[OS1|OS2],
        '+reason_stream'(U2,OS2,_,Error) .
'+reason_stream$wait'(U2,OS,OS1,fail,Error) :-true|
        true .
'+reason_stream$atom$1'(User,OS,_,Error) :-atom(User)|
        User =OS .
otherwise .
'+reason_stream$atom$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'-rscinfo2'(User,{__1,__2,__3,__4,__5,__6},_,Error) :-true|
        User ={_1,_2,_3,_4,_5,_6},
        '-rscid'(_1,__1,Flag,Error),
        '-rscinfo2$ground$1'(_2,__2,Flag,Error),
        '-task_status'(_3,__3,Flag,Error),
        '-limit'(_4,__4,Flag,Error),
        '-consume'(_5,__5,Flag,Error),
        '-rscinfo'(_6,__6,Flag,Error) .
'-rscinfo2'(User,{__1,__2},_,Error) :-true|
        User ={_1,_2},
        '-rscid'(_1,__1,Flag,Error),
        '-rscinfo'(_2,__2,Flag,Error) .
otherwise .
'-rscinfo2'(User,OS,Flag,Error) :-true|
        '-brief_info'(User,OS,Flag,Error) .
'-stdio_result'(User,in(__1),_,Error) :-true|
        User =in(_1),
        '-in$ground$1'(_1,__1,Flag,['in /1'|Error]) .
'-stdio_result'(User,out(__1),_,Error) :-true|
        User =out(_1),
        '-out$ground$1'(_1,__1,Flag,['out /1'|Error]) .
'-stdio_result'(User,inter(__1),_,Error) :-true|
        User =inter(_1),
        '-inter$ground$1'(_1,__1,Flag,['inter /1'|Error]) .
'-stdio_result'(User,in_out(__1),_,Error) :-true|
        User =in_out(_1),
        '-in_out$ground$1'(_1,__1,Flag,['in_out /1'|Error]) .
'-stdio_result'(User,in_inter(__1),_,Error) :-true|
        User =in_inter(_1),
        '-in_inter$ground$1'(_1,__1,Flag,['in_inter /1'|Error]) .
'-stdio_result'(User,out_inter(__1),_,Error) :-true|
        User =out_inter(_1),
        '-out_inter$ground$1'(_1,__1,Flag,['out_inter /1'|Error]) .
'-stdio_result'(User,in_out_inter(__1),_,Error) :-true|
        User =in_out_inter(_1),
        '-in_out_inter$ground$1'(_1,__1,Flag,['in_out_inter /1'|Error]) .
'-in$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-out$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-inter$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-in_out$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-in_inter$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-out_inter$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-in_out_inter$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-normal$integer$5'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'+msgid'(User,OS,_,Error) :-integer(User)|
        User =OS .
otherwise .
'+msgid'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'-envname'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'+server_control'(add_resource(_1,_2,_3),OS,_,Error) :-true|
        '+server_control$wait'(add_resource(__1,__2,_3),OS,Flag,Error),
        '+add_resource$atom$1'(_1,__1,Flag,['add_resource /3'|Error]),
        '+add_resource$ground$1'(_2,__2,Flag,['add_resource /3'|Error]) .
'+server_control'(change_comment(_1,_2),OS,_,Error) :-true|
        '+server_control$wait'(change_comment(__1,_2),OS,Flag,Error),
        '+change_comment$ground$1'(_1,__1,Flag,Error) .
'+server_control'(absolute_id(_1),OS,_,Error) :-true|
        absolute_id(__1) =OS,
        '-absolute_id$$$enu$3'(_1,__1,Flag,Error) .
otherwise .
'+server_control'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+server_control$wait'(User,OS,fail,Error) :-true|
        true .
'+server_control$wait'(add_resource(__1,__2,_3),OS,_,Error) :-wait(__1),wait(__2)|
        add_resource(__1,__2,__3) =OS,
        '-server_control_status'(_3,__3,Flag,['add_resource /3'|Error]) .
'+server_control$wait'(change_comment(__1,_2),OS,_,Error) :-wait(__1)|
        change_comment(__1,__2) =OS,
        '-status'(_2,__2,Flag,Error) .
'+add_resource$atom$1'(User,OS,_,Error) :-atom(User)|
        User =OS .
otherwise .
'+add_resource$atom$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+add_resource$ground$1'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+add_resource$ground$1$wait'(User2,OS,Flag,Error) .
'+add_resource$ground$1$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+add_resource$ground$1$wait'(User2,OS,fail,Error) :-true|
        true .
'+change_comment$ground$1'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+change_comment$ground$1$wait'(User2,OS,Flag,Error) .
'+change_comment$ground$1$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+change_comment$ground$1$wait'(User2,OS,fail,Error) :-true|
        true .
'-std_control'(User,open(__1,__2,__3),_,Error) :-true|
        User =open(_1,_2,_3),
        '-open$$$vector$1'(_1,__1,Flag,['open /3'|Error]),
        '-open$$$enu$1'(_2,__2,Flag,['open /3'|Error]),
        '-open$$$enu$2'(_3,__3,Flag,['open /3'|Error]) .
'-std_control'(User,request(__1,__2,__3,__4),_,Error) :-true|
        User =request(__1,_2,__3,_4),
        '-request$integer$1'(_2,__2,Flag,['request /4'|Error]),
        '+request$ground$1'(_4,__4,Flag,['request /4'|Error]) .
'-std_control'(User,make_branch(__1,__2,__3,__4),_,Error) :-true|
        User =make_branch(_1,__2,_3,_4),
        '-make_branch$$$stream$1'(_1,__1,Flag,['make_branch /4'|Error]),
        '-make_branch$ground$1'(_3,__3,Flag,['make_branch /4'|Error]),
        '-make_branch$ground$2'(_4,__4,Flag,['make_branch /4'|Error]) .
'-request$integer$1'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'+request$ground$1'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+request$ground$1$wait'(User2,OS,Flag,Error) .
'+request$ground$1$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+request$ground$1$wait'(User2,OS,fail,Error) :-true|
        true .
'-make_branch$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-make_branch$ground$2'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-open$$$enu$1'(User,switch(__1,__2),_,Error) :-true|
        User =switch(_1,__2),
        '+switch$$$stream$1'(_1,__1,Flag,['switch /2'|Error]) .
'-open$$$enu$2'(User,io(__1,__2),_,Error) :-true|
        User =io(_1,__2),
        '+io$$$stream$1'(_1,__1,Flag,Error) .
'+stdio_param_body'({_1,_2,_3},OS,_,Error) :-true|
        '+stdio_param_body$wait'({__1,__2,_3},OS,Flag,Error),
        '+stdio_param_body$atom$1'(_1,__1,Flag,Error),
        '+stdio_param_body$ground$1'(_2,__2,Flag,Error) .
otherwise .
'+stdio_param_body'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+stdio_param_body$wait'({__1,__2,_3},OS,_,Error) :-wait(__1),wait(__2)|
        {__1,__2,__3} =OS,
        '-stdio_param_body$ground$1'(_3,__3,Flag,Error) .
'+stdio_param_body$wait'(User,OS,fail,Error) :-true|
        true .
'+stdio_param_body$atom$1'(User,OS,_,Error) :-atom(User)|
        User =OS .
otherwise .
'+stdio_param_body$atom$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+stdio_param_body$ground$1'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+stdio_param_body$ground$1$wait'(User2,OS,Flag,Error) .
'+stdio_param_body$ground$1$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+stdio_param_body$ground$1$wait'(User2,OS,fail,Error) :-true|
        true .
'-stdio_param_body$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-rscinfo2$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-attention'(User,attention,_,Error) :-true|
        User =attention .
'-attention'(User,[],_,Error) :-true|
        User =[] .
'-msgid'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'-server_control_status'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-server_control_status'(User,aborted,_,Error) :-true|
        User =aborted .
'-server_control_status'(User,normal(__1,__2),_,Error) :-true|
        User =normal(_1,__2),
        '+normal$$$stream$2'(_1,__1,Flag,['normal /2'|Error]) .
'-absolute_id$$$enu$3'(User,normal(__1),_,Error) :-true|
        User =normal(_1),
        '-normal$$$list$3'(_1,__1,Flag,Error) .
'-absolute_id$$$enu$3'(User,abnormal,_,Error) :-true|
        User =abnormal .
'-absolute_id$$$enu$3'(User,aborted,_,Error) :-true|
        User =aborted .
'-absolute_id$$$enu$3'(User,disconnected,_,Error) :-true|
        User =disconnected .
'-open$$$vector$1'(User,{__1,__2,__3},_,Error) :-true|
        User ={_1,_2,_3},
        '-open$atom$1'(_1,__1,Flag,['open /3'|Error]),
        '-open$ground$1'(_2,__2,Flag,['open /3'|Error]),
        '+open$ground$1'(_3,__3,Flag,['open /3'|Error]) .
'-open$atom$1'(User,OS,_,Error) :-atom(OS)|
        OS =User .
'-open$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'+open$ground$1'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+open$ground$1$wait'(User2,OS,Flag,Error) .
'+open$ground$1$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+open$ground$1$wait'(User2,OS,fail,Error) :-true|
        true .
'-make_branch$$$stream$1'(User,[OS|OS2],_,Error) :-true|
        '-std_subcontrol'(User1,OS,Flag,['make_branch /4'|Error]),
        '-make_branch$$$stream$1$wait'(User,OS2,User1,Flag,Error) .
'-make_branch$$$stream$1'(User,[],_,Error) :-true|
        User =[] .
'-make_branch$$$stream$1$wait'(User,OS2,User1,_,Error) :-wait(User1)|
        User =[User1|User2],
        '-make_branch$$$stream$1'(User2,OS2,_,Error) .
'+switch$$$stream$1'([User|U2],OS,_,Error) :-true|
        '+server_control'(User,OS1,Flag,['switch /2'|Error]),
        '+switch$$$stream$1$wait'(U2,OS,OS1,Flag,Error) .
'+switch$$$stream$1'([],OS,_,Error) :-true|
        [] =OS .
otherwise .
'+switch$$$stream$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+switch$$$stream$1$wait'(U2,OS,OS1,_,Error) :-wait(OS1)|
        OS =[OS1|OS2],
        '+switch$$$stream$1'(U2,OS2,_,Error) .
'+switch$$$stream$1$wait'(U2,OS,OS1,fail,Error) :-true|
        true .
'+io$$$stream$1'([User|U2],OS,_,Error) :-true|
        '+server_control'(User,OS1,Flag,Error),
        '+io$$$stream$1$wait'(U2,OS,OS1,Flag,Error) .
'+io$$$stream$1'([],OS,_,Error) :-true|
        [] =OS .
otherwise .
'+io$$$stream$1'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+io$$$stream$1$wait'(U2,OS,OS1,_,Error) :-wait(OS1)|
        OS =[OS1|OS2],
        '+io$$$stream$1'(U2,OS2,_,Error) .
'+io$$$stream$1$wait'(U2,OS,OS1,fail,Error) :-true|
        true .
'-consume'(User,unknown,_,Error) :-true|
        User =unknown .
'-consume'(User,{__1,__2},_,Error) :-true|
        User ={_1,_2},
        '-hrsc'(_1,__1,Flag,Error),
        '-lrsc'(_2,__2,Flag,Error) .
'-brief_info'(User,{__1,__2,__3,__4},_,Error) :-true|
        User ={_1,_2,_3,_4},
        '-rscid'(_1,__1,Flag,Error),
        '-rscname'(_2,__2,Flag,Error),
        '-brief_info$ground$1'(_3,__3,Flag,Error),
        '-rscinfo'(_4,__4,Flag,Error) .
'-brief_info$ground$1'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'+normal$$$stream$2'([User|U2],OS,_,Error) :-true|
        '+server_control'(User,OS1,Flag,['normal /2'|Error]),
        '+normal$$$stream$2$wait'(U2,OS,OS1,Flag,Error) .
'+normal$$$stream$2'([],OS,_,Error) :-true|
        [] =OS .
otherwise .
'+normal$$$stream$2'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+normal$$$stream$2$wait'(U2,OS,OS1,_,Error) :-wait(OS1)|
        OS =[OS1|OS2],
        '+normal$$$stream$2'(U2,OS2,_,Error) .
'+normal$$$stream$2$wait'(U2,OS,OS1,fail,Error) :-true|
        true .
'-normal$$$list$3'(User,[OS|OS2],Flag,Error) :-true|
        '-normal$integer$6'(User1,OS,Flag,Error),
        '-normal$$$list$3$wait'(User,OS2,User1,Flag,Error) .
'-normal$$$list$3'(User,[],Flag,Error) :-true|
        User =[] .
'-normal$$$list$3$wait'(User,OS2,User1,Flag,Error) :-wait(User1)|
        User =[User1|User2],
        '-normal$$$list$3'(User2,OS2,Flag,Error) .
'-normal$integer$6'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'-std_subcontrol'(User,open(__1,__2,__3),_,Error) :-true|
        User =open(_1,_2,_3),
        '-open$$$vector$2'(_1,__1,Flag,['open /3'|Error]),
        '-open$$$enu$3'(_2,__2,Flag,['open /3'|Error]),
        '-open$$$enu$4'(_3,__3,Flag,['open /3'|Error]) .
'-std_subcontrol'(User,request(__1,__2,__3,__4),_,Error) :-true|
        User =request(__1,_2,__3,_4),
        '-request$integer$2'(_2,__2,Flag,['request /4'|Error]),
        '+request$ground$2'(_4,__4,Flag,['request /4'|Error]) .
'-std_subcontrol'(User,make_branch(__1,__2,__3,__4),_,Error) :-true|
        User =make_branch(_1,__2,_3,_4),
        '-make_branch$$$stream$2'(_1,__1,Flag,['make_branch /4'|Error]),
        '-make_branch$ground$3'(_3,__3,Flag,['make_branch /4'|Error]),
        '-make_branch$ground$4'(_4,__4,Flag,['make_branch /4'|Error]) .
'-request$integer$2'(User,OS,_,Error) :-integer(OS)|
        OS =User .
'+request$ground$2'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+request$ground$2$wait'(User2,OS,Flag,Error) .
'+request$ground$2$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+request$ground$2$wait'(User2,OS,fail,Error) :-true|
        true .
'-make_branch$ground$3'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-make_branch$ground$4'(User,OS,_,Error) :-true|
        '-ground'(OS2,OS),
        OS2 =User .
'-open$$$enu$3'(User,switch(__1,__2),_,Error) :-true|
        User =switch(_1,__2),
        '+switch$$$stream$2'(_1,__1,Flag,['switch /2'|Error]) .
'-open$$$enu$4'(User,io(__1,__2),_,Error) :-true|
        User =io(_1,__2),
        '+io$$$stream$2'(_1,__1,Flag,Error) .
'-task_status'(User,{__1,__2},_,Error) :-true|
        User ={_1,_2},
        '-task_status$atom$1'(_1,__1,Flag,Error),
        '-stops'(_2,__2,Flag,Error) .
'-task_status$atom$1'(User,OS,_,Error) :-atom(OS)|
        OS =User .
'-limit'(User,{__1,__2},_,Error) :-true|
        User ={_1,_2},
        '-hrsc'(_1,__1,Flag,Error),
        '-lrsc'(_2,__2,Flag,Error) .
'-rscname'(User,OS,_,Error) :-atom(OS)|
        OS =User .
'-open$$$vector$2'(User,{__1,__2},_,Error) :-true|
        User ={_1,_2},
        '-open$atom$2'(_1,__1,Flag,['open /3'|Error]),
        '+open$ground$2'(_2,__2,Flag,['open /3'|Error]) .
'-open$atom$2'(User,OS,_,Error) :-atom(OS)|
        OS =User .
'+open$ground$2'(User,OS,_,Error) :-true|
        '+ground'(User,User2),
        '+open$ground$2$wait'(User2,OS,Flag,Error) .
'+open$ground$2$wait'(User2,OS,_,Error) :-wait(User2)|
        User2 =OS .
'+open$ground$2$wait'(User2,OS,fail,Error) :-true|
        true .
'-make_branch$$$stream$2'(User,[OS|OS2],_,Error) :-true|
        '-std_subcontrol'(User1,OS,Flag,['make_branch /4'|Error]),
        '-make_branch$$$stream$2$wait'(User,OS2,User1,Flag,Error) .
'-make_branch$$$stream$2'(User,[],_,Error) :-true|
        User =[] .
'-make_branch$$$stream$2$wait'(User,OS2,User1,_,Error) :-wait(User1)|
        User =[User1|User2],
        '-make_branch$$$stream$2'(User2,OS2,_,Error) .
'+switch$$$stream$2'([User|U2],OS,_,Error) :-true|
        '+server_control'(User,OS1,Flag,['switch /2'|Error]),
        '+switch$$$stream$2$wait'(U2,OS,OS1,Flag,Error) .
'+switch$$$stream$2'([],OS,_,Error) :-true|
        [] =OS .
otherwise .
'+switch$$$stream$2'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+switch$$$stream$2$wait'(U2,OS,OS1,_,Error) :-wait(OS1)|
        OS =[OS1|OS2],
        '+switch$$$stream$2'(U2,OS2,_,Error) .
'+switch$$$stream$2$wait'(U2,OS,OS1,fail,Error) :-true|
        true .
'+io$$$stream$2'([User|U2],OS,_,Error) :-true|
        '+server_control'(User,OS1,Flag,Error),
        '+io$$$stream$2$wait'(U2,OS,OS1,Flag,Error) .
'+io$$$stream$2'([],OS,_,Error) :-true|
        [] =OS .
otherwise .
'+io$$$stream$2'(User,OS,Flag,Error) :-true|
        Flag = fail,
        raise_error(Error,User) .
'+io$$$stream$2$wait'(U2,OS,OS1,_,Error) :-wait(OS1)|
        OS =[OS1|OS2],
        '+io$$$stream$2'(U2,OS2,_,Error) .
'+io$$$stream$2$wait'(U2,OS,OS1,fail,Error) :-true|
        true .
'-stops'(User,[OS|OS2],Flag,Error) :-true|
        '-stopreason'(User1,OS,Flag,Error),
        '-stops$wait'(User,OS2,User1,Flag,Error) .
'-stops'(User,[],Flag,Error) :-true|
        User =[] .
'-stops$wait'(User,OS2,User1,Flag,Error) :-wait(User1)|
        User =[User1|User2],
        '-stops'(User2,OS2,Flag,Error) .
'-stopreason'(User,stop(__1),_,Error) :-true|
        User =stop(_1),
        '-stop$atom$1'(_1,__1,Flag,Error) .
'-stop$atom$1'(User,OS,_,Error) :-atom(OS)|
        OS =User .
%%%%% system defined protocols %%%%%%%%%%
'+ground'(X, Y) :- list(X) | '$$groundl'(X, Y).
'+ground'(X, Y) :- vector(X,Size),Size \= 0 | 
        '$$groundv'(X, 0, Size, X2),
        '$$groundv2'(X2, Y).
otherwise.
'+ground'(X, Y) :- wait(X) | Y = X.
'-ground'(X, Y) :- list(Y) | '$$groundl'(Y, X).
'-ground'(X, Y) :- vector(Y,Size), Size \= 0 | 
        '$$groundv'(Y, 0, Size, Y2),
        '$$groundv2'(Y2, X).
otherwise.
'-ground'(X, Y) :- wait(Y) | Y = X.
'$$groundl'([X1|X2], Y) :- true | '+ground'(X1,X11),
        '$$groundl2'(X11, X2, Y).
'$$groundl'([], Y) :- true | Y = [].
'$$groundl2'(X11, X2, Y) :- wait(X11) |
        '$$groundl31'(X2, [X11|Tail], Tail, Y).
'$$groundl31'([X1|X2], Top, Tail, Y) :- true |
        '+ground'(X1,X11),
        '$$groundl32'(X11, X2, Top, Tail, Y).
'$$groundl31'([], Top, Tail, Y) :- true |
        Tail = [],
        Top = Y.
'$$groundl32'(X11, X2, Top, Tail, Y) :- wait(X11), X2 \= [] |
        Tail = [X11|Tail2],
        '$$groundl31'(X2, Top, Tail2, Y).
'$$groundl32'(X11, [], Top, Tail, Y) :- wait(X11) |
        Tail = [X11],
        Y = Top.
'$$groundv2'(X2, Y) :- wait(X2) | X2 = Y.
'$$groundv'(X, Pos, Size, X2) :- Pos \= Size |
        vector_element(X, Pos, Elm, NX),
        '+ground'(Elm,Elm2),
        Npos := Pos + 1,
        '$$groundv3'(Elm2, NX, Npos, Size, X2).
'$$groundv3'(Elm, X, Pos, Size, X2) :- wait(Elm), Pos \= Size |
        vector_element(X, Pos, Nelm, NX),
        '+ground'(Nelm, Nelm2),
        Npos := Pos + 1,
        '$$groundv3'(Nelm2, NX, Npos, Size, X2).
'$$groundv3'(Elm, X, Size, Size, X2) :- wait(Elm) |
        X = X2. 
%%%%% to raise error %%%%%%%%%%
raise_error(Info,Msg):- true |
        atom_table:cache_table(Atom),
        formatInfo(Info,[],Fstring,Atom),
        shoen:raise(pimos_tag#error,'$PIMOS$'(illegal_message_to_PIMOS,Fstring),Msg).
formatInfo([Infoatom | Info], StringList,Fstring,Atom):- 
        atom(Infoatom) |
        Atom = [get_atom_name(Infoatom,normal(InfoString)) | Atail],
        NSlist = [InfoString | StringList],
        formatInfo(Info, NSlist, Fstring, Atail).
formatInfo([], Slist, Fstring, Atom):- true |
        Atom = [],
        new_string(New,1,16),
        set_string_element(New,0,key#lf,NL),
        format(1,Slist,StringList,NL),
        builtin#append_string([""|StringList], Fstring).
format(1,[Info|Tail],StringList,NL):- true |
        StringList = ["Device : ",Info |Stail2],
        format(2,Tail,Stail2,NL).
format(2,[Info|Tail],StringList,NL):- true |
        StringList = [NL,"Message : ",Info | Stail2],
        format(3,Tail,Stail2,NL).
format(3,[Info|Tail],StringList,NL):- true |
        StringList = [NL,Info | Stail2],
        format(3,Tail,Stail2,NL).
format(_,[],StringList,_):- true |
        StringList = [].
