%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1992 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:- module kl1_asm_inst_code_table.
:- public t/4.
:- with_macro pimos.

t(set_atom,             Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"00", Type = atom.
%%%%%   set_atom_1 ~ set_atom_15 => 16#"01" ~ 16#"0f"
t(set_constant,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"10", Type = c8_c40.
t(set_integer,          Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"11", Type = c8_c16.
t(set_nil,              Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"12", Type = c8.      
t(set_variable,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"13", Type = c8_r.
t(set_value,            Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"14", Type = c8_r.
t(set_marked_variable,  Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"15", Type = c8_r.
t(set_marked_value,     Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"16", Type = c8_r.
%%%%%   t(set_vector,           Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"17", Type = c8_c16.
t(set_list,             Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"18", Type = c8.
%%%%%   t(set_reused_structure, Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"19", Type = c8_r.
t(save,                 Tag, Op, Type) :- Tag = 16#"23", Op=16#"19", Type=r_c16.
%%%%%   16#"19"
t(restore,              Tag, Op, Type) :- Tag = 16#"23", Op=16#"1a", Type=r_c16.
%%%%%   16#"1a"
%%%%%   16#"1b"
%% added for clause information 900525 D.Sekita
t(clause_info,          Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"1b", Type = c24.
%% added for clause information
t(mark_element,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"1c", Type = r_r.
t(collect_value,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"1d", Type = r.
t(collect_list,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"1e", Type = r.     
t(collect_vector,       Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"1f", Type = r_c16.
t(write_constant,       Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"20", Type = c40.
t(write_integer,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"21", Type = c24.
t(write_nil,            Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"22", Type = no.    
t(write_atom,           Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"23", Type = atom_no_length.
t(write_variable,       Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"24", Type = r.
t(write_value,          Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"25", Type = r.
t(write_marked_variable,Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"26", Type = r.
t(write_marked_value,   Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"27", Type = r.

%%% Indexing

t(switch_on_non_integer,Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"28", Type = r_c16_i.     
t(switch_on_non_atom,   Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"29", Type = r_c16_i.     
t(switch_on_non_list,   Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"2a", Type = r_c16_i.     
t(switch_on_non_vector, Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"2b", Type = r_r_c16_i.
t(switch_on_constant,   Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"2c", Type = r_c16_c16_16s_sw.
t(hash_on_constant,     Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"2d", Type = r_c16_c16_16s_ha.

%%%

t(put_list,             Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"2e", Type = r.
t(put_reused_structure, Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"2f", Type = r_r_c8.
t(put_constant,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"30", Type = r_c40.
t(put_integer,          Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"31", Type = r_c16.
t(put_nil,              Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"32", Type = r.
t(put_variable,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"33", Type = r_r.
t(put_value,            Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"34", Type = r_r.
t(put_marked_variable,  Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"35", Type = r_r.
t(put_marked_value,     Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"36", Type = r_r.
t(put_structured_constant,Tag,Op,Type) :-  Tag = 16#"23", Op = 16#"37", Type = r_c16_scnst.
%t(put_vector_0,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"38", Type = r_vector.
%t(put_vector_1,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"39", Type = r_vector.
%t(put_vector_2,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"3a", Type = r_vector. 
%t(put_vector_3,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"3b", Type = r_vector.
%t(put_vector_4,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"3c", Type = r_vector.
%t(put_vector_5,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"3d", Type = r_vector.
%t(put_vector_6,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"3e", Type = r_vector.
t(put_vector,           Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"3f", Type = r_vector.
t(put_atom,             Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"40", Type = atom.
%%%%%   put_atom_1 ~ put_atom_31 => 16#"41" ~ 16#"5f"

%%%% control 

t(proceed,              Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"60", Type = no.
t(execute,              Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"61", Type = c8_c16_exe.
t(execute_external,     Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"62", Type = c8_c16_ext.
t(enqueue_goal,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"63", Type = c8_c16_exe.
t(enqueue_goal_with_priority,Tag,Op,Type):-Tag = 16#"23", Op = 16#"64", Type = r_c16_c8_exe.
%% modify 890606 D.Sekita
%%t(enqueue_goal_to_processor,Tag,Op,Type):- Tag = 16#"23", Op = 16#"65", Type = r_c16_c8_ext.
t(enqueue_goal_to_processor,Tag,Op,Type):- Tag = 16#"23", Op = 16#"65", Type = r_c16_c8_exe.
t(enqueue_goal_external,Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"66", Type = c8_c16_ext.
%%%%%   16#"67"
t(jump,                 Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"67", Type = c16_exe.
t(try_me_else,          Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"68", Type = c16_exe.
t(suspend,              Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"69", Type = c8_c16_exe.
t(otherwise,            Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"6a", Type = c8_c16_exe.     
t(read_eagerly,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"6b", Type = no.
%%%%%   16#"6c"
%%%%%   16#"6d"
%%%%%   16#"6e"
t(extended_floating_point_equal, Tag, Op, Type) :- Tag=16#"23", Op=16#"6e", Type=f_r_r(0).
t(extended_floating_point_not_equal, Tag, Op, Type) :- Tag=16#"23", Op=16#"6e", Type=f_r_r(1).
t(extended_floating_point_less_than, Tag, Op, Type) :- Tag=16#"23", Op=16#"6e", Type=f_r_r(2).
t(extended_floating_point_not_less_than, Tag, Op, Type) :- Tag=16#"23", Op=16#"6e", Type=f_r_r(3).
t(extended_floating_point_to_integer, Tag, Op, Type) :- Tag=16#"23", Op=16#"6e", Type=f_r_r(4).
t(integer_to_extended_floating_point, Tag, Op, Type) :- Tag=16#"23", Op=16#"6e", Type=f_r_r(5).
t(extended_floating_point_to_floating_point, Tag, Op, Type) :- Tag=16#"23", Op=16#"6e", Type=f_r_r(6).
t(floating_point_to_extended_floating_point, Tag, Op, Type) :- Tag=16#"23", Op=16#"6e", Type=f_r_r(7).
t(extended_floating_point, Tag, Op, Type) :- Tag=16#"23", Op=16#"6e", Type=f_r_r(8).
%%%%%   16#"6f"
t(extended_floating_point_add, Tag, Op, Type) :- Tag=16#"23", Op=16#"6f", Type=f_r_r_r(0).
t(extended_floating_point_subtract, Tag, Op, Type) :- Tag=16#"23", Op=16#"6f", Type=f_r_r_r(1).
t(extended_floating_point_multiply, Tag, Op, Type) :- Tag=16#"23", Op=16#"6f", Type=f_r_r_r(2).
t(extended_floating_point_divide, Tag, Op, Type) :- Tag=16#"23", Op=16#"6f", Type=f_r_r_r(3).

%%% Debug Aid

t(nop,                  Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"70", Type = no.
t(halt,                 Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"71", Type = r.
%%t(log_event,            Tag, Op, Type) :-  Tag = 16#"23", Op=16#"72", Type=r.
%%t(guard_fail,           Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"73", Type = no.
%% added 900917 D.sekita
t(fail,           Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"73", Type = no.
%%%%%   t(body_fail,            Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"74", Type = no.     
%% for shoen profileing 900606
t(set_gevc_increment_bits, Tag, Op, Type) :- Tag = 16#"23", Op=16#"74", Type=r_r.
t(reset_gevc_increment_bits, Tag, Op, Type) :- Tag=16#"23", Op=16#"75", Type=r_r.

t(export_entry,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"76", Type = f_r_r_r(0).
t(import_entry,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"76", Type = f_r_r_r(1).
t(structure_entry,      Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"76", Type = f_r_r_r(2).
t(free_list_top_address,Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"76", Type = f_r_r(3).
t(tag_and_value,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"76", Type = f_r_r_r(4).
t(word,                 Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"76", Type = f_r_r_r(5).
t(set_word,             Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"76", Type = f_r_r_r(6).
t(register_tag_and_value,Tag,Op, Type) :-  Tag = 16#"23", Op = 16#"76", Type = f_r_r_r(7).
t(collect_garbage,      Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"77", Type = no.     
t(system_timer,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"78", Type = r_r.
t(execute_first_predicate,Tag,Op,Type) :-  Tag = 16#"23", Op = 16#"79", Type = no.
t(increment_resource_by_one,Tag,Op,Type):- Tag = 16#"23", Op = 16#"7a", Type = no.
t(start,                Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"7b", Type = no.
t(get_console,          Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"7c", Type = r. 
t(put_console,          Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"7d", Type = r.
t(read_console,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"7e", Type = r.     
t(display_console,      Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"7f", Type = r.

%%% passive unification

t(wait_atom,            Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"80", Type = atom.
%%%%%   wait_atom_1 ~ wait_atom_31 => 16#"81" ~ 16#"9f"
t(wait_constant,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"a0", Type = r_c40.
t(wait_integer,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"a1", Type = r_c16.
t(wait_nil,             Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"a2", Type = r.
%%%%%   16#"a3"
t(wait_value,           Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"a4", Type = r_r.
t(wait_different_value, Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"a5", Type = r_r.
t(wait_list,            Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"a6", Type = r.
%%%%%   16#"a7"
%% added
t(read_variable_without_deref, Tag, Op, Type) :- Tag = 16#"23", Op = 16#"a7", Type = r.
t(wait_vector_0,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"a8", Type = r_m.    
%t(wait_vector_1,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"a9", Type = r_m.
%t(wait_vector_2,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"aa", Type = r_m.    
%t(wait_vector_3,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"ab", Type = r_m.
%t(wait_vector_4,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"ac", Type = r_m.    
%t(wait_vector_5,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"ad", Type = r_m.
%t(wait_vector_6,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"ae", Type = r_m.    
t(wait_vector,          Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"af", Type = r_vector.
t(read_constant,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"b0", Type = c40.
t(read_integer,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"b1", Type = c24.
t(read_nil,             Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"b2", Type = no.    
t(read_atom,            Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"b3", Type = atom_no_length.
t(read_variable,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"b4", Type = r.    
%%t(read_value,           Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"b5", Type = r.
% bignum
t(bignum_less_than, Tag, Op, Type) :- Tag = 16#"23", Op=16#"b6", Type=r_r.
t(bignum_not_less_than, Tag, Op, Type) :- Tag = 16#"23", Op=16#"b7", Type=r_r.

t(get_constant,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"b8", Type = r_c40.
t(get_integer,          Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"b9", Type = r_c16.
t(get_nil,              Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"ba", Type = r.
%%%%%   16#"bb"
t(get_value,            Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"bc", Type = r_r.
t(get_bound_value,      Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"bd", Type = r_r.
%%%%%   16#"be"
%%%%%   16#"bf"
t(get_atom,             Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"c0", Type = atom.
%%%%%   get_atom_1 ~ set_atom_31 => 16#"c1" ~ 16#"df"

%%%% builtin predicates (Passive Part)

t(wait,                 Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"e0", Type = r.
t(atom,                 Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"e1", Type = r.
t(integer,              Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"e2", Type = r.
t(list,                 Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"e3", Type = r.
t(vector,               Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"e4", Type = r_r.
t(string,               Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"e5", Type = r_r_r.
t(floating_point,       Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"e6", Type = r.
%%%%%   16#"e7"
t(shift_left,           Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"e8", Type = r_r_r.
t(shift_right,          Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"e9", Type = r_r_r.
t(and,                  Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"ea", Type = r_r_r.
t(or,                   Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"eb", Type = r_r_r.
t(exclusive_or,         Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"ec", Type = r_r_r.
t(complement,           Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"ed", Type = r_r.
t(vector_element,       Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"ee", Type = r_r_r.
t(string_element,       Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"ef", Type = r_r_r.
t(less_than,            Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"f0", Type = r_r.
t(not_less_than,        Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"f1", Type = r_r.
t(equal,                Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"f2", Type = r_r.
t(not_equal,            Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"f3", Type = r_r.
t(add,                  Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"f4", Type = r_r_r.
t(subtract,             Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"f5", Type = r_r_r.
t(multiply,             Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"f6", Type = r_r_r.
t(divide,               Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"f7", Type = r_r_r.
t(modulo,               Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"f8", Type = r_r_r.
t(diff,                 Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"f9", Type = r_r.
t(code,                 Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"fa", Type = r4.
t(module,               Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"fb", Type = r_r.
t(floating_point_equal, Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"fc", Type = f_r_r(0).
t(floating_point_not_equal,Tag,Op,Type):-  Tag = 16#"23", Op = 16#"fc", Type = f_r_r(1).
t(floating_point_less_than,Tag,Op,Type):-  Tag = 16#"23", Op = 16#"fc", Type = f_r_r(2).
t(floating_point_not_less_than,Tag,Op,Type):-Tag=16#"23", Op = 16#"fc", Type = f_r_r(3).
t(floating_point_to_integer,Tag,Op,Type):- Tag = 16#"23", Op = 16#"fc", Type = f_r_r(4).
t(integer_to_floating_point,Tag,Op,Type):- Tag = 16#"23", Op = 16#"fc", Type = f_r_r(5).
t(floating_point_add,   Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"fd", Type = f_r_r_r(0).
t(floating_point_subtract,Tag,Op,Type) :-  Tag = 16#"23", Op = 16#"fd", Type = f_r_r_r(1).
t(floating_point_multiply,Tag,Op,Type) :-  Tag = 16#"23", Op = 16#"fd", Type = f_r_r_r(2).
t(floating_point_divide,Tag, Op, Type) :-  Tag = 16#"23", Op = 16#"fd", Type = f_r_r_r(3).
%%%%%   16#"fe"
%% 901210 D.Sekita
t(string_less_than,Tag,Op,Type) :- Tag = 16#"23", Op=16#"fe", Type=r_r.
%%%%%   16#"ff"
t(string_not_less_than,Tag,Op,Type) :- Tag=16#"23", Op=16#"ff", Type=r_r.

t(scsi_where, Tag, Op, Type)  :- Tag=16#"22", Op=16#"a0", Type=r.
t(scsi_bus_reset, Tag, Op, Type) :- Tag=16#"22", Op=16#"a1", Type=r.

%%%% builtin predicates (Active Part)
t(string_operation,     Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"b0", Type = r4.
t(search_characters,    Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"b1", Type = r7.

t(log_event, Tag, Op, Type) :- Tag=16#"22", Op=16#"A2", Type = r.

% bignum
t(add_extended, Tag, Op, Type) :- Tag = 16#"22", Op = 16#"b2", Type=r4.
t(subtract_extended, Tag, Op, Type) :- Tag = 16#"22", Op=16#"b3", Type=r4.
t(multiply_extended, Tag, Op, Type) :- Tag = 16#"22", Op=16#"b4", Type=r4.
t(divide_extended, Tag, Op, Type) :- Tag = 16#"22", Op=16#"b5", Type=r5.
t(add_bignum, Tag, Op, Type) :- Tag = 16#"22", Op=16#"b6", Type=r_r_r.
t(subtract_bignum, Tag, Op, Type) :- Tag = 16#"22", Op=16#"b7", Type=r4.
t(multiply_bignum_word, Tag, Op, Type) :- Tag = 16#"22", Op=16#"b8", Type=r_r_r.
% b9
t(supply_atom_number, Tag, Op, Type) :- Tag=16#"22", Op=16#"b9", Type=r_r_r.
% ba
% bb
% bc
t(binary_to_extended_floating_point, Tag, Op, Type) :- Tag=16#"22", Op=16#"bc", Type = r4.
% bd
t(extended_floating_point_to_binary, Tag, Op, Type) :- Tag=16#"22", Op=16#"bd", Type = r4.
% be
t(b_extended_floating_point_to_integer, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(0).
t(b_integer_to_extended_floating_point, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(1).
t(b_extended_floating_point_to_floating_point, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(2).
t(b_floating_point_to_extended_floating_point, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(3).
t(extended_floating_point_sinh, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"22").
t(extended_floating_point_sqrt, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"24").
t(extended_floating_point_lognp1, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"26").
t(extended_floating_point_etoxm1, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"28").
t(extended_floating_point_tanh, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"29").
t(extended_floating_point_atan, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"2a").
t(extended_floating_point_asin, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"2c").
t(extended_floating_point_atanh, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"2d").
t(extended_floating_point_sin, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"2e").
t(extended_floating_point_tan, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"2f").
t(extended_floating_point_etox, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"30").
t(extended_floating_point_twotox, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"31").
t(extended_floating_point_tentox, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"32").
t(extended_floating_point_logn, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"34").
t(extended_floating_point_log10, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"35").
t(extended_floating_point_log2, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"36").
t(extended_floating_point_abs, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"38").
t(extended_floating_point_cosh, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"39").
t(extended_floating_point_neg, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"3a").
t(extended_floating_point_acos, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"3c").
t(extended_floating_point_cos, Tag, Op, Type) :- Tag=16#"22", Op=16#"be", Type=f_r_r(16#"3d").
% bf
t(b_extended_floating_point_add, Tag, Op, Type) :- Tag=16#"22", Op=16#"bf", Type=f_r_r_r(0).
t(b_extended_floating_point_subtract, Tag, Op, Type) :- Tag=16#"22", Op=16#"bf", Type=f_r_r_r(1).
t(b_extended_floating_point_multiply, Tag, Op, Type) :- Tag=16#"22", Op=16#"bf", Type=f_r_r_r(2).
t(b_extended_floating_point_divide, Tag, Op, Type) :- Tag=16#"22", Op=16#"bf", Type=f_r_r_r(3).

t(b_add,                Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"c0", Type = r_r_r.
t(b_subtract,           Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"c1", Type = r_r_r.
t(b_multiply,           Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"c2", Type = r_r_r.
t(b_divide,             Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"c3", Type = r_r_r.
t(b_modulo,             Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"c4", Type = r_r_r.
t(b_shift_left,         Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"c5", Type = r_r_r.
t(b_shift_right,        Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"c6", Type = r_r_r.
t(b_and,                Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"c7", Type = r_r_r.
t(b_or,                 Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"c8", Type = r_r_r.
t(b_exclusive_or,       Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"c9", Type = r_r_r.
t(b_vector,             Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"ca", Type = r_r_r.
t(b_string,             Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"cb", Type = r4.
t(b_vector_element,     Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"cc", Type = r4.
t(b_string_element,     Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"cd", Type = r4.
t(b_floating_point_to_integer,Tag,Op,Type):-Tag= 16#"22", Op = 16#"ce", Type = f_r_r(0).
t(b_integer_to_floating_point,Tag,Op,Type):-Tag= 16#"22", Op = 16#"ce", Type = f_r_r(1).
t(b_floating_point_add, Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"cf", Type = f_r_r_r(0).
t(b_floating_point_subtract,Tag,Op,Type):- Tag = 16#"22", Op = 16#"cf", Type = f_r_r_r(1).
t(b_floating_point_multiply,Tag,Op,Type):- Tag = 16#"22", Op = 16#"cf", Type = f_r_r_r(2).
t(b_floating_point_divide,Tag,Op,Type) :-  Tag = 16#"22", Op = 16#"cf", Type = f_r_r_r(3).
t(set_vector_element,   Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"d0", Type = r5.
t(set_string_element,   Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"d1", Type = r4.
t(new_atom,             Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"d2", Type = r.
t(new_vector,           Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"d3", Type = r_r.
t(new_string,           Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"d4", Type = r_r_r.
t(new_instruction,      Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"d5", Type = r_r_r.
t(new_module,           Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"d6", Type = r_r.
% 901210 D.Sekita
%%%%%   16#"d7"
t(copy_string_elements, Tag, Op, Type) :- Tag=16#"22", Op=16#"d7", Type=r7.
%%%%%   16#"d8"
t(move_string_elements, Tag, Op, Type) :- Tag=16#"22", Op=16#"d8", Type=r5.
%%%%%   16#"d9"
t(search_character, Tag, Op, Type) :- Tag=16#"22", Op=16#"d9", Type=r6.
%%%%%   16#"da"
t(change_element_size, Tag, Op, Type) :- Tag=16#"22", Op=16#"da", Type=r_r_r.
%%%%%   16#"db"
% scsi
t(scsi_command,         Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"db", Type = r7.
t(scsi_transfer,        Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"dc", Type = r6.
t(scsi_abort,           Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"dd", Type = r_r_r.
t(scsi_reset,           Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"de", Type = r4.
t(scsi_init,            Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"df", Type = r_r_r.
% scsi end
t(create_shoen,         Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"e0", Type = r7.
t(start_shoen,          Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"e1", Type = r_r.
t(stop_shoen,           Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"e2", Type = r_r.
t(abort_shoen,          Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"e3", Type = r_r.
t(remove_shoen,         Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"e4", Type = r.
t(add_shoen_resource,   Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"e5", Type = r4.
t(shoen_statistics,     Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"e6", Type = r_r.
t(allow_shoen_resource_report,Tag,Op,Type):-Tag= 16#"22", Op = 16#"e7", Type = r_r.
t(consume_resource,     Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"e8", Type = r.
%%%%%   16#"e9"
t(current_priority,     Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"ea", Type = r_r_r.
t(current_processor,    Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"eb", Type = r_r_r.
t(calculate_priority_from_current,Tag,Op,Type):-Tag=16#"22",Op=16#"ec", Type = r_r.
t(calculate_priority_from_minimum,Tag,Op,Type):-Tag=16#"22",Op=16#"ed", Type = r_r.
%% added 900917 D.Sekita
t(current_node,Tag,Op,Type) :- Tag=16#"22", Op=16#"ee", Type=r_r.
t(unbound,              Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"ef", Type = r_r.
t(merge,                Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"f0", Type = r_r.
t(apply,                Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"f1", Type = r_r.
t(raise,                Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"f2", Type = r_r_r.
t(predicate_to_code,    Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"f3", Type = r4.
t(code_to_predicate,    Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"f4", Type = r5.
t(module_offset_to_code,Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"f5", Type = r_r_r.
t(hash,                 Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"f6", Type = r_r_r.
t(module_element,       Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"f7", Type = r_r_r.
t(apply_tracing,        Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"f8", Type = r_r_r.
t(apply_spying,         Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"f9", Type = r4.
%%%%%   16#"fa"
t(create_profiling_shoen,         Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"fa", Type = r7.
%%%%%   16#"fb"
t(shoen_profile,        Tag, Op, Type) :- Tag = 16#"22", Op = 16#"fb", Type = r_r.
%%%%%   16#"fc"
%%t(start_processor_profile, Tag, Op, Type) :- Tag = 16#"22", Op=16#"fc", Type = r_r.
%%%%%   16#"fd"
%%t(get_processor_profile, Tag, Op, Type) :- Tag = 16#"22", Op=16#"fd", Type=r_r.
t(set_heap_alert, Tag, Op, Type) :- Tag = 16#"22", Op=16#"fd", Type=r_r.
%%%%%   16#"fe"
%%t(stop_processor_profile, Tag, Op, Type) :- Tag = 16#"22", Op=16#"fe", Type=r.
t(get_heap_size, Tag, Op, Type) :- Tag = 16#"22", Op=16#"fe", Type=r_r.
t(set_timer, Tag, Op, Type) :- Tag = 16#"22", Op=16#"ff", Type=r_r.
t(processor_profile, Tag, Op, Type) :- Tag=16#"22", Op=16#"fc", Type=r_r.
t(modname_to_module,    Tag, Op, Type) :-  Tag = 16#"22", Op = 16#"ff", Type = r_r.

%%%%% Code for assembler

t(label,                Tag, Op, Type) :-  Tag = 0,       Op = 0,       Type = label.
otherwise.
t(Inst,                 Tag, Op, Type) :- true |
    shoen:raise(pimos_tag#job, fatal(string#"Undefined Instruction ~t", [Inst]), _).
