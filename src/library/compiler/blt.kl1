%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1992 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:- module kl1cmp_blttbl.
:- public builtin/9, active_builtin/6, expression/7.
%% added 91/10/2
:- public specialPredicate/3.
:- with_macro pimos.

%%%%%%%%%%%%%%%%%%%%%%%%%  Builtin predicates (passive)  %%%%%%%%%%%%%%%%%%%%%%

% These are all defined builtin predicates for the passive part
% with the exception of 'true', ':=' and '='.

%:- mode builtin(+, -, -, -, -, -, -).
builtin(add(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=add(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Pre=[integer(Y1), integer(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer},{X3,integer}],
   Type=builtin, Class=user.
builtin(subtract(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=subtract(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Pre=[integer(Y1), integer(Y2)], Post=[],
   Attr=[{X1,integer}, {X2,integer}, {X3,integer}],
   Type=builtin, Class=user.
builtin(multiply(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=multiply(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Pre=[integer(Y1), integer(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer}, {X3,integer}],
   Type=builtin, Class=user.
builtin(divide(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=divide(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Pre=[integer(Y1), integer(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer},{X3,integer}],
   Type=builtin, Class=user.
builtin(modulo(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=modulo(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Pre=[integer(Y1), integer(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer}, {X3,integer}],
   Type=builtin, Class=user.
builtin(shift_left(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=shift_left(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Pre=[integer(Y1), integer(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer},{X3,integer}],
   Type=builtin, Class=user.
builtin(shift_right(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=shift_right(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Pre=[integer(Y1), integer(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer},{X3,integer}],
   Type=builtin, Class=user.
builtin(and(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=and(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Pre=[integer(Y1), integer(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer},{X3,integer}],
   Type=builtin, Class=user.
builtin(or(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=or(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Pre=[integer(Y1), integer(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer},{X3,integer}],
   Type=builtin, Class=user.
builtin(exclusive_or(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=exclusive_or(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Pre=[integer(Y1), integer(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer},{X3,integer}],
   Type=builtin, Class=user.
builtin(complement(X1,X2),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=complement(Y1,Y2), In=[X1,Y1], Out=[X2,Y2], Pre=[integer(Y1)],
   Attr=[{X1,integer},{X2,integer}],
   Post=[], Type=builtin, Class=user.
builtin(floating_point_add(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
    Y=floating_point_add(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
    Pre=[wait(Y1),wait(Y2)], Post=[],
    Attr=[{X1,floating_point},{X2,floating_point},{X3,floating_point}],
    Type=builtin, Class=user.
builtin(floating_point_subtract(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
    Y=floating_point_subtract(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
    Pre=[wait(Y1),wait(Y2)], Post=[],
    Attr=[{X1,floating_point},{X2,floating_point},{X3,floating_point}],
    Type=builtin, Class=user.
builtin(floating_point_multiply(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
    Y=floating_point_multiply(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
    Pre=[wait(Y1),wait(Y2)], Post=[],
    Attr=[{X1,floating_point},{X2,floating_point},{X3,floating_point}],
    Type=builtin, Class=user.
builtin(floating_point_divide(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
    Y=floating_point_divide(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
    Pre=[wait(Y1),wait(Y2)], Post=[],
    Attr=[{X1,floating_point},{X2,floating_point},{X3,floating_point}],
    Type=builtin, Class=user.
%% added 891212
builtin(floating_point_to_integer(X1,X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
    Y=floating_point_to_integer(Y1,Y2), In=[X1,Y1], Out=[X2,Y2],
    Pre=[wait(Y1)], Post=[],
    Attr=[{X1,floating_point},{X2,integer}],
    Type=builtin, Class=user.
builtin(integer_to_floating_point(X1,X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
    Y=integer_to_floating_point(Y1,Y2), In=[X1,Y1], Out=[X2,Y2],
    Pre=[wait(Y1)], Post=[],
    Attr=[{X1,integer},{X2,floating_point}],
    Type=builtin, Class=user.
%% added 891212
builtin(equal(X1,X2),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=equal(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
   Pre=[wait(Y1), wait(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer}],
   Type=builtin, Class=user.
builtin(not_equal(X1,X2),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=not_equal(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
   Pre=[wait(Y1), wait(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer}],
   Type=builtin, Class=user.
builtin(less_than(X1,X2),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=less_than(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
   Pre=[wait(Y1), wait(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer}],
   Type=builtin, Class=user.
builtin(not_less_than(X1,X2),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=not_less_than(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
   Pre=[wait(Y1), wait(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer}],
   Type=builtin, Class=user.
%% new
builtin(collect_garbage, Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
     Y=collect_garbage, In=[], Out=[], Pre=[], Post=[], Attr=[], Type=builtin, Class=user.
%% new
% Arithmetic relation operators.
builtin((X1=:=X2),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=equal(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
%% Pre=[wait(Y1),wait(Y2)],
   Pre=[],
   Post=[],
   Attr=[{X1,integer},{X2,integer}],
   Type=relop, Class=user.
builtin((X1=\=X2),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=not_equal(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
%%Pre=[wait(Y1),wait(Y2)],
   Pre=[],
   Post=[],
   Attr=[{X1,integer},{X2,integer}],
   Type=relop, Class=user.
builtin((X1<X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=less_than(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
%% Pre=[wait(Y1),wait(Y2)],
   Pre=[],
   Post=[],
   Attr=[{X1,integer},{X2,integer}],
   Type=relop,Class=user.
builtin((X1>=X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=not_less_than(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[], 
%%Pre=[wait(Y1),wait(Y2)],
   Pre=[],
   Post=[],
   Attr=[{X1,integer},{X2,integer}],
   Type=relop,Class=user.
builtin((X1>X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=less_than(Y2,Y1), In=[X1,Y1,X2,Y2], Out=[],
%%Pre=[wait(Y1),wait(Y2)],
   Pre=[],
   Post=[],
   Attr=[{X1,integer},{X2,integer}],
   Type=relop,Class=user.
builtin((X1=<X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=not_less_than(Y2,Y1), In=[X1,Y1,X2,Y2], Out=[],
%%Pre=[wait(Y1),wait(Y2)],
   Pre=[],
   Post=[],
   Attr=[{X1,integer},{X2,integer}],
   Type=relop,Class=user.
% Arithmetic relation operators.
builtin((X1$=:=X2),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=floating_point_equal(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
%% Pre=[wait(Y1),wait(Y2)],
   Pre=[],
   Post=[],
   Attr=[{X1,floating_point},{X2,floating_point}],
   Type=floating_relop, Class=user.
builtin((X1$=\=X2),Y,In,Out,Pre,Post,Attr,Type, Class) :- true |
   Y=floating_point_not_equal(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
%%Pre=[wait(Y1),wait(Y2)],
   Pre=[],
   Post=[],
   Attr=[{X1, floating_point},{X2, floating_point}],
   Type=floating_relop, Class=user.
builtin((X1$<X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=floating_point_less_than(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
%% Pre=[wait(Y1),wait(Y2)],
   Pre=[],
   Post=[],
   Attr=[{X1,floating_point},{X2,floating_point}],
   Type=floating_relop,Class=user.
builtin((X1$>X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=floating_point_less_than(Y2,Y1), In=[X1,Y1,X2,Y2], Out=[],
%% Pre=[wait(Y1),wait(Y2)],
   Pre=[],
   Post=[],
   Attr=[{X1,floating_point},{X2,floating_point}],
   Type=floating_relop,Class=user.
builtin((X1$>=X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=floating_point_not_less_than(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[], 
%%Pre=[wait(Y1),wait(Y2)],
   Pre=[],
   Post=[],
   Attr=[{X1,floating_point},{X2,floating_point}],
   Type=floating_relop,Class=user.
builtin((X1$=<X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=floating_point_not_less_than(Y2,Y1), In=[X1,Y1,X2,Y2], Out=[],
%%Pre=[wait(Y1),wait(Y2)],
   Pre=[],
   Post=[],
   Attr=[{X1,floating_point},{X2,floating_point}],
   Type=floating_relop,Class=user.
builtin(floating_point_equal(X1,X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=floating_point_equal(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
   Pre=[wait(Y1),wait(Y2)],
   Post=[],
   Attr=[{X1,floating_point},{X2,floating_point}],
   Type=builtin,Class=user.
builtin(floating_point_not_equal(X1,X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=floating_point_not_equal(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
   Pre=[wait(Y1),wait(Y2)],
   Post=[],
   Attr=[{X1,floating_point},{X2,floating_point}],
   Type=builtin,Class=user.
builtin(floating_point_less_than(X1,X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=floating_point_less_than(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
   Pre=[wait(Y1),wait(Y2)],
   Post=[],
   Attr=[{X1,floating_point},{X2,floating_point}],
   Type=builtin,Class=user.
builtin(floating_point_not_less_than(X1,X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=floating_point_not_less_than(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
   Pre=[wait(Y1),wait(Y2)],
   Post=[],
   Attr=[{X1,floating_point},{X2,floating_point}],
   Type=builtin,Class=user.
builtin(diff(X1,X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=diff(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
   Pre=[wait(Y1), wait(Y2)], Post=[], Attr=[],Type=builtin,Class=user.
% Synonym for previous:
builtin((X1\=X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=diff(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
   Pre=[wait(Y1), wait(Y2)], Post=[], Attr=[], Type=builtin,Class=user.

builtin(wait(X1),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=wait(Y1), In=[X1,Y1], Out=[], Pre=[], Post=[], Attr=[{X1,(wait)}],
%%   Type=int_or_wait.
   Type=builtin,Class=user.

% Type check.
builtin(integer(X1),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=integer(Y1), In=[X1,Y1], Out=[], Pre=[wait(Y1)], Post=[],
   Attr=[{X1,integer}],
%%   Type=int_or_wait. %%!?
   Type=builtin,Class=user.
builtin(atom(X1),Y,In,Out,Pre,Post,Attr, Type,Class) :- true |
   Y=atom(Y1), In=[X1,Y1], Out=[], Pre=[wait(Y1)], Post=[],
   Attr=[{X1,atom}],
   Type=builtin,Class=user.
builtin(list(X1),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=list(Y1), In=[X1,Y1], Out=[], Pre=[wait(Y1)], Post=[],
   Attr=[{X1,list}], Type=builtin,Class=user.
builtin(vector(X1,X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=vector(Y1,Y2), In=[X1,Y1], Out=[X2,Y2],
   Pre=[wait(Y1)], Post=[], Attr=[{X1,vector}, {X2,integer}],Type=builtin,Class=user.
builtin(string(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=string(Y1,Y2,Y3), In=[X1,Y1], Out=[X2,Y2,X3,Y3],
   Pre=[wait(Y1)], Post=[], %Attr=[{X1,string}, {X2,integer}, {X3,integer}],
   Attr=[{X2,integer}, {X3,integer}],
   Type=builtin,Class=user.
builtin(floating_point(X1),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=floating_point(Y1), In=[X1,Y1], Out=[],
   Pre=[wait(Y1)], Post=[], Attr=[{X1,floating_point}],
   Type=builtin,Class=user.
builtin(vector_element(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=vector_element(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Pre=[wait(Y1), wait(Y2)], Post=[],
   Attr=[{X1,vector},{X2,integer}],Type=builtin,Class=user.
builtin(string_element(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=string_element(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Pre=[wait(Y1), wait(Y2)], Post=[],
%   Attr=[{X1,string},{X2,integer},{X3,integer}],
   Attr=[{X2,integer},{X3,integer}],
   Type=builtin,Class=user.
builtin(system_timer(X1,X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
    Y=system_timer(Y1,Y2), In=[], Out=[X1,Y1,X2,Y2],
    Pre=[], Post=[], Attr=[], Type=builtin, Class=user.
builtin(get_console(X1X),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=get_console(Y1X), In=[], Out=[X1X,Y1X], Pre=[], Post=[],
   Attr=[],
   Type=builtin,Class=user.
builtin(put_console(X1),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=put_console(Y1), In=[X1,Y1], Out=[], Pre=[wait(Y1)], Post=[],
   Attr=[{X1,(wait)}],
   Type=builtin,Class=user.
builtin(read_console(X1),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=read_console(Y1), In=[], Out=[X1,Y1], Pre=[], Post=[],
   Attr=[],
   Type=builtin,Class=user.
builtin(display_console(X1),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=display_console(Y1), In=[X1,Y1], Out=[], Pre=[wait(Y1)], Post=[],
   Attr=[{X1,(wait)}],
   Type=builtin,Class=user.
builtin(nop,Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=nop, In=[], Out=[], Pre=[], Post=[],
   Attr=[], Type=builtin,Class=firm.
builtin(halt(X1),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=halt(Y1), In=[X1,Y1], Out=[], Pre=[], Post=[], Attr=[],Type=builtin,Class=user.
builtin(fail,Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=fail, In=[], Out=[], Pre=[], Post=[], Attr=[],Type=builtin,Class=firm.
%%builtin(request_gc(X1),Y,In,Out,Pre,Post,Attr,Type) :- true |
%%   Y=request_gc(Y1), In=[X1,Y1], Out=[], Pre=[], Post=[],Attr=[],Type=builtin.
%%builtin(statistics(X1,X2,X3,X4,X5,X6),Y,In,Out,Pre,Post,Attr,Type) :- true |
%%   Y=statistics(Y1,Y2,Y3,Y4,Y5,Y6), In=[],
%%   Out=[X1,Y1,X2,Y2,X3,Y3,X4,Y4,X5,Y5,X6,Y6], Pre=[], Post=[],
%%   Attr=[],Type=builtin.
%%builtin(get_cpu_time(X1),Y,In,Out,Pre,Post,Attr,Type) :- true |
%%   Y=get_cpu_time(Y1), In=[], Out=[X1,Y1], Pre=[], Post=[],
%%   Attr=[],Type=builtin.
%%builtin(get_current_time(X1,X2,X3,X4,X5,X6),Y,In,Out,Pre,Post,Attr,Type) :-
%%true |
%%   Y=get_current_time(Y1,Y2,Y3,Y4,Y5,Y6), In=[],
%%   Out=[X1,Y1,X2,Y2,X3,Y3,X4,Y4,X5,Y5,X6,Y6], Pre=[], Post=[],
%%   Attr=[],Type=builtin.
%%builtin(set_trace_switch(X1),Y,In,Out,Pre,Post,Attr,Type) :- true |
%%   Y=set_trace_switch(Y1), In=[X1,Y1], Out=[], Pre=[], Post=[],
%%   Attr=[],Type=builtin.
%%builtin(set_backtrace_switch(X1),Y,In,Out,Pre,Post,Attr,Type) :- true |
%%   Y=set_backtrace_switch(Y1), In=[X1,Y1],Out=[], Pre=[],Post=[],
%%   Attr=[], Type=builtin.
%%builtin(device_dup_check(X1),Y,In,Out,Pre,Post,Attr,Type) :- true |
%%   Y=device_dup_check(Y1), In=[X1,Y1], Out=[], Pre=[], Post=[],
%%   Attr=[], Type=builtin.
%%builtin(debug_monitor_stream(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type) :- true |
%%   Y=debug_monitor_stream(Y1,Y2,Y3), In=[X1,Y1,X2,Y2,X3,Y3],
%%   Out=[], Pre=[], Post=[], Attr=[], Type=builtin.
builtin(tag_and_value(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=tag_and_value(Y1,Y2,Y3), In=[X1,Y1],
   Out=[X2,Y2,X3,Y3], Pre=[], Post=[],
   Attr=[{X2,integer},{X3,integer}], Type=builtin, Class=firm.
builtin(register_tag_and_value(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=register_tag_and_value(Y1,Y2,Y3), In=[X1,Y1],
   Out=[X2,Y2,X3,Y3], Pre=[], Post=[],
   Attr=[{X2,integer},{X3,integer}], Type=builtin, Class=firm.
builtin(export_entry(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=export_entry(Y1,Y2,Y3), In=[X1,Y1],
   Out=[X2,Y2,X3,Y3], Pre=[], Post=[],
   Attr=[{X2,integer},{X3,integer}], Type=builtin, Class=firm.
builtin(import_entry(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=import_entry(Y1,Y2,Y3), In=[X1,Y1],
   Out=[X2,Y2,X3,Y3], Pre=[], Post=[],
   Attr=[{X2,integer},{X3,integer}], Type=builtin,Class=firm.
builtin(struture_entry(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=struture_entry(Y1,Y2,Y3), In=[X1,Y1],
   Out=[X2,Y2,X3,Y3], Pre=[], Post=[],
   Attr=[{X2,integer},{X3,integer}], Type=builtin,Class=firm.
builtin(free_list_top_address(X1,X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=free_list_top_address(Y1,Y2), In=[X1,Y1],
   Out=[X2,Y2], Pre=[wait(Y1)], Post=[],
   Attr=[{X1,integer},{X2,integer}], Type=builtin,Class=firm.
builtin(word(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=word(Y1,Y2,Y3), In=[X1,Y1],
   Out=[X2,Y2,X3,Y3], Pre=[wait(Y1)], Post=[],
   Attr=[{X1,integer},{X2,integer},{X3,integer}], Type=builtin, Class=firm.
builtin(set_word(X1,X2,X3),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=set_word(Y1,Y2,Y3), In=[X1,Y1,X2,Y2,X3,Y3],
   Out=[], Pre=[wait(Y1),wait(Y2),wait(Y3)], Post=[],
   Attr=[{X1,integer},{X2,integer},{X3,integer}], Type=builtin, Class=firm.
builtin(module(X1,X2),Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=module(Y1,Y2), In=[X1,Y1],
   Out=[X2,Y2], Pre=[wait(Y1)], Post=[],
   Attr=[{X2,integer}], Type=builtin,Class=user.
%% 890530 New
builtin(code(X1,X2,X3,X4), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
   Y=code(Y1,Y2,Y3,Y4), In=[X1,Y1], Out=[X2,Y2,X3,Y3,X4,Y4],
   Pre=[wait(Y1)], Post=[], Attr=[{X2,integer},{X4,integer}], Type=builtin, Class=user.
%%% 900606 Added for Shoen Profiling
builtin(set_gevc_increment_bits(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
   Y=set_gevc_increment_bits(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
   Pre=[wait(Y1), wait(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer}], Type=builtin, Class=pimos.
builtin(reset_gevc_increment_bits(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
   Y=reset_gevc_increment_bits(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
   Pre=[wait(Y1), wait(Y2)], Post=[],
   Attr=[{X1,integer},{X2,integer}], Type=builtin, Class=pimos.
%% 900916 D.Sekita added for Processor profileing
%%builtin(log_event(X1), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
%%    Y=log_event(Y1), In=[X1,Y1], Out=[], Pre=[], Post=[], Attr=[], Type=builtin, Class=pimos.
%% 901210 D.Sekita
builtin(string_less_than(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=string_less_than(Y1, Y2), In=[X1,Y1,X2,Y2], Out=[], Pre=[wait(Y1), wait(Y2)], Post=[],
    Attr=[{X1,(wait)}, {X2,(wait)}], Type=builtin, Class=user.
builtin(string_not_less_than(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=string_not_less_than(Y1, Y2), In=[X1,Y1,X2,Y2], Out=[], Pre=[wait(Y1), wait(Y2)], Post=[],
    Attr=[{X1,(wait)}, {X2,(wait)}], Type=builtin, Class=user.
% bignum
builtin(bignum_less_than(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=bignum_less_than(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[], Pre=[wait(Y1), wait(Y2)], Post=[],
    Attr=[{X1,(wait)}, {X2,(wait)}], Type=builtin, Class=user.
builtin(bignum_not_less_than(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=bignum_not_less_than(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[], Pre=[wait(Y1), wait(Y2)], Post=[],
    Attr=[{X1,(wait)}, {X2,(wait)}], Type=builtin, Class=user.
%% extended floating
builtin(extended_floating_point(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=extended_floating_point(Y1,Y2), In=[X1,Y1], Out=[X2,Y2], Pre=[wait(Y1)], Post=[],
    Attr=[{X1,(wait)}], Type=builtin, Class=user.
builtin(extended_floating_point_equal(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=extended_floating_point_equal(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
    Pre=[wait(Y1), wait(Y2)], Post=[],
    Attr=[{X1,(wait)}, {X2,(wait)}], Type=builtin, Class=user.
builtin(extended_floating_point_not_equal(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=extended_floating_point_not_equal(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
    Pre=[wait(Y1), wait(Y2)], Post=[],
    Attr=[{X1,(wait)}, {X2,(wait)}], Type=builtin, Class=user.
builtin(extended_floating_point_less_than(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=extended_floating_point_less_than(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
    Pre=[wait(Y1), wait(Y2)], Post=[],
    Attr=[{X1,(wait)}, {X2,(wait)}], Type=builtin, Class=user.
builtin(extended_floating_point_not_less_than(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=extended_floating_point_not_less_than(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[],
    Pre=[wait(Y1), wait(Y2)], Post=[],
    Attr=[{X1,(wait)}, {X2,(wait)}], Type=builtin, Class=user.
builtin(extended_floating_point_to_integer(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=extended_floating_point_to_integer(Y1,Y2), In=[X1,Y1], Out=[X2,Y2], Pre=[wait(Y1)], Post=[],
    Attr=[{X1,(wait)}], Type=builtin, Class=user.
builtin(integer_to_extended_floating_point(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=integer_to_extended_floating_point(Y1,Y2), In=[X1,Y1], Out=[X2,Y2], Pre=[wait(Y1)], Post=[],
    Attr=[{X1,integer}], Type=builtin, Class=user.
builtin(extended_floating_point_to_floating_point(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=extended_floating_point_to_floating_point(Y1,Y2), In=[X1,Y1], Out=[X2,Y2], Pre=[wait(Y1)], Post=[],
    Attr=[{X1,wait}], Type=builtin, Class=user.
builtin(floating_point_to_extended_floating_point(X1,X2), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=floating_point_to_extended_floating_point(Y1,Y2), In=[X1,Y1], Out=[X2,Y2], Pre=[wait(Y1)], Post=[],
    Attr=[{X1,floating_point}], Type=builtin, Class=user.
builtin(extended_floating_point_add(X1,X2,X3), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=extended_floating_point_add(Y1,Y2,Y3),
    In=[X1,Y1,X2,Y2], Out=[X3,Y3], Pre=[wait(Y1),wait(Y2)], Post=[],
    Attr=[{X1,(wait)},{X2,(wait)}], Type=builtin, Class=user.
builtin(extended_floating_point_subtract(X1,X2,X3), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=extended_floating_point_subtract(Y1,Y2,Y3),
    In=[X1,Y1,X2,Y2], Out=[X3,Y3], Pre=[wait(Y1),wait(Y2)], Post=[],
    Attr=[{X1,(wait)},{X2,(wait)}], Type=builtin, Class=user.
builtin(extended_floating_point_multiply(X1,X2,X3), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=extended_floating_point_multiply(Y1,Y2,Y3),
    In=[X1,Y1,X2,Y2], Out=[X3,Y3], Pre=[wait(Y1),wait(Y1)], Post=[],
    Attr=[{X1,(wait)},{X2,(wait)}], Type=builtin, Class=user.
builtin(extended_floating_point_divide(X1,X2,X3), Y, In, Out, Pre, Post, Attr, Type, Class) :- true |
    Y=extended_floating_point_divide(Y1,Y2,Y3),
    In=[X1,Y1,X2,Y2], Out=[X3,Y3], Pre=[wait(Y1),wait(Y2)], Post=[],
    Attr=[{X1,(wait)},{X2,(wait)}], Type=builtin, Class=user.
otherwise.
builtin(X,Y,In,Out,Pre,Post,Attr,Type,Class) :- true |
   Y=X, In=[], Out=[], Pre=[], Post=[], Attr=[],Type=none, Class=none.


%%%%%%%%%%%%%%%%%%%%%%%%%  Builtin predicates (active)  %%%%%%%%%%%%%%%%%%%%%%%

% These are all the builtin predicates for the active part with the exception
% of 'true', '=' and ':='.

%:- mode active_builtin(+, -, -, -, -).
active_builtin(add(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=b_add(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3], Type=builtin, Class=user.
active_builtin(subtract(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=b_subtract(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3], Type=builtin, Class=user.
active_builtin(multiply(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=b_multiply(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3], Type=builtin, Class=user.
active_builtin(divide(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=b_divide(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3], Type=builtin, Class=user.
active_builtin(modulo(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=b_modulo(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3], Type=builtin, Class=user.
active_builtin(shift_left(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=b_shift_left(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3], Type=builtin, Class=user.
active_builtin(shift_right(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=b_shift_right(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3], Type=builtin, Class=user.
active_builtin(and(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=b_and(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3], Type=builtin, Class=user.
active_builtin(or(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=b_or(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3], Type=builtin, Class=user.
active_builtin(exclusive_or(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=b_exclusive_or(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3], Type=builtin, Class=user.
active_builtin(complement(X1,X3),Y,In,Out,Type,Class) :- true |
%% D.Sekita 890907
%%   Y=b_complement(Y1,Y2), In=[X1,Y1], Out=[X2,Y2], Type=builtin, Class=user.
   Y=b_exclusive_or(Y1,Y2,Y3), In=[X1,Y1,integer(-1),Y2], Out=[X3,Y3], Type=builtin, Class=user.
active_builtin(hash(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=hash(Y1,Y2,Y3), In=[X1,Y1], Out=[X2,Y2,X3,Y3], Type=builtin,Class=user.

%% changed `unbound/4' => `unbound/2'y
active_builtin(unbound(X1,X2),Y,In,Out,Type,Class) :- true |
   Y=unbound(Y1,Y2), In=[X1,Y1], Out=[X2,Y2], Type=builtin, Class=user.
%%active_builtin(unbound(X1,X2,X3,X4),Y,In,Out,Type,Class) :- true |
%%   Y=unbound(Y1,Y2,Y3,Y4), In=[X1,Y1], Out=[X2,Y2,X3,Y3,X4,Y4], Type=builtin, Class=user.
active_builtin(merge(X1,X2),Y,In,Out,Type,Class) :- true |
   Y=merge(Y2,Y1), In=[X2,Y2], Out=[X1,Y1], Type=builtin, Class=user.
active_builtin(vector(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=b_vector(Y1,Y2,Y3), In=[X1,Y1], Out=[X2,Y2,X3,Y3], Type=builtin, Class=user.
active_builtin(new_vector(X1,X2),Y,In,Out,Type,Class) :- true |
   Y=new_vector(Y2,Y1), In=[X2,Y2], Out=[X1,Y1], Type=builtin, Class=user.
active_builtin(vector_element(X1,X2,X3,X4),Y,In,Out,Type,Class) :- true |
   Y=b_vector_element(Y1,Y2,Y3,Y4),
   In=[X1,Y1,X2,Y2], Out=[X3,Y3,X4,Y4], Type=builtin, Class=user.
active_builtin(set_vector_element(X1,X2,X3,X4,X5),Y,In,Out,Type,Class) :- true |
   Y=set_vector_element(Y1,Y2,Y4,Y3,Y5),
   In=[X1,Y1,X2,Y2,X4,Y4], Out=[X3,Y3,X5,Y5], Type=builtin,Class=user.
%% added 890530
active_builtin(new_atom(X1), Y, In, Out, Type,Class) :- true |
   Y=new_atom(Y1),
   In=[], Out=[X1,Y1], Type=builtin,Class=user.
%% end
active_builtin(string(X1,X2,X3,X4),Y,In,Out,Type,Class) :- true |
   Y=b_string(Y1,Y2,Y3,Y4),
   In=[X1,Y1], Out=[X2,Y2,X3,Y3,X4,Y4], Type=builtin,Class=user.
active_builtin(new_string(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=new_string(Y2,Y3,Y1),
   In=[X2,Y2,X3,Y3], Out=[X1,Y1], Type=builtin,Class=user.
active_builtin(string_element(X1,X2,X3,X4),Y,In,Out,Type,Class) :- true |
   Y=b_string_element(Y1,Y2,Y3,Y4),
   In=[X1,Y1,X2,Y2], Out=[X3,Y3,X4,Y4], Type=builtin,Class=user.
active_builtin(set_string_element(X1,X2,X3,X4),Y,In,Out,Type,Class) :- true |
   Y=set_string_element(Y1,Y2,Y3,Y4),
   In=[X1,Y1,X2,Y2,X3,Y3], Out=[X4,Y4], Type=builtin, Class=user.
active_builtin(apply(X1,X2),Y,In,Out,Type,Class) :- true |
   Y=apply(Y1,Y2), In=[X1,Y1,X2,Y2], Out=[], Type=builtin, Class=user.
%% new
%%active_builtin(apply_tracing(X1,X2,X3),Y,In,Out,Type,Class) :- true |
%%   Y=apply_tracing(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3], Type=builtin, Class=user.
%%debug 890912 D.Sekita
active_builtin(apply_tracing(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=apply_tracing(Y1,Y2,Y3), In=[X1,Y1,X2,Y2,X3,Y3], Out=[], Type=builtin, Class=user.
active_builtin(apply_spying(X1,X2,X3,X4),Y,In,Out,Type,Class) :- true |
   Y=apply_spying(Y1,Y2,Y3,Y4), In=[X1,Y1,X2,Y2,X3,Y3,X4,Y4], Out=[], Type=builtin,
   Class=user.
%% new
active_builtin(raise(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=raise(Y1,Y2,Y3), In=[X1,Y1,X2,Y2,X3,Y3], Out=[], Type=builtin, Class=user.
%new
active_builtin(predicate_to_code(X1,X2,X3,X4),Y,In,Out,Type,Class) :- true |
   Y=predicate_to_code(Y1,Y2,Y3,Y4),
   In=[X1,Y1,X2,Y2,X3,Y3], Out=[X4,Y4],
   Type=builtin, Class=user.
active_builtin(code_to_predicate(X1,X2,X3,X4,X5),Y,In,Out,Type,Class) :- true |
   Y=code_to_predicate(Y1,Y2,Y3,Y4,Y5),
   In=[X1,Y1], Out=[X2,Y2,X3,Y3,X4,Y4,X5,Y5],
   Type=builtin, Class=user.
active_builtin(module_offset_to_code(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=module_offset_to_code(Y1,Y2,Y3),
   In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Type=builtin, Class=user.
active_builtin(current_processor(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=current_processor(Y1,Y2,Y3), In=[], Out=[X1,Y1,X2,Y2,X3,Y3], Type=builtin,Class=user.
% new
active_builtin(current_priority(X1,X2,X3),Y,In,Out,Type,Class) :- true |
   Y=current_priority(Y1,Y2,Y3),
   In=[], Out=[X1,Y1,X2,Y2,X3,Y3],
   Type=builtin,Class=user.
% for priorities
active_builtin(calculate_priority_from_current(X1,X2),Y,In,Out,Type,Class) :- true |
   Y=calculate_priority_from_current(Y1,Y2),
   In=[X1,Y1], Out=[X2,Y2], Type=builtin, Class=user.
active_builtin(calculate_priority_from_minimum(X1,X2),Y,In,Out,Type,Class) :- true |
   Y=calculate_priority_from_minimum(Y1,Y2),
   In=[X1,Y1], Out=[X2,Y2], Type=builtin,Class=user.

active_builtin(create_shoen(X1,X2,X3,X4,X5,X6,X7),Y,In,Out,Type,Class):- true |
   Y=create_shoen(Y1,Y2,Y3,Y4,Y5,Y6,Y7),
   In=[X1,Y1,X2,Y2,X3,Y3,X4,Y4,X5,Y5], Out=[X6,Y6,X7,Y7], Type=builtin,Class=pimos.
% added 900326
active_builtin(create_profiling_shoen(X1,X2,X3,X4,X5,X6,X7),Y,In,Out,Type,Class):- true |
   Y=create_profiling_shoen(Y1,Y2,Y3,Y4,Y5,Y6,Y7),
   In=[X1,Y1,X2,Y2,X3,Y3,X4,Y4,X5,Y5], Out=[X6,Y6,X7,Y7], Type=builtin,Class=pimos.
active_builtin(shoen_profile(X1,X2),Y,In,Out,Type,Class) :- true |
   Y=shoen_profile(Y1,Y2),
   In=[X1,Y1],Out=[X2,Y2], Type=builtin, Class=pimos.
% added 900326
active_builtin(stop_shoen(X1,X2),Y,In,Out,Type,Class) :- true |
   Y=stop_shoen(Y1,Y2), In=[X1,Y1], Out=[X2,Y2], Type=builtin,Class=pimos.
active_builtin(start_shoen(X1,X2),Y,In,Out,Type,Class) :- true |
   Y=start_shoen(Y1,Y2), In=[X1,Y1], Out=[X2,Y2], Type=builtin, Class=pimos.
active_builtin(abort_shoen(X1,X2),Y,In,Out,Type,Class) :- true |
   Y=abort_shoen(Y1,Y2), In=[X1,Y1], Out=[X2,Y2], Type=builtin, Class=pimos.
active_builtin(remove_shoen(X1),Y,In,Out,Type,Class) :- true |
   Y=remove_shoen(Y1), In=[X1,Y1], Out=[], Type=builtin,Class=pimos.
active_builtin(shoen_statistics(X1,X2),Y,In,Out,Type,Class) :- true |
   Y=shoen_statistics(Y1,Y2), In=[X1,Y1], Out=[X2,Y2], Type=builtin,Class=pimos.
%new
%%active_builtin(add_shoen_resource(X1,X2,X3),Y,In,Out,Type,Class) :- true |
%%   Y=add_shoen_resource(Y1,Y2,Y3),
%%   In=[X1,Y1,X2,Y2], Out=[X3,Y3], Type=builtin,Class=pimos.
active_builtin(add_shoen_resource(X1,X2,X3,X4),Y,In,Out,Type,Class) :- true |
   Y=add_shoen_resource(Y1,Y2,Y3,Y4),
   In=[X1,Y1,X2,Y2,X3,Y3], Out=[X4,Y4], Type=builtin,Class=pimos.
active_builtin(allow_shoen_resource_report(X1,X2),
        Y,In,Out,Type,Class) :- true |
   Y=allow_shoen_resource_report(Y1,Y2),
   In=[X1,Y1], Out=[X2,Y2], Type=builtin, Class=pimos.

active_builtin(consume_resource(X1),Y,In,Out,Type,Class) :- true |
   Y=consume_resource(Y1), In=[X1,Y1], Out=[], Type=builtin,Class=user.

active_builtin(nop, Y, In, Out, Type,Class) :- true |
   Y=b_nop, In=[], Out=[], Type=builtin, Class=firm.
active_builtin(body_fail, Y, In, Out, Type, Class) :- true |
   Y=body_fail, In=[], Out=[], Type=builtin, Class=firm.
active_builtin(increment_resource_by_one, Y, In, Out, Type, Class) :- true |
   Y=increment_resource_by_one, In=[], Out=[], Type=builtin, Class=firm.
active_builtin(start, Y, In, Out, Type, Class) :- true |
   Y=start, In=[], Out=[], Type=builtin, Class=firm.
active_builtin(new_instruction(X1, X2, X3), Y, In, Out, Type, Class) :- true |
   Y=new_instruction(Y2, Y3, Y1), In=[X2,Y2,X3,Y3], Out=[X1,Y1],
   Type=builtin, Class=firm.
active_builtin(new_module(X1, X2), Y, In, Out, Type, Class) :- true |
   Y=new_module(Y2, Y1), In=[X2,Y2], Out=[X1,Y1],
   Type=builtin, Class=firm.
active_builtin(module_element(X1, X2, X3), Y, In, Out, Type, Class) :- true |
   Y=module_element(Y1, Y2, Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Type=builtin, Class=user.
%% added for floating operation
active_builtin(floating_point_to_integer(X1,X2), Y, In, Out, Type, Class) :- true |
   Y=b_floating_point_to_integer(Y1, Y2), In=[X1,Y1], Out=[X2,Y2],
   Type=builtin, Class=user.
active_builtin(integer_to_floating_point(X1,X2), Y, In, Out, Type, Class) :- true |
   Y=b_integer_to_floating_point(Y1, Y2), In=[X1,Y1], Out=[X2,Y2],
   Type=builtin, Class=user.
active_builtin(floating_point_add(X1,X2,X3), Y, In, Out, Type, Class) :- true |
   Y=b_floating_point_add(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Type=builtin, Class=user.
active_builtin(floating_point_subtract(X1,X2,X3), Y, In, Out, Type, Class) :- true |
   Y=b_floating_point_subtract(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Type=builtin, Class=user.
active_builtin(floating_point_multiply(X1,X2,X3), Y, In, Out, Type, Class) :- true |
   Y=b_floating_point_multiply(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Type=builtin, Class=user.
active_builtin(floating_point_divide(X1,X2,X3), Y, In, Out, Type, Class) :- true |
   Y=b_floating_point_divide(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
   Type=builtin, Class=user.
%% 900606 for Shoen profiler
%% 9000917 abolished
%%active_builtin(start_processor_profile(X1,X2), Y, In, Out, Type, Class) :- true |
%%   Y=start_processor_profile(Y1,Y2), In=[X1,Y1], Out=[X2,Y2],
%%   Type=builtin, Class=pimos.
%%active_builtin(get_processor_profile(X1,X2), Y, In, Out, Type, Class) :- true |
%%   Y=get_processor_profile(Y1,Y2), In=[X1,Y1], Out=[X2,Y2],
%%   Type=builtin, Class=pimos.
%%active_builtin(stop_processor_profile(X1), Y, In, Out, Type, Class) :- true |
%%   Y=stop_processor_profile(Y1), In=[], Out=[X1,Y1],
%%   Type=builtin, Class=pimos.
%% 900917 Added
active_builtin(processor_profile(X1,X2),Y,In,Out,Type,Class) :- true |
    Y=processor_profile(Y1,Y2), In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=pimos.
%% 900917 D.Sekita
active_builtin(current_node(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=current_node(Y1,Y2), In=[], Out=[X1,Y1,X2,Y2], Type=builtin, Class=user.
active_builtin(copy_string_elements(X1,X2,X3,X4,X5,X6,X7), Y, In, Out, Type, Class) :- true |
    Y=copy_string_elements(Y1,Y2,Y3,Y4,Y5,Y6,Y7),In=[X1,Y1,X2,Y2,X3,Y3,X4,Y4,X5,Y5],
    Out=[X6,Y6,X7,Y7], Type=builtin, Class=user.
active_builtin(move_string_elements(X1,X2,X3,X4,X5), Y, In, Out, Type, Class) :- true |
    Y=move_string_elements(Y1,Y2,Y3,Y4,Y5),In=[X1,Y1,X2,Y2,X3,Y3,X4,Y4],
    Out=[X5,Y5], Type=builtin, Class=user.
active_builtin(search_character(X1,X2,X3,X4,X5,X6), Y, In, Out, Type, Class) :- true |
    Y=search_character(Y1,Y2,Y3,Y4,Y5,Y6), In=[X1,Y1,X2,Y2,X3,Y3,X4,Y4], Out=[X5,Y5,X6,Y6],
    Type=builtin, Class=user.
active_builtin(change_element_size(X1,X2,X3), Y, In, Out, Type, Class) :- true |
    Y=change_element_size(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
    Type=builtin, Class=user.
active_builtin(set_heap_alert(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=set_heap_alert(Y1,Y2), In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=pimos.
active_builtin(get_heap_size(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=get_heap_size(Y1,Y2), In=[], Out=[X1,Y1,X2,Y2],
    Type=builtin, Class=pimos.
active_builtin(search_characters(X1,X2,X3,X4,X5,X6,X7), Y, In, Out, Type, Class) :- true |
    Y=search_characters(Y1,Y2,Y3,Y4,Y5,Y6,Y7), In=[X1,Y1,X2,Y2,X3,Y3,X4,Y4],
    Out=[X5,Y5,X6,Y6,X7,Y7], Type=builtin, Class=firm.
active_builtin(string_operation(X1,X2,X3,X4), Y, In, Out, Type, Class) :- true |
    Y=string_operation(Y1,Y2,Y3,Y4), In=[X1,Y1,X2,Y2], Out=[X3,Y3,X4,Y4],
    Type=builtin, Class=user.
%% for SCSI
active_builtin(scsi_command(X1,X2,X3,X4,X5,X6,X7), Y, In, Out, Type, Class) :- true |
    Y=scsi_command(Y1,Y2,Y3,Y4,Y5,Y6,Y7), In=[X1,Y1,X2,Y2], Out=[X3,Y3,X4,Y4,X5,Y5,X6,Y6,X7,Y7],
    Type=builtin, Class=pimos.
active_builtin(scsi_transfer(X1,X2,X3,X4,X5,X6), Y, In, Out, Type, Class) :- true |
    Y=scsi_transfer(Y1,Y2,Y3,Y4,Y5,Y6), In=[X1,Y1,X2,Y2], Out=[X3,Y3,X4,Y4,X5,Y5,X6,Y6],
    Type=builtin, Class=pimos.
active_builtin(scsi_abort(X1,X2,X3), Y, In, Out, Type, Class) :- true |
    Y=scsi_abort(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
    Type=builtin, Class=pimos.
active_builtin(scsi_reset(X1,X2,X3,X4), Y, In, Out, Type, Class) :- true |
    Y=scsi_reset(Y1,Y2,Y3,Y4), In=[X1,Y1,X2,Y2,X3,Y3], Out=[X4,Y4],
    Type=builtin, Class=pimos.
active_builtin(scsi_init(X1,X2,X3), Y, In, Out, Type, Class) :- true |
    Y=scsi_init(Y1,Y2,Y3), In=[], Out=[X1,Y1,X2,Y2,X3,Y3],
    Type=builtin, Class=pimos.
active_builtin(scsi_where(X1), Y, In, Out, Type, Class) :- true |
    Y=scsi_where(Y1), In=[], Out=[X1,Y1], Type=builtin, Class=pimos.
active_builtin(scsi_bus_reset(X1), Y, In, Out, Type, Class) :- true |
    Y=scsi_bus_reset(Y1), In=[X1,Y1], Out=[], Type=builtin, Class=pimos.

active_builtin(set_timer(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=set_timer(Y1,Y2), In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=pimos.
% bignum
active_builtin(add_extended(X1,X2,X3,X4), Y, In, Out, Type, Class) :- true |
    Y=add_extended(Y1,Y2,Y3,Y4), In=[X1,Y1,X2,Y2], Out=[X3,Y3,X4,Y4],
    Type=builtin, Class=user.
active_builtin(subtract_extended(X1,X2,X3,X4), Y, In, Out, Type, Class) :- true |
    Y=subtract_extended(Y1,Y2,Y3,Y4), In=[X1,Y1,X2,Y2], Out=[X3,Y3,X4,Y4],
    Type=builtin, Class=user.
active_builtin(multiply_extended(X1,X2,X3,X4), Y, In, Out, Type, Class) :- true |
    Y=multiply_extended(Y1,Y2,Y3,Y4), In=[X1,Y1,X2,Y2], Out=[X3,Y3,X4,Y4],
    Type=builtin, Class=user.
active_builtin(divide_extended(X1,X2,X3,X4,X5), Y, In, Out, Type, Class) :- true |
    Y=divide_extended(Y1,Y2,Y3,Y4,Y5), In=[X1,Y1,X2,Y2,X3,Y3], Out=[X4,Y4,X5,Y5],
    Type=builtin, Class=user.
active_builtin(add_bignum(X1,X2,X3), Y, In, Out, Type, Class) :- true |
    Y=add_bignum(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
    Type=builtin, Class=user.
active_builtin(subtract_bignum(X1,X2,X3,X4), Y, In, Out, Type, Class) :- true |
    Y=subtract_bignum(Y1,Y2,Y3,Y4), In=[X1,Y1,X2,Y2], Out=[X3,Y3,X4,Y4],
    Type=builtin, Class=user.
active_builtin(multiply_bignum_by_word(X1,X2,X3), Y, In, Out, Type, Class) :- true |
    Y=multiply_bignum_word(Y1,Y2,Y3), In=[X1,Y1,X2,Y2], Out=[X3,Y3],
    Type=builtin, Class=user.
active_builtin(log_event(X1), Y, In, Out, Type, Class) :- true |
    Y=log_event(Y1), In=[X1,Y1], Out=[],
    Type=builtin, Class=user.

%% following three predicates are dummy. see specialPredicate/3.
active_builtin(binary_string_operation(X1,X2,X3,X4,X5,X6,X7,X8), Y, In, Out, Type, Class) :- true |
    Y=binary_string_operation(Y1,Y2,Y3,Y4,Y5,Y6,Y7,Y8),
    In=[X1,Y1,X2,Y2,X3,Y3,X4,Y4,X5,Y5,X6,Y6],
    Out=[X7,Y7,X8,Y8],
    Type=dummy, Class=dummy.
active_builtin(shifting_string_operation(X1,X2,X3,X4,X5,X6), Y, In, Out, Type, Class) :- true |
    Y=shifting_string_operation(Y1,Y2,Y3,Y4,Y5,Y6),
    In=[X1,Y1,X2,Y2,X3,Y3,X4,Y4,X5,Y5],
    Out=[X6,Y6],
    Type=dummy, Class=user.
active_builtin(unary_string_operation(X1,X2,X3,X4,X5), Y, In, Out, Type, Class) :- true |
    Y=unary_string_operation(Y1,Y2,Y3,Y4,Y5),
    In=[X1,Y1,X2,Y2,X3,Y3,X4,Y4],
    Out=[X5,Y5],
    Type=dummy, Class=user.
active_builtin(supply_atom_number(X1,X2,X3), Y, In, Out, Type, Class) :- true |
    Y=supply_atom_number(Y1,Y2,Y3),
    In=[X1,Y1,X2,Y2], Out=[X3,Y3],
    Type=builtin, Class=user.
%% extended floating_point
active_builtin(extended_floating_point_to_integer(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=b_extended_floating_point_to_integer(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(integer_to_extended_floating_point(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=b_integer_to_extended_floating_point(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_to_floating_point(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=b_extended_floating_point_to_floating_point(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(floating_point_to_extended_floating_point(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=b_floating_point_to_extended_floating_point(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(binary_to_extended_floating_point(X1,X2,X3,X4), Y, In, Out, Type, Class) :- true |
    Y=binary_to_extended_floating_point(Y1,Y2,Y3,Y4),
    In=[X1,Y1,X2,Y2,X3,Y3], Out=[X4,Y4],
    Type=builtin, Class=pimos.
active_builtin(extended_floating_point_to_binary(X1,X2,X3,X4), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_to_binary(Y1,Y2,Y3,Y4),
    In=[X1,Y1], Out=[X2,Y2,X3,Y3,X4,Y4],
    Type=builtin, Class=pimos.
active_builtin(extended_floating_point_add(X1,X2,X3), Y, In, Out, Type, Class) :- true |
    Y=b_extended_floating_point_add(Y1,Y2,Y3),
    In=[X1,Y1,X2,Y2], Out=[X3,Y3],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_subtract(X1,X2,X3), Y, In, Out, Type, Class) :- true |
    Y=b_extended_floating_point_subtract(Y1,Y2,Y3),
    In=[X1,Y1,X2,Y2], Out=[X3,Y3],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_multiply(X1,X2,X3), Y, In, Out, Type, Class) :- true |
    Y=b_extended_floating_point_multiply(Y1,Y2,Y3),
    In=[X1,Y1,X2,Y2], Out=[X3,Y3],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_divide(X1,X2,X3), Y, In, Out, Type, Class) :- true |
    Y=b_extended_floating_point_divide(Y1,Y2,Y3),
    In=[X1,Y1,X2,Y2], Out=[X3,Y3],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_abs(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_abs(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_neg(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_neg(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_sqrt(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_sqrt(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_etox(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_etox(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_etoxm1(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_etoxm1(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_twotox(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_twotox(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_tentox(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_tentox(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_logn(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_logn(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_lognp1(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_lognp1(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_log2(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_log2(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_log10(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_log10(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_sin(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_sin(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_cos(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_cos(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_tan(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_tan(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_asin(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_asin(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_acos(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_acos(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_atan(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_atan(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_sinh(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_sinh(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_cosh(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_cosh(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_tanh(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_tanh(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
active_builtin(extended_floating_point_atanh(X1,X2), Y, In, Out, Type, Class) :- true |
    Y=extended_floating_point_atanh(Y1,Y2),
    In=[X1,Y1], Out=[X2,Y2],
    Type=builtin, Class=user.
otherwise.
active_builtin(_,Y,In,Out,Type,Class) :- true |
   Y=true, In=[], Out=[], Type=none, Class=none.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  Expressions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% These are the valid expressions in ':=' and arithmetic relations.
:- local_implicit io:oldnew.
%:- mode expression(+, -, -, -, -, ?).
expression(integer, vector({atom((+)), X1, X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(add), Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.
expression(integer, vector({atom((-)), X1, X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(subtract),Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.
expression(integer, vector({atom((*)),X1,X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(multiply),Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.
expression(integer, vector({atom((/)),X1,X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(divide),Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.
expression(integer, vector({atom((mod)),X1,X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(modulo),Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.
expression(integer, vector({atom((<<)),X1,X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(shift_left),Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.
expression(integer, vector({atom((>>)),X1,X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(shift_right),Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.
expression(integer, vector({atom((/\)),X1,X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(and),Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.
expression(integer, vector({atom((\/)),X1,X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(or),Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.
expression(integer, vector({atom((xor)),X1,X2}),Y,In,Out) --> true |			% 881227
 {{ Y=vector({atom(exclusive_or),Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.	% SSL:Nishizaki
expression(integer, vector({atom((-)),X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(subtract),Y1,Y2,Y3}), In=[integer(0),Y1,X2,Y2], Out=Y3 }}.
%%new complement
expression(integer, vector({atom((\)),X1}), Y, In, Out) --> true |
 {{ Y=vector({atom(complement),Y1,Y2}), In=[X1,Y1], Out=Y2}}.
expression(floating, vector({atom((+)),X1,X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(floating_point_add),Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.
expression(floating, vector({atom((-)),X1,X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(floating_point_subtract),Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.
expression(floating, vector({atom((-)),X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(floating_point_multiply),Y1,Y2,Y3}),
    In=[floating_point(-1.0),Y1,X2,Y2], Out=Y3 }}.
expression(floating, vector({atom((*)),X1,X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(floating_point_multiply),Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.
expression(floating, vector({atom((/)),X1,X2}),Y,In,Out) --> true |
 {{ Y=vector({atom(floating_point_divide),Y1,Y2,Y3}), In=[X1,Y1,X2,Y2], Out=Y3 }}.
expression(floating, vector({atom(float),X1}), Y, In, Out) --> true |
 {{ Y=vector({atom(integer_to_floating_point),Y1, Y2}), In=[X1,Y1], Out=Y2}}.
expression(integer, vector({atom(int),X1}), Y, In, Out) --> true |
 {{ Y=vector({atom(floating_point_to_integer),Y1,Y2}), In=[X1,Y1], Out=Y2}}.
otherwise.
expression(_, X,Y,In,Out) --> true |
 {{ Y=true, In=[], Out=integer(0) }},
  &io<<=[error(string#"Undefined expression: ~T",[X])].

%% special predicates
:- local_implicit var:stream.
specialPredicate(binary_string_operation(Op, Str1, Pos1, Len, Str2, Pos2, NewS1, NewS2), Pred) --> true |
  Pred=string_operation(Op, vector({Pos1, Str1, Len, Pos2, Str2}), NewS1, NewS2).
specialPredicate(shifting_string_operation(Op, Str1, Pos1, Len, Pos2, NewS1), Pred) --> true |
  &var <<= [new_variable(NewS2)],
  Pred=string_operation(Op, vector({Pos1, Str1, Len, Pos2}), NewS1, NewS2).
specialPredicate(unary_string_operation(Op, Str1, Pos1, Len, NewS1), Pred) --> true |
  &var <<= [new_variable(NewS2)],
  Pred=string_operation(Op, vector({Pos1, Str1, Len}), NewS1, NewS2).
specialPredicate(search_characters(String, Start, End, Mask, Table, Position, NewString, NewTable),
     Pred) --> true |
  Pred=search_characters(String, vector({Start, End}), Mask, Table, Position, NewString, NewTable).
otherwise.
specialPredicate(Pred0, Pred) --> true | Pred0=Pred.
