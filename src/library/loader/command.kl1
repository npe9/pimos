%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1994 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% icpsi183::>sys>user>hori>Pimos>v40>Loader>command.kl1.8, 30-Apr-92 17:17:02, Edit by hori

:- module kl1_compile_command.
:- with_macro pimos.
:- public command/7.

    %%%%%%%%%%%
    % COMMAND %
    %%%%%%%%%%%

command(string#"alias",Args,VP0,VP,MESG0,MESG,Done) :- true |
    alias(Args,VP0,VP,MESG0,MESG,Done).
command(string#"unalias",Args,VP0,VP,MESG0,MESG,Done) :- true |
    unalias(Args,VP0,VP,MESG0,MESG,Done).
command(string#"assemble_mode",Args,VP0,VP,MESG0,MESG,Done) :- true |
    assemble_mode(Args,VP0,VP,MESG0,MESG,Done).
command(string#"attach",Args,VP0,VP,MESG0,MESG,Done) :- true |
    attach(Args,VP0,VP,MESG0,MESG,Done).
command(string#"cd",Args,VP0,VP,MESG0,MESG,Done) :- true |
    cd(Args,VP0,VP,MESG0,MESG,Done).
command(string#"default_extension",Args,VP0,VP,MESG0,MESG,Done) :- true |
    default_extension(Args,VP0,VP,MESG0,MESG,Done).
command(string#"define",Args,VP0,VP,MESG0,MESG,Done) :- true |
    define(Args,VP0,VP,MESG0,MESG,Done).
command(string#"describe",Args,VP0,VP,MESG0,MESG,Done) :- true |
    describe(Args,VP0,VP,MESG0,MESG,Done).
command(string#"distribute",Args,VP0,VP,MESG0,MESG,Done) :- true |
    distribute(Args,VP0,VP,MESG0,MESG,Done).
command(string#"help",Args,VP0,VP,MESG0,MESG,Done) :- true |
    help(Args,VP0,VP,MESG0,MESG,Done).
command(string#"indexing",Args,VP0,VP,MESG0,MESG,Done) :- true |
    indexing(Args,VP0,VP,MESG0,MESG,Done).
command(string#"auto_link",Args,VP0,VP,MESG0,MESG,Done) :- true |
    auto_link(Args,VP0,VP,MESG0,MESG,Done).
command(string#"keep",Args,VP0,VP,MESG0,MESG,Done) :- true |
    keep(Args,VP0,VP,MESG0,MESG,Done).
command(string#"klb",Args,VP0,VP,MESG0,MESG,Done) :- true |
    klb(Args,VP0,VP,MESG0,MESG,Done).
command(string#"link_error",Args,VP0,VP,MESG0,MESG,Done) :- true |
    link_error(Args,VP0,VP,MESG0,MESG,Done).
command(string#"ls",Args,VP0,VP,MESG0,MESG,Done) :- true |
    ls(Args,default,VP0,VP,MESG0,MESG,Done).
command(LS,Args,VP0,VP,MESG0,MESG,Done) :-
    string_element(LS,0,#"l"),
    string_element(LS,1,#"s"),
    string_element(LS,2,Col), #"0" < Col, Col =< #"9",
    Column := Col - #"0" |
    ls(Args,Column,VP0,VP,MESG0,MESG,Done).
command(string#"link",Args,VP0,VP,MESG0,MESG,Done) :- true |
    link(Args,VP0,VP,MESG0,MESG,Done).
command(string#"load",Args,VP0,VP,MESG0,MESG,Done) :- true |
    load(Args,VP0,VP,MESG0,MESG,Done).
command(string#"make",Args,VP0,VP,MESG0,MESG,Done) :- true |
    make(Args,VP0,VP,MESG0,MESG,Done).
command(string#"message",Args,VP0,VP,MESG0,MESG,Done) :- true |
    message(Args,VP0,VP,MESG0,MESG,Done).
command(string#"original_package",Args,VP0,VP,MESG0,MESG,Done) :- true |
    original_package(Args,VP0,VP,MESG0,MESG,Done).
command(string#"path",Args,VP0,VP,MESG0,MESG,Done) :- true |
    path(Args,VP0,VP,MESG0,MESG,Done).
command(string#"parallel",Args,VP0,VP,MESG0,MESG,Done) :- true |
    parallel(Args,VP0,VP,MESG0,MESG,Done).
command(string#"parser",Args,VP0,VP,MESG0,MESG,Done) :- true |
    parser(Args,VP0,VP,MESG0,MESG,Done).
command(string#"preprocess",Args,VP0,VP,MESG0,MESG,Done) :- true |
    preprocess(Args,VP0,VP,MESG0,MESG,Done).
command(string#"profile",Args,VP0,VP,MESG0,MESG,Done) :- true |
    profile(Args,VP0,VP,MESG0,MESG,Done).
command(string#"undefine",Args,VP0,VP,MESG0,MESG,Done) :- true |
    undefine(Args,VP0,VP,MESG0,MESG,Done).
command(string#"unparser",Args,VP0,VP,MESG0,MESG,Done) :- true |
    unparser(Args,VP0,VP,MESG0,MESG,Done).
command(string#"pwd",Args,VP0,VP,MESG0,MESG,Done) :- true |
    pwd(Args,VP0,VP,MESG0,MESG,Done).
command(string#"package",Args,VP0,VP,MESG0,MESG,Done) :- true |
    package(Args,VP0,VP,MESG0,MESG,Done).
command(string#"Relink",Args,VP0,VP,MESG0,MESG,Done) :- true |
    relink(Args,just_relink,VP0,VP,MESG0,MESG,Done).
command(string#"relink",Args,VP0,VP,MESG0,MESG,Done) :- true |
    relink(Args,search_and_relink,VP0,VP,MESG0,MESG,Done).
command(string#"revert",Args,VP0,VP,MESG0,MESG,Done) :- true |
    revert(Args,VP0,VP,MESG0,MESG,Done).
command(string#"set",Args,VP0,VP,MESG0,MESG,Done) :- true |
    set(Args,VP0,VP,MESG0,MESG,Done).
command(string#"get",Args,VP0,VP,MESG0,MESG,Done) :- true |
    get(Args,VP0,VP,MESG0,MESG,Done).
command(string#"show",Args,VP0,VP,MESG0,MESG,Done) :- true |
    show(Args,VP0,VP,MESG0,MESG,Done).
command(string#"top_modules",Args,VP0,VP,MESG0,MESG,Done) :- true |
    top_modules(Args,VP0,VP,MESG0,MESG,Done).
command(string#"translate",Args,VP0,VP,MESG0,MESG,Done) :- true |
    translate(Args,VP0,VP,MESG0,MESG,Done).
command(string#"Unload",Args,VP0,VP,MESG0,MESG,Done) :- true |
    unload_last_compiled_modules(Args,VP0,VP,MESG0,MESG,Done).
command(string#"unload",Args,VP0,VP,MESG0,MESG,Done) :- true |
    unload(Args,VP0,VP,MESG0,MESG,Done).
command(string#"verify",Args,VP0,VP,MESG0,MESG,Done) :- true |
    verify(Args,VP0,VP,MESG0,MESG,Done).
command(string#"verifier",Args,VP0,VP,MESG0,MESG,Done) :- true |
    verifier(Args,VP0,VP,MESG0,MESG,Done).
command(string#"version",Args,VP0,VP,MESG0,MESG,Done) :- true |
    version(Args,VP0,VP,MESG0,MESG,Done).
command(string#"working_packages",Args,VP0,VP,MESG0,MESG,Done) :- true |
    working_packages(Args,VP0,VP,MESG0,MESG,Done).
otherwise.
command(_,_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    MESG0 = [info(string#"!ERROR! unknown command",[])|MESG],
    Done = done.

    %%%%%%%%%%%%%
    % (UN)ALIAS %
    %%%%%%%%%%%%%

alias([Command0,NewCommand0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(Command0,Command),
    coerce(NewCommand0,NewCommand),
    VP0 = [set_alias(Command,NewCommand,Done)|VP],
    MESG0 = [info(string#"~s => ~s",[Command,NewCommand])|MESG].
alias([Command0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(Command0,Command),
    VP0 = [get_alias(Command,NewCommand)|VP],
    MESG0 = [info(string#"~s => ~s",[Command,NewCommand])|MESG],
    Done = done.
alias([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_aliases(Aliases)|VP],
    show_aliases(Aliases,MESG0,MESG),
    Done = done.
otherwise.
alias(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(alias,alias,MESG0,MESG),
    Done = done.

show_aliases([{NewCommand,Command}|Rest],MESG0,MESG) :- true |
    MESG0 = [info(string#"  ~s => ~s",[NewCommand,Command])|MESG1],
    show_aliases(Rest,MESG1,MESG).
show_aliases([],MESG0,MESG) :- true |
    MESG0 = MESG.
    
unalias([Command0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(Command0,Command),
    VP0 = [get_alias(Command,NewCommand)|VP1],
    reset_alias(NewCommand,Command,VP1,VP,MESG0,MESG,Done).
otherwise.
unalias(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(unalias,alias,MESG0,MESG),
    Done = done.

reset_alias(Command,Command,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    MESG0 = [info(string#"!ERROR! undefined alias : ~s",[Command])|MESG],
    Done = done.
otherwise.
reset_alias(NewCommand,Command,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [remove_alias(Command,Done)|VP],
    MESG0 = [info(string#"alias reset : ~s",[Command])|MESG].

    %%%%%%%%%%%%%%%%%
    % ASSEMBLE_MODE %
    %%%%%%%%%%%%%%%%%

%%assemble_mode([Mode0],VP0,VP,MESG0,MESG,Done) :- true |
%%    coerce(Mode0,Mode),
%%    asm_mode(Mode,VP0,VP,MESG0,MESG,Done).
%%otherwise.
assemble_mode(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_v25(assemble_mode,MESG0,MESG),
    Done = done.

%%asm_mode(string#"firm",VP0,VP,MESG0,MESG,Done) :- true |
%%    VP0 = [set_assemble_mode(firm,Done)|VP],
%%    MESG0 = [info(string#"Assemble Mode : firm",[])|MESG].
%%asm_mode(string#"pimos",VP0,VP,MESG0,MESG,Done) :- true |
%%    VP0 = [set_assemble_mode(pimos,Done)|VP],
%%    MESG0 = [info(string#"Assemble Mode : pimos",[])|MESG].
%%asm_mode(string#"user",VP0,VP,MESG0,MESG,Done) :- true |
%%    VP0 = [set_assemble_mode(user,Done)|VP],
%%    MESG0 = [info(string#"Assemble Mode : user",[])|MESG].
%%otherwise.
%%asm_mode(_,VP0,VP,MESG0,MESG,Done) :- true |
%%    VP0 = VP,
%%    command_error(assemble_mode,assemble_mode,MESG0,MESG),
%%    Done = done.

    %%%%%%%%%%%%%%%%
    % PREPROCESSOR %
    %%%%%%%%%%%%%%%%

attach([LANG0|PreProcs],VP0,VP,MESG0,MESG,Done) :- list(PreProcs) |
    coerce(LANG0,LANG),
    kl1_library_string_utility:upper_to_lower(LANG,Lang),
    coerce_all(PreProcs,module,VP0,VP1,Status),
    attach_0(Status,Lang,VP1,VP,MESG0,MESG,Done).
attach([LANG0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(LANG0,LANG),
    kl1_library_string_utility:upper_to_lower(LANG,InLang),
    VP0 = [get_pp(InLang,OutLang,PreProcs)|VP],
    show_pp(PreProcs,InLang,OutLang,MESG0,MESG),
    Done = done.
attach([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_pps(PreProcs)|VP],
    show_pps(PreProcs,MESG0,MESG),
    Done = done.
otherwise.
attach(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(attach,preprocess,MESG0,MESG),
    Done = done.

attach_0(normal(PreProcs),Lang,VP0,VP,MESG0,MESG,Done) :-
    VP0 = [set_pp(Lang,string#"pkl1",PreProcs,Done)|VP],
    list_to_comma(PreProcs,Comma),
    MESG0 = [info(string#"Preprocess : ~s => pkl1 : ~t",[Lang,Comma])|MESG].
otherwise.
attach_0(_,_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(attach,preprocess,MESG0,MESG),
    Done = done.

    %%%%%%
    % CD %
    %%%%%%
cd(Dirs, VP0, VP, MESG0, MESG, Done) :- true |
    kl1_library_file_utility:getFileSystemInfo(DirStr,_),
    cd(Dirs, VP0, VP, MESG0, MESG, DirStr, Done).

cd([Dir0],VP0,VP,MESG0,MESG,DirStr,Done) :- true |
    coerce(Dir0,Dir1),
%%    string_element(Dir1,0,FirstChar,Dir),
    builtin#substring(Dir1,0,1,FirstChar,Dir),
    change_directory(FirstChar,Dir,VP0,VP,MESG0,MESG,DirStr,Done).
cd([],VP0,VP,MESG0,MESG,DirStr,Done) :- true |
    shoen:raise(pimos_tag#task,general_request,[getenv(task:home,Home)]),
    home_relative_directory(Home,string#"~",VP0,VP,MESG0,MESG,DirStr,Done).
otherwise.
cd(_,VP0,VP,MESG0,MESG,_,Done) :- true |
    VP0 = VP,
    command_error(cd,cd,MESG0,MESG),
    Done = done.

change_directory(DirStr,Dir,VP0,VP,MESG0,MESG,DirStr,Done) :- true |
    check_directory(Dir,VP0,VP,MESG0,MESG,DirStr,Done).
change_directory(#"~",Dir,VP0,VP,MESG0,MESG,DirStr,Done) :- true |
    shoen:raise(pimos_tag#task,general_request,[getenv(task:home,Home)]),
    home_relative_directory(Home,Dir,VP0,VP,MESG0,MESG,DirStr,Done).
otherwise.
change_directory(_,Path,VP0,VP,MESG0,MESG,DirStr,Done) :- true |
    VP0 = [get_directory(CWD)|VP1],
    builtin#append_string([CWD,DirStr,Path],NewPath),
    check_directory(NewPath,VP1,VP,MESG0,MESG,DirStr,Done).

home_relative_directory(normal(Home),string#"~",VP0,VP,MESG0,MESG,DirStr,Done) :- true |
    check_directory_(Home,VP0,VP,MESG0,MESG,DirStr,Done).
otherwise.
home_relative_directory(normal(Home),Path,VP0,VP,MESG0,MESG,DirStr,Done) :- string(Path,L,_) |
    L1 := L - 1,
    builtin#substring(Path,1,L1,Path1,_),
    builtin#append_string([Home,Path1],NewPath),
    check_directory_(NewPath,VP0,VP,MESG0,MESG,DirStr,Done).
otherwise.
home_relative_directory(_,Path,VP0,VP,MESG0,MESG,_,Done) :- true |
    VP0 = VP,
    MESG0 = [info(string#"!ERROR! unable to change current directory",[])|MESG],
    Done = done.

check_directory(Path0,VP0,VP,MESG0,MESG,DirStr,Done) :- true |
    string_element(DirStr, 0, DirChar, _),
    check_directory_(Path0, VP0, VP, MESG0, MESG, DirChar, Done).

check_directory_(Path0,VP0,VP,MESG0,MESG,DirChar,Done) :-
    string(Path0,Len,16), L1 := Len - 1,
    string_element(Path0,L1,DirChar) |
    builtin#substring(Path0,0,L1,Path1,_),
    VP0 = [get_file_request(FR)|VP1],
    FR = [directory(Path1,Status)],
    set_cd(Status,Path1,VP1,VP,MESG0,MESG,Done).
otherwise.
check_directory_(Path0,VP0,VP,MESG0,MESG,DirChar,Done) :- true |
    VP0 = [get_file_request(FR)|VP1],
    FR = [directory(Path0,Status)],
    set_cd(Status,Path0,VP1,VP,MESG0,MESG,Done).

set_cd(normal(Dir,_,_),Path,VP0,VP,MESG0,MESG,Done) :- true |
    Dir = [pathname(normal(PathName))],
    VP0 = [set_directory(PathName,Status)|VP],
    set_cd_0(Status,PathName,MESG0,MESG,Done).  % 
otherwise.
set_cd(Status,Path,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    MESG0 = [info(string#"!ERROR! unable to change current directory",[])|MESG],
    Done = done.

set_cd_0(normal,PathName,MESG0,MESG,Done) :- true |
    MESG0 = [info(string#"~s",[PathName])|MESG],
    Done = done.
otherwise.
set_cd_0(_,_,MESG0,MESG,Done) :- true |
    MESG0 = [info(string#"!ERROR! unable to change current directory",[])|MESG],
    Done = done.

    %%%%%%%%%%
    % VERIFY %
    %%%%%%%%%%

verify(FileNames0,VP0,VP,MESG0,MESG,Done) :- list(FileNames0) |
    coerce(FileNames0,FileNames),
    VP0 = [get_module_table(MT0)|VP1],
    MT0 = [get_code(pimos::kl1_compiler_distributer,verify,6,normal(Code))],
    apply(Code,{FileNames,VP1,VP,MESG0,MESG,Done}).
otherwise.
verify(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(verify,verify,MESG0,MESG),
    Done = done.

    %%%%%%%%%%%%
    % VERIFIER %
    %%%%%%%%%%%%

verifier([LANG0,ModuleSpec0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(LANG0,LANG),
    kl1_library_string_utility:upper_to_lower(LANG,Lang),   
    coerce(ModuleSpec0,module,VP0,VP1,Status),
    set_verifier(Status,Lang,VP1,VP,MESG0,MESG,Done).
verifier([LANG0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(LANG0,LANG),
    kl1_library_string_utility:upper_to_lower(LANG,Lang),
    VP0 = [remove_verifier(Lang,Status)|VP],
    MESG0 = MESG,
    Done = done.
verifier([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_verifiers(CKs)|VP],
    show_pps(CKs,MESG0,MESG),
    Done = done.
otherwise.
verifier(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(verifier,verifier,MESG0,MESG),
    Done = done.

set_verifier(normal(ModuleName),Lang,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_verifier(Lang,ModuleName,Done)|VP],
    MESG0 = [info(string#"~s : ~t",[Lang,ModuleName])|MESG].
otherwise.
set_verifier(_,Lang,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(verifier,verifier,MESG0,MESG),
    Done = done.

    %%%%%%%%%%%%%%%%%%%%%
    % DEFAULT EXTENSION %
    %%%%%%%%%%%%%%%%%%%%%

default_extension([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_ext(DefEXTs)|VP],
    list_to_comma(DefEXTs,EXTs),
    MESG0 = [info(string#"Default Extension = ~t",[EXTs])|MESG],
    Done = done.
otherwise.
default_extension(DefEXTs0,VP0,VP,MESG0,MESG,Done) :- true |
    coerce(DefEXTs0,DefEXTs),
    VP0 = [set_ext(DefEXTs,Done)|VP],
    list_to_comma(DefEXTs,DE),
    MESG0 = [info(string#"Default Extension = ~t",[DE])|MESG].

    %%%%%%%%%%%%%%
    % DISTRIBUTE %
    %%%%%%%%%%%%%%

distribute(DSTRBT,VP0,VP,MESG0,MESG,Done) :- list(DSTRBT) |
    coerce_all(DSTRBT,gterm,VP0,VP1,Status),
    distribute_0(Status,VP1,VP,MESG0,MESG,Done).
distribute([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_distribution([],Done)|VP],
    MESG0 = [info(string#"Processors = (none)",[])|MESG].

distribute_0(normal(Distribution),VP0,VP,MESG0,MESG,Done) :-
    VP0 = [set_distribution(Distribution,Done),
           get_processors(Processors)|VP],
    list_to_comma(Processors,PEs),
    MESG0 = [info(string#"Processors = ~t",[PEs])|MESG].
otherwise.
distribute_0(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(distribute,distribute,MESG0,MESG),
    Done = done.

    %%%%%%%%
    % HELP %
    %%%%%%%%

help(Item0,VP0,VP,MESG0,MESG,Done) :- list(Item0) |
    upper_to_lower(Item0,Item1),   
    coerce_all(Item1,atom,VP0,VP,Status),
    help_0(Status,MESG0,MESG),
    Done = done.
otherwise.
help(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    kl1_compile_help:list(MESG0,MESG),
    Done = done.

help_0(normal(Item),MESG0,MESG) :- true |
    kl1_compile_help:item(Item,MESG0,MESG).
otherwise.
help_0(_,MESG0,MESG) :- true |
    kl1_compile_help:list(MESG0,MESG).

upper_to_lower([Upper0|Uppers],Lowers0) :- true |
    kl1_library_string_utility:upper_to_lower(Upper0,Lower),   
    Lowers0 = [Lower|Lowers],
    upper_to_lower(Uppers,Lowers).
upper_to_lower([],Lowers) :- true | Lowers = [].

    %%%%%%%%%%%%
    % INDEXING %
    %%%%%%%%%%%%

%%indexing([OnOff0],VP0,VP,MESG0,MESG,Done) :- true |
%%    coerce(OnOff0,OnOff),
%%    indexing(OnOff,VP0,VP,MESG0,MESG),
%%    Done = done.
%%otherwise.
indexing(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_v25(indexing,MESG0,MESG),
    Done = done.

%%indexing(string#"on",VP0,VP,MESG0,MESG) :- true |
%%    VP0 = [set_compile_mode(on,Done)|VP],
%%    MESG0 = [info(string#"Indexing : on",[])|MESG].
%%indexing(string#"off",VP0,VP,MESG0,MESG) :- true |
%%    VP0 = [set_compile_mode(off,Done)|VP],
%%    MESG0 = [info(string#"Indexing : off",[])|MESG].
%%otherwise.
%%indexing(_,VP0,VP,MESG0,MESG) :- true |
%%    VP0 = VP,
%%    command_error(indexing,indexing,MESG0,MESG).

    %%%%%%%%%%%%%
    % AUTO_LINK %
    %%%%%%%%%%%%%

auto_link([OnOff0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(OnOff0,OnOff),
    auto_link(OnOff,VP0,VP,MESG0,MESG),
    Done = done.
auto_link([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_auto_link(OnOff)|VP],
    MESG0 = [info(string#"Auto Link : ~t",[OnOff])|MESG],
    Done = done.
otherwise.
auto_link(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(auto_link,auto_link,MESG0,MESG),
    Done = done.

auto_link(string#"on",VP0,VP,MESG0,MESG) :- true |
    VP0 = [set_auto_link(on,Done)|VP],
    MESG0 = [info(string#"Auto Link : on",[])|MESG].
auto_link(string#"off",VP0,VP,MESG0,MESG) :- true |
    VP0 = [set_auto_link(off,Done)|VP],
    MESG0 = [info(string#"Auto Link : off",[])|MESG].
otherwise.
auto_link(_,VP0,VP,MESG0,MESG) :- true |
    VP0 = VP,
    command_error(auto_link,suto_link,MESG0,MESG).

    %%%%%%%%
    % KEEP %
    %%%%%%%%

keep([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [keep(MESG0,MESG,Done)|VP].
otherwise.
keep(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(keep,keep,MESG0,MESG),
    Done = done.

    %%%%%%%
    % KLB %
    %%%%%%%

klb(FileNames0,VP0,VP,MESG0,MESG,Done) :- list(FileNames0) |
    coerce(FileNames0,FileNames),
    VP0 = [get_module_table(MT0)|VP1],
    MT0 = [get_code(pimos::kl1_compiler_distributer,outputKLB,6,normal(Code))],
    apply(Code,{FileNames,VP1,VP,MESG0,MESG,Done}).
otherwise.
klb(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(klb,klb,MESG0,MESG),
    Done = done.

    %%%%%%%%%%%%%%
    % LINK_ERROR %
    %%%%%%%%%%%%%%

link_error([LE0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(LE0,LE),
    link_error(LE,VP0,VP,MESG0,MESG),
    Done = done.
link_error([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_link_error(LinkError)|VP],
    MESG0 = [info(string#"Link Error : ~t",[LinkError])|MESG],
    Done = done.
otherwise.
link_error(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(link_error,link_error,MESG0,MESG),
    Done = done.

link_error(string#"error",VP0,VP,MESG0,MESG) :- true |
    VP0 = [set_link_error(error,Done)|VP],
    MESG0 = [info(string#"Link Error : error",[])|MESG].
link_error(string#"warning",VP0,VP,MESG0,MESG) :- true |
    VP0 = [set_link_error(warning,Done)|VP],
    MESG0 = [info(string#"Link Error : warning",[])|MESG].
otherwise.
link_error(_,VP0,VP,MESG0,MESG) :- true |
    VP0 = VP,
    command_error(link_error,link_error,MESG0,MESG).

    %%%%%%
    % LS %
    %%%%%%

ls(Patterns0,Column,VP0,VP,MESG0,MESG,Done) :- list(Patterns0) |
    coerce(Patterns0,Patterns),
    ls_0(Patterns,Column,VP0,VP,MESG0,MESG,Done).
ls([],Column,VP0,VP,MESG0,MESG,Done) :- true |
    ls_0([string#"*.*"],Column,VP0,VP,MESG0,MESG,Done).

ls_0(Pattern,Column,VP0,VP,MESG0,MESG,Done) :- integer(Column) |
    VP0 = [get_file_request(FR),get_path(Path),set_ls_column(Column,Done)|VP],
    kl1_library_file_utility:ls(Pattern,Path,Column,FR,MESG0,MESG).
otherwise.
ls_0(Pattern,_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_ls_column(Column),get_file_request(FR),get_path(Path)|VP],
    kl1_library_file_utility:ls(Pattern,Path,Column,FR,MESG0,MESG),
    Done = done.

    %%%%%%%%
    % LINK %
    %%%%%%%%

link([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_loader_table(ModTbl0,ModTbl),
           get_link_error(LE),
           get_module_table(CT)|VP1],
    ModTbl0 = [force_flush(LE,CT,MESG0,MESG1,Status0)|ModTbl],
    MESG1 = [report_total_error("Link")|MESG2],
    link_0(Status0,LE,VP1,VP,MESG2,MESG,Done).
otherwise.
link(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(link,link,MESG0,MESG),
    Done = done.

link_0(normal(LoadedMods0),LE,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_top_modules(TopModules)|VP1],
    relink:relink_with_pool(TopModules,LoadedMods0,VP1,VP2,MESG0,MESG1,Status0),
    link_1(Status0,LoadedMods0,LE,VP2,VP,MESG1,MESG,Done).
otherwise.
link_0(_,LE,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    MESG0 = MESG,
    Done = done.

link_1(normal(LoadedMods0),LoadedMods1,LE,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_module_table(CT),
           get_loader_table(ModTbl0,ModTbl)|VP1],
    ModTbl1 = [force_flush(LE,CT,MESG0,MESG1,Status0)|ModTbl],
    uniq_append(LoadedMods0,LoadedMods1,LoadedMods2),
    link_2(Status0,LoadedMods2,VP1,VP,Done).
otherwise.
link_1(_,LoadedMods0,LE,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_last_loaded_modules(LoadedMods0,Done)|VP],
    MESG0 = MESG.

link_2(normal(LoadedMods0),LoadedMods1,VP0,VP,Done) :- true |
    uniq_append(LoadedMods0,LoadedMods1,LoadedMods),
    VP0 = [set_last_loaded_modules(LoadedMods,Done)|VP].
otherwise.
link_2(_,LoadedMods1,VP0,VP,Done) :- true |
    VP0 = [set_last_loaded_modules(LoadedMods0,Done)|VP].

uniq_append(L0,L1,L2) :- true |
    pool:keyed_set(MP0),
    all_modules(MP0,L0,MP1),
    all_modules(MP1,L1,MP2),
    MP2 = [get_all(All)],
    transform(All,L2).

all_modules(MP0,[ModuleName|Rest],MP) :- true |
    MP0 = [put(ModuleName,[],_)|MP1],
    all_modules(MP1,Rest,MP).
all_modules(MP0,[],MP) :- true | MP = MP0.

transform([{ModuleName,[]}|Rest],LMods0) :- true |
    LMods0 = [ModuleName|LMods1],
    transform(Rest,LMods1).
transform([],LMods0) :- true | LMods0 = [].

    %%%%%%%%
    % LOAD %
    %%%%%%%%

load(Files0,VP0,VP,MESG0,MESG,Done) :- list(Files0) |
    coerce(Files0,Files),
    load:load(Files,VP0,VP1,MESG0,MESG1,Status),
    MESG1 = [report_total_error("Load")|MESG2],
    load_0(Status,VP1,VP,MESG2,MESG,Done).
otherwise.
load(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(load,load,MESG0,MESG),
    Done = done.

load_0(normal(LoadedMods0),VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_top_modules(TopModules)|VP1],
    relink:relink_with_pool(TopModules,LoadedMods0,VP1,VP2,MESG0,MESG,Status),
    load_1(Status,LoadedMods0,VP2,VP,Done).
otherwise.
load_0(Status,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    MESG0 = MESG,
    Done = done.

load_1(normal(LoadedMods0),LoadedMods1,VP0,VP,Done) :- true |
    uniq_append(LoadedMods0,LoadedMods1,LoadedMods),
    VP0 = [set_last_loaded_modules(LoadedMods,Done)|VP].
otherwise.
load_1(Status,LoadedMods,VP0,VP,Done) :- true |
    VP0 = [set_last_loaded_modules(LoadedMods,Done)|VP].

    %%%%%%%%
    % MAKE %
    %%%%%%%%

make([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_top_modules(TopModules)|VP1],
    compiler_make:make(TopModules,VP1,VP,MESG0,MESG,Done).
otherwise.
make(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(make,make,MESG0,MESG),
    Done = done.

    %%%%%%%%%%%
    % MESSAGE %
    %%%%%%%%%%%

message([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_message_mode(MesgMode)|VP],
    MESG0 = [info(string#"Message Mode : ~t",[MesgMode])|MESG],
    Done = done.
message([Mode0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(Mode0,atom,VP0,VP1,Status),
    message_0(Status,VP1,VP,MESG0,MESG,Done).
otherwise.
message(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(message,message,MESG0,MESG),
    Done = done.

message_0(normal(verbose),VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_message_mode(verbose,Done)|VP],
    MESG0 = [info(string#"Message Mode : verbose",[])|MESG].
message_0(normal(silent),VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_message_mode(silent,Done)|VP],
    MESG0 = [info(string#"Message Mode : silent",[])|MESG].
otherwise.
message_0(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_message_mode(silent,Done)|VP],
    MESG0 = [info(string#"Message Mode : silent",[])|MESG].

    %%%%%%%%%%%%%%%%%%%%
    % ORIGINAL_PACKAGE %
    %%%%%%%%%%%%%%%%%%%%

original_package([OnOff0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(OnOff0,OnOff),
    original_package(OnOff,VP0,VP,MESG0,MESG),
    Done = done.
otherwise.
original_package(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(original_package,original_package,MESG0,MESG),
    Done = done.

original_package(string#"on",VP0,VP,MESG0,MESG) :- true |
    VP0 = [set_original_package(on,Done)|VP],
    MESG0 = [info(string#"Original Package : on",[])|MESG].
original_package(string#"off",VP0,VP,MESG0,MESG) :- true |
    VP0 = [set_original_package(off,Done)|VP],
    MESG0 = [info(string#"Original Package : off",[])|MESG].
otherwise.
original_package(_,VP0,VP,MESG0,MESG) :- true |
    VP0 = VP,
    command_error(original_package,original_package,MESG0,MESG).

    %%%%%%%%%%%
    % PACKAGE %
    %%%%%%%%%%%

package([PStr0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(PStr0,atom,VP0,VP1,Status),
    set_package_0(Status,VP1,VP,MESG0,MESG,Done).
otherwise.
package(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(package,package,MESG0,MESG),
    Done = done.

set_package_0(normal(Package),VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_module_table(MT0)|VP1],
    MT0 = [get_package_info(Package,Status)],
    set_package_1(Status,Package,VP1,VP,MESG0,MESG,Done).
otherwise.
set_package_0(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(package,package,MESG0,MESG),
    Done = done.

set_package_1(normal(_),Package,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_package(Package,Done),
           get_working_packages(WP)|VP],
    MESG0 = [info(string#"Package : ~t",[Package])|MESG1],
    member(WP,Package,YorN),
    check_wp(YorN,Package,MESG1,MESG).
set_package_1(protection_violation,Package,DP0,DP,MESG0,MESG,Done) :- true |
    MESG0 = [info(string#"!ERROR! illegal access to protected package : ~t",[Package])|MESG],
    DP0 = DP,
    Done = done.
otherwise.
set_package_1(_,Package,DP0,DP,MESG0,MESG,Done) :- true |
    MESG0 = [info(string#"!ERROR! unable to access package : ~t",[Package])|MESG],
    DP0 = DP,
    Done = done.

member([('*')|_],Obj,YorN) :- true | YorN = yes.
otherwise.
member([Obj|_],Obj,YorN) :- true | YorN = yes.
member([],_,YorN) :- true | YorN = no.
otherwise.
member([_|Rest],Obj,YorN) :- true | member(Rest,Obj,YorN).

check_wp(yes,Package,MESG0,MESG) :- true | MESG0 = MESG.
check_wp(no,Package,MESG0,MESG) :- true |
    MESG0 = [info("!WARNING! not included in the working packages : ~t",[Package])|MESG].

    %%%%%%%%
    % PATH %
    %%%%%%%%

path(Args0,VP0,VP,MESG0,MESG,Done) :- list(Args0) |
    coerce(Args0,Args),
    VP0 = [set_path(Args,Done)|VP],
    list_to_comma(Args,Comma),
    MESG0 = [info(string#"Path = ~t",[Comma])|MESG].
path([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_path([],Done)|VP],
    MESG0 = [info(string#"Path = (none)",[])|MESG].

    %%%%%%%%%%%%
    % PARALLEL %
    %%%%%%%%%%%%

parallel([Arg],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(Arg,gterm,VP0,VP1,Status),
    parallel_0(Status,VP1,VP,MESG0,MESG,Done).
parallel([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_parallel(PN)|VP],
    MESG0 = [info(string#"Parallel = ~t",[PN])|MESG],
    Done = done.
otherwise.
parallel(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(parallel,parallel,MESG0,MESG),
    Done = done.

parallel_0(normal(N),VP0,VP,MESG0,MESG,Done) :- integer(N) |
    VP0 = [set_parallel(N,Done)|VP],
    MESG0 = [info(string#"Parallel = ~t",[N])|MESG].
otherwise.
parallel_0(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(parallel,parallel,MESG0,MESG),
    Done = done.

    %%%%%%%%%%
    % PARSER %
    %%%%%%%%%%

parser([LANG0,ModuleSpec0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(LANG0,LANG),
    kl1_library_string_utility:upper_to_lower(LANG,Lang),   
    coerce(ModuleSpec0,module,VP0,VP1,Status),
    set_parser(Status,Lang,VP1,VP,MESG0,MESG,Done).
parser([LANG0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(LANG0,LANG),
    kl1_library_string_utility:upper_to_lower(LANG,Lang),
    VP0 = [remove_parser(Lang,Status)|VP],
    MESG0 = MESG,
    Done = done.
parser([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_parsers(PAs)|VP],
    show_pps(PAs,MESG0,MESG),
    Done = done.
otherwise.
parser(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(parser,parser,MESG0,MESG),
    Done = done.

set_parser(normal(ModuleName),Lang,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_parser(Lang,ModuleName,Done)|VP],
    MESG0 = [info(string#"~s : ~t",[Lang,ModuleName])|MESG].
otherwise.
set_parser(_,Lang,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(parser,parser,MESG0,MESG),
    Done = done.

    %%%%%%%%%%%%%%
    % PREPROCESS %
    %%%%%%%%%%%%%%

preprocess([INLANG0,OUTLANG0|PreProcs],VP0,VP,MESG0,MESG,Done) :- list(PreProcs) |
    coerce(INLANG0,INLANG),
    kl1_library_string_utility:upper_to_lower(INLANG,InLang),
    coerce(OUTLANG0,OUTLANG),
    kl1_library_string_utility:upper_to_lower(OUTLANG,OutLang),
    coerce_all(PreProcs,module,VP0,VP1,Status),
    preprocess(Status,InLang,OutLang,VP1,VP,MESG0,MESG,Done).
preprocess([LANG],VP0,VP,MESG0,MESG,Done) :- true |
    kl1_library_string_utility:upper_to_lower(LANG,InLang),
    VP0 = [remove_pp(InLang,Status)|VP],
    MESG0 = MESG,
    Done = done.
preprocess([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_pps(PreProcs)|VP],
    show_pps(PreProcs,MESG0,MESG),
    Done = done.
otherwise.
preprocess(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(preprocess,preprocess,MESG0,MESG),
    Done = done.

preprocess(normal(PreProcs),InLang,OutLang,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_pp(InLang,OutLang,PreProcs,Done)|VP],
    list_to_comma(PreProcs,Comma),
    MESG0 = [info(string#"Preprocess : ~s => ~s : ~t",[InLang,OutLang,Comma])|MESG].
otherwise.
preprocess(_,InLang,OutLang,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(preprocess,preprocess,MESG0,MESG),
    Done = done.

%%show_pp(Parser,Lang,MESG0,MESG) :- true |
%%    show_pps([{Lang,Parser}],MESG0,MESG).

show_pp(PreProcs,InLang,OutLang,MESG0,MESG) :- list(PreProcs) |
    list_to_comma(PreProcs,Comma),
    MESG0 = [info(string#"  ~s => ~s : ~t",[InLang,OutLang,Comma])|MESG].
otherwise.
show_pp(PreProcs,InLang,OutLang,MESG0,MESG) :- true |
    MESG0 = [info(string#"!ERROR! unknown language : ~s",[InLang])|MESG].

show_pps([{InLang,{OutLang,Modules}}|PreProcs],MESG0,MESG) :- list(Modules) |
    list_to_comma(Modules,PPs),
    MESG0 = [info(string#"  ~s => ~s : ~t",[InLang,OutLang,PPs])|MESG1], 
    show_pps(PreProcs,MESG1,MESG).
show_pps([],MESG0,MESG) :- true |
    MESG0 = MESG.
otherwise.
show_pps([{InLang,{OutLang,Module}}|PreProcs],MESG0,MESG) :- true |
    MESG0 = [info(string#"  ~s => ~s : ~t",[InLang,OutLang,Module])|MESG1], 
    show_pps(PreProcs,MESG1,MESG).
otherwise.
show_pps([{Lang,Module}|PreProcs],MESG0,MESG) :- true | % To display (un)parser(s)
    MESG0 = [info(string#"  ~s : ~t",[Lang,Module])|MESG1], 
    show_pps(PreProcs,MESG1,MESG).

    %%%%%%%%%%%
    % PROFILE %
    %%%%%%%%%%%

%%profile([OnOff0],VP0,VP,MESG0,MESG,Done) :- true |
%%    coerce(OnOff0,OnOff),
%%    profile(OnOff,VP0,VP,MESG0,MESG),
%%    Done = done.
%%otherwise.
profile(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_v25(profile,MESG0,MESG),
    Done = done.

%%profile(string#"on",VP0,VP,MESG0,MESG) :- true |
%%    VP0 = [set_profile(on,Done)|VP],
%%    MESG0 = [info(string#"Profile : on",[])|MESG].
%%profile(string#"off",VP0,VP,MESG0,MESG) :- true |
%%    VP0 = [set_profile(off,Done)|VP],
%%    MESG0 = [info(string#"Profile : off",[])|MESG].
%%otherwise.
%%profile(_,VP0,VP,MESG0,MESG) :- true |
%%    VP0 = VP,
%%    command_error(profile,profile,MESG0,MESG).

    %%%%%%%
    % PWD %
    %%%%%%%

pwd([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_directory(CDir)|VP],
    MESG0 = [info(string#"~s",[CDir])|MESG],
    Done = done.
otherwise.
pwd(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(pwd,pwd,MESG0,MESG),
    Done = done.

    %%%%%%%%%%%%
    % UNPARSER %
    %%%%%%%%%%%%

unparser([LANG0,ModuleSpec0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(LANG0,LANG),
    kl1_library_string_utility:upper_to_lower(LANG,Lang),   
    coerce(ModuleSpec0,module,VP0,VP1,Status),
    set_unparser(Status,Lang,VP1,VP,MESG0,MESG,Done).
unparser([LANG0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(LANG0,LANG),
    kl1_library_string_utility:upper_to_lower(LANG,Lang),
    VP0 = [remove_unparser(Lang,Status)|VP],
    MESG0 = MESG,
    Done = done.
unparser([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_unparsers(PAs)|VP],
    show_pps(PAs,MESG0,MESG),
    Done = done.
otherwise.
unparser(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(unparser,parser,MESG0,MESG),
    Done = done.

set_unparser(normal(ModuleName),Lang,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_unparser(Lang,ModuleName,Done)|VP],
    MESG0 = [info(string#"~s : ~t",[Lang,ModuleName])|MESG].
otherwise.
set_unparser(_,Lang,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(unparser,parser,MESG0,MESG),
    Done = done.

    %%%%%%%%%%
    % RELINK %
    %%%%%%%%%%

relink(Modules,Mode,VP0,VP,MESG0,MESG,Done) :- list(Modules) |
    coerce_all(Modules,module,VP0,VP1,Status),
    relink_0(Status,Mode,VP1,VP,MESG0,MESG1,Done),
    MESG1 = [report_total_error("Relink")|MESG].
otherwise.
relink(_,Mode,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(relink,relink,MESG0,MESG),
    Done = done.

relink_0(normal([Top|List]),search_and_relink,VP0,VP,MESG0,MESG,Status) :- list(List) |
    relink:relink_with_pool([Top],List,VP0,VP,MESG0,MESG,Status).
relink_0(normal(List),just_relink,VP0,VP,MESG0,MESG,Status) :- list(List) |
    relink:relink_with_pool(List,VP0,VP,MESG0,MESG,Status).
otherwise.
relink_0(_,_,VP0,VP,MESG0,MESG,Status) :- true |
    VP0 = VP,
    command_error(relink,relink,MESG0,MESG),
    Status = abnormal.

    %%%%%%%%%%
    % REVERT %
    %%%%%%%%%%

revert([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [revert(MESG0,MESG1,_)|VP1],
    show_status([],VP1,VP,MESG1,MESG,Done).
otherwise.
revert(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(revert,revert,MESG0,MESG),
    Done = done.

    %%%%%%%%%%%
    % SET/GET %
    %%%%%%%%%%%

define([Key0,Value0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(Key0,atom,VP0,VP1,Key),
    coerce(Value0,gterm,VP1,VP2,Value),
    define_0(Key,Value,VP2,VP,MESG0,MESG),
    Done = done.
define([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [defined(All)|VP],
    show_defined(All,MESG0,MESG),
    Done = done.
otherwise.
define(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(define,define,MESG0,MESG),
    Done = done.

define_0(normal(Key),normal(Value),VP0,VP,MESG0,MESG) :- true |
    VP0 = [define(Key,Value,Done)|VP],
    MESG0 = [info(string#"  ~t := ~t",[Key,Value])|MESG].
otherwise.
define_0(_,_,VP0,VP,MESG0,MESG) :- true |
    VP0 = VP,
    command_error(define,define,MESG0,MESG).

show_defined([{Key,Value}|Rest],MESG0,MESG) :- true |
    MESG0 = [info(string#"  ~t := ~t",[Key,Value])|MESG1],
    show_defined(Rest,MESG1,MESG).
show_defined([],MESG0,MESG) :- true |
    MESG0 = MESG.

undefine([Key0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(Key0,atom,VP0,VP1,Key),
    undefine_0(Key,VP1,VP,MESG0,MESG),
    Done = done.
otherwise.
undefine(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(undefine,define,MESG0,MESG),
    Done = done.

undefine_0(normal(Key),VP0,VP,MESG0,MESG) :- true |
    VP0 = [undefine(Key,Done)|VP],
    MESG0 = [info(string#"!ERROR! undefined parameter : ",[Key])|MESG].
otherwise.
undefine_0(_,VP0,VP,MESG0,MESG) :- true |
    VP0 = VP,
    command_error(undefine,define,MESG0,MESG).

    %%%%%%%%%%%%
    % DESCRIBE %
    %%%%%%%%%%%%

describe(Modules,VP0,VP,MESG0,MESG,Done) :- list(Modules) |
    coerce_all(Modules,module,VP0,VP1,Status),
    describe_0(Status,VP1,VP,MESG0,MESG,Done).
describe([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_module_table(MT0),do(VP1)|VP],
    MT0 = [get_code(pimos::kl1_self_cal,describe,3,normal(Code))],
    apply(Code,{VP1,MESG0,MESG}),
    Done = done.

describe_0(normal(Modules),VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_module_table(MT0)|VP1],
    describe_1(Modules,MT0,VP1,VP,MESG0,MESG,Done).
otherwise.
describe_0(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(describe,describe,MESG0,MESG),
    Done = done.

describe_1([Module|Rest],MT0,VP0,VP,MESG0,MESG,Done) :- true |
    MT0 = [get_module(Module,Status)|MT1],
    describe_2(Status,Module,VP0,VP1,MESG0,MESG1),
    describe_1(Rest,MT1,VP1,VP,MESG1,MESG,Done).
describe_1([],MT0,VP0,VP,MESG0,MESG,Done) :- true |
    MT0 = [],
    VP0 = VP,
    MESG0 = MESG,
    Done = done.

describe_2(normal(Module),Name,VP0,VP,MESG0,MESG) :- true |
    predicate_to_code(Module,describe,3,Code),
    describe_3(Code,Name,VP0,VP,MESG0,MESG).
otherwise.
describe_2(_,Module,VP0,VP,MESG0,MESG) :- true |
    VP0 = VP,
    MESG0 = [info(string#"!ERROR! undeifned module : ~t",[Module])|MESG].

describe_3(Code,ModuleName,VP0,VP,MESG0,MESG) :- code(Code,_,_,_) |
    VP0 = [do(VP1)|VP],
    MESG0 = [info(string#"~t :",[ModuleName])|MESG1],
    apply(Code,{VP1,MESG1,MESG}).
otherwise.
describe_3(Code,ModuleName,VP0,VP,MESG0,MESG) :- true |
    VP0 = VP,
    MESG0 = [info(string#"!ERROR! undeifned predicate : ~t:describe/3",[ModuleName])|MESG].

    %%%%%%%%%%%
    % SET/GET %
    %%%%%%%%%%%

set([Key0,Value0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(Key0,gterm,VP0,VP1,Key),
    coerce(Value0,gterm,VP1,VP2,Value),
    set_param(Key,Value,VP2,VP,MESG0,MESG,Done).
set([Key0,string#"=",Value0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(Key0,gterm,VP0,VP1,Key),
    coerce(Value0,gterm,VP1,VP2,Value),
    set_param(Key,Value,VP2,VP,MESG0,MESG,Done).
set([Key0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(Key0,gterm,VP0,VP1,Key),
    reset_param(Key,VP1,VP,MESG0,MESG,Done).
otherwise.
set(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(set,set,MESG0,MESG),
    Done = done.

set_param(normal(Key),normal(Value),VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set(Key,Value,Done)|VP],
    MESG0 = [info(string#"~t := ~t",[Key,Value])|MESG].
otherwise.
set_param(_,_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(set,set,MESG0,MESG),
    Done = done.

reset_param(normal(Key),VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [reset(Key,Done)|VP],
    MESG0 = [info(string#"~t := (none)",[Key])|MESG].
otherwise.
reset_param(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(reset,set,MESG0,MESG),
    Done = done.

get([Key0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(Key0,gterm,VP0,VP1,Key),
    get_param_0(Key,Key0,VP1,VP,MESG0,MESG,Done).
get([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_all(All)|VP],
    get_all_param(All,MESG0,MESG),
    Done = done.
otherwise.
get(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(get,get,MESG0,MESG),
    Done = done.

get_param_0(normal(Key),_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get(Key,Status)|VP],
    get_param_1(Status,Key,MESG0,MESG),
    Done = done.
otherwise.
get_param_0(_,Key0,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    MESG0 = [info(string#"!ERROR! illegal key : ~t",[Key0])|MESG],
    Done = done.

get_param_1(normal(Value),Key,MESG0,MESG) :- true |
    MESG0 = [info(string#"  ~t := ~t",[Key,Value])|MESG].
otherwise.
get_param_1(_,Key,MESG0,MESG) :- true |
    MESG0 = [info(string#"!ERROR! non-existent parameter : ~t",[Key])|MESG].

get_all_param([{Key,Value}|Rest],MESG0,MESG) :- true |
    MESG0 = [info(string#"  ~t := ~t",[Key,Value])|MESG1],
    get_all_param(Rest,MESG1,MESG).
get_all_param([],MESG0,MESG) :- true | MESG0 = MESG.

%%list_to_wrapped_comma([Term],Comma) :- true | Term = Comma.
%%list_to_wrapped_comma([],Null) :- true | Null = '(none)'.
%%list_to_wrapped_comma([Term|Rest0],Commas) :- list(Rest0) |
%%    Commas = wrap#({(','),Term,Rest1}),
%%    list_to_wrapped_comma(Rest0,Rest1).

    %%%%%%%%
    % SHOW %
    %%%%%%%%

show([Option0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(Option0,Option),
    show_status(Option,VP0,VP,MESG0,MESG,Done).
show([],VP0,VP,MESG0,MESG,Done) :- true |
    show_status([],VP0,VP,MESG0,MESG,Done).
otherwise.
show(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(show,show,MESG0,MESG),
    Done = done.

show_status(string#"aliases",VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_aliases(Aliases)|VP],
    show_aliases(Aliases,MESG0,MESG),
    Done = done.
show_status(string#"alias",VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_aliases(Aliases)|VP],
    show_aliases(Aliases,MESG0,MESG),
    Done = done.
show_status(string#"preprocessors",VP0,VP,MESG0,MESG,Done) :- true |
    show_preprocs(VP0,VP,MESG0,MESG,Done).
show_status(string#"preprocessor",VP0,VP,MESG0,MESG,Done) :- true |
    show_preprocs(VP0,VP,MESG0,MESG,Done).
show_status(string#"preprocs",VP0,VP,MESG0,MESG,Done) :- true |
    show_preprocs(VP0,VP,MESG0,MESG,Done).
show_status(string#"preproc",VP0,VP,MESG0,MESG,Done) :- true |
    show_preprocs(VP0,VP,MESG0,MESG,Done).
show_status(string#"parameters",VP0,VP,MESG0,MESG,Done) :- true |
    show_params(VP0,VP,MESG0,MESG,Done).
show_status(string#"parameter",VP0,VP,MESG0,MESG,Done) :- true |
    show_params(VP0,VP,MESG0,MESG,Done).
show_status(string#"params",VP0,VP,MESG0,MESG,Done) :- true |
    show_params(VP0,VP,MESG0,MESG,Done).
show_status(string#"param",VP0,VP,MESG0,MESG,Done) :- true |
    show_params(VP0,VP,MESG0,MESG,Done).
show_status([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_package(DP),
%%           get_directory(CDir),
           get_path(Path),
           get_working_packages(WP),
           get_original_package(OP),
           get_top_modules(TM),
%%           get_compile_option(CompMode,AsmMode,Profile,StMode),
           get_auto_link(AutoLink),
           get_link_error(LinkError),
           get_message_mode(MM),
           get_loader_table(LT0,LT),
           get_processors(PEs),
           get_compiled_filename(PrevFiles),
           get_ext(EXTs),
           get_param_file(ParamFile),
           get_last_loaded_modules(LMods)|VP],
    LT0 = [unresolved_modules(Modules)|LT],
    list_to_comma(Modules,Mods),
    list_to_comma(TM,TM1),
    list_to_comma(WP,WP1),
    list_to_comma(Path,Path1),
    list_to_comma(PEs,PEs1),
    list_to_comma(EXTs,Exts),
    list_to_comma(PrevFiles,PFiles),
    list_to_comma(LMods,LMods1),
%%    MESG0 = [info(string#"  Compile Mode        : ~t",[CompMode]),
%%             info(string#"  Profile Mode        : ~t",[Profile])|MESG1],
%%    show_options_0(AsmMode,StMode,MESG1,MESG2),
%%    MESG2 = [info(string#"  Auto Link           : ~t",[AutoLink]),
    MESG0 = [info(string#"  Auto Link           : ~t",[AutoLink]),
             info(string#"  Link Error          : ~t",[LinkError]),
             info(string#"  Message Mode        : ~t",[MM]),
             info(string#"  Original Package    : ~t",[OP]),
             info(string#"  Default Package     = ~t",[DP]),
             info(string#"  Working Packages    = ~t",[WP1]),
%%             info(string#"  Current Directory   = ~t",[CDir]),
             info(string#"  Path                = ~t",[Path1]),
             info(string#"  File Extension      = ~t",[Exts]),
             info(string#"  Top Modules         = ~t",[TM1]),
             info(string#"  Nodes               = ~t",[PEs1]),
             info(string#"  Unresolved Modules  > ~t",[Mods]),
             info(string#"  Last Compiled Files > ~t",[PFiles]),
             info(string#"  Parameter File      > ~t",[ParamFile]),
             info(string#"  Last Loaded Modules > ~t",[LMods1])
             |MESG],
    Done = done.
otherwise.
show_status(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(show,show,MESG0,MESG),
    Done = done.

show_preprocs(VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_parsers(PAs),
           get_verifiers(CKs),
           get_pps(PreProcs),
           get_unparsers(UPAs)|VP],
    MESG0 = [info(string#"Parsers :",[])|MESG1],
    show_pps(PAs,MESG1,MESG2),
    MESG2 = [info(string#"Verifiers :",[])|MESG3],
    show_pps(CKs,MESG3,MESG4),
    MESG4 = [info(string#"Preprocessors :",[])|MESG5],
    show_pps(PreProcs,MESG5,MESG6),
    MESG6 = [info(string#"Unparsers :",[])|MESG7],
    show_pps(UPAs,MESG7,MESG),
    Done = done.

show_params(VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [defined(All0),get_all(All1)|VP],
    MESG0 = [info(string#"Define parameters :",[])|MESG1],
    show_defined(All0,MESG1,MESG2),
    MESG2 = [info(string#"Preprocess parameters :",[])|MESG3],
    get_all_param(All1,MESG3,MESG),
    Done = done.

%%show_options_0(firm,StMode,MESG0,MESG) :- true |
%%    MESG0 = [info(string#"  Assemble Mode       : firm",[]),
%%             info(string#"  Structure Mode      : ~t",[StMode])|MESG].
%%show_options_0(pimos,StMode,MESG0,MESG) :- true |
%%    MESG0 = [info(string#"  Assemble Mode       : pimos",[]),
%%             info(string#"  Structure Mode      : ~t",[StMode])|MESG].
%%otherwise.
%%show_options_0(AsmMode,StMode,MESG0,MESG) :- true | MESG0 = MESG.

list_to_comma([Term],Comma) :- true | Term = Comma.
list_to_comma([],Null) :- true | Null = '(none)'.
list_to_comma([Term|Rest0],Commas) :- list(Rest0) |
    Commas = {(','),Term,Rest1},
    list_to_comma(Rest0,Rest1).

    %%%%%%%%%%%%%%%
    % TOP_MODULES %
    %%%%%%%%%%%%%%%

top_modules(Modules,VP0,VP,MESG0,MESG,Done) :- list(Modules) |
    coerce_all(Modules,module,VP0,VP1,Status),
    top_modules_0(Status,VP1,VP,MESG0,MESG,Done).
top_modules([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_top_modules([],Done)|VP],
    MESG0 = [info(string#"Top Modules = (none)",[])|MESG].
otherwise.
top_modules(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(top_modules,top_modules,MESG0,MESG),
    Done = done.

top_modules_0(normal(Modules),VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_top_modules(Modules,Done)|VP],
    list_to_comma(Modules,Comma),
    MESG0 = [info(string#"Top Modules = ~t",[Comma])|MESG].
otherwise.
top_modules_0(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(top_modules,top_modules,MESG0,MESG),
    Done = done.

    %%%%%%%%%%%%%
    % TRANSLATE %
    %%%%%%%%%%%%%

translate(FileNames0,VP0,VP,MESG0,MESG,Done) :- list(FileNames0) |
    coerce(FileNames0,FileNames),
    VP0 = [get_module_table(MT0)|VP1],
    MT0 = [get_code(pimos::kl1_compiler_distributer,translate,6,normal(Code))],
    apply(Code,{FileNames,VP1,VP,MESG0,MESG,Done}).
otherwise.
translate(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(translate,translate,MESG0,MESG),
    Done = done.

    %%%%%%%%%%
    % UNLOAD %
    %%%%%%%%%%

unload_last_compiled_modules([FileName0],VP0,VP,MESG0,MESG,Done) :-
    coerce(FileName0,FileName),
    VP0 = [get_last_loaded_modules(ModuleNames)|VP1],
    unload:unload(ModuleNames,FileName,VP1,VP,MESG0,MESG1,Done),
    MESG1 = [report_total_error("Unload")|MESG].
otherwise.
unload_last_compiled_modules(_,VP0,VP,MESG0,MESG,Done) :-
    VP0 = VP,
    command_error(unload,load,MESG0,MESG),
    Done = done.

unload(Args,VP0,VP,MESG0,MESG,Done) :- Args = [_,_|_] |
    make_unload_args(Args,VP0,VP1,MESG0,MESG1,Modules,FileName,Status),
    unload(Status,Modules,FileName,VP1,VP,MESG1,MESG,Done).
unload([FileName0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(FileName0,FileName),
    VP0 = [get_top_modules(TopModules)|VP1],
    unload:program(TopModules,FileName,VP1,VP,MESG0,MESG1,Done),
    MESG1 = [report_total_error("Unload")|MESG].
otherwise.
unload(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(unload,load,MESG0,MESG),
    Done = done.

unload(normal,Modules,FileName,VP0,VP,MESG0,MESG,Done) :- true |
    unload:unload(Modules,FileName,VP0,VP,MESG0,MESG1,Done),
    MESG1 = [report_total_error("Unload")|MESG].
otherwise.
unload(_,_,_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    MESG0 = MESG,
    Done = done.

make_unload_args([Module,FileName0],VP0,VP,MESG0,MESG,Modules,FileName,Status) :- true |
    coerce(Module,module,VP0,VP,Status0),
    coerce(FileName0,FileName),
    make_unload_args_1(Status0,MESG0,MESG,Modules,Status).
otherwise.
make_unload_args([Module|Rest],VP0,VP,MESG0,MESG,Modules,FileName,Status) :- Rest = [_|_] |
    coerce(Module,module,VP0,VP1,Status0),
    make_unload_args_0(Status0,Rest,VP1,VP,MESG0,MESG,Modules,FileName,Status).
otherwise.
make_unload_args(_,VP0,VP,MESG0,MESG,Modules,FileName,Status) :- true |
    VP0 = VP,
    command_error(unload,load,MESG0,MESG),
    Modules = [],
    Status = abnormal.

make_unload_args_0(normal(Module),Rest,VP0,VP,MESG0,MESG,Modules,FileName,Status) :- true |
    Modules = [Module|Modules0],
    make_unload_args(Rest,VP0,VP,MESG0,MESG,Modules0,FileName,Status).
otherwise.
make_unload_args_0(_,Rest,VP0,VP,MESG0,MESG,Modules,FileName,Status) :- true |
    VP0 = VP,
    command_error(unload,load,MESG0,MESG),
    Modules = [],
    FileNames = [],
    Status = abnormal.

make_unload_args_1(normal(Module),MESG0,MESG,Modules,Status) :- true |
    Modules = [Module],
    MESG0 = MESG,
    Status = normal.
otherwise.
make_unload_args_1(_,MESG0,MESG,Modules,Status) :- true |
    command_error(unload,load,MESG0,MESG),
    Modules = [],
    Status = abnormal.

    %%%%%%%%%%%
    % VERSION %
    %%%%%%%%%%%

version(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    compiler_version:version(Version,Date),
    MESG0 = [info(string#"** KL1 Compiler  ~s ~s **~n",[Version,Date])|MESG],
    Done = done.

    %%%%%%%%%%%%%%%%%%%%
    % WORKING_PACKAGES %
    %%%%%%%%%%%%%%%%%%%%

working_packages(Packages0,VP0,VP,MESG0,MESG,Done) :- Packages0 = [_|PL], list(PL) |
    coerce_all(Packages0,atom,VP0,VP1,Status),
    wp_0(Status,VP1,VP,MESG0,MESG,Done).
working_packages([Package0],VP0,VP,MESG0,MESG,Done) :- true |
    coerce(Package0,gterm,VP0,VP1,Status),
    wp_1(Status,VP1,VP,MESG0,MESG,Done).
working_packages([],VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [get_package(DefaultPackage),
           set_working_packages([DefaultPackage],Done)|VP],
    MESG0 = [info(string#"Working Packages = ~t",[DefaultPackage])|MESG].

wp_0(normal(Packages),VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = [set_working_packages(Packages,Done)|VP],
    list_to_comma(Packages,Comma),
    MESG0 = [info(string#"Working Packages = ~t",[Comma])|MESG].
otherwise.
wp_0(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(working_packages,working_packages,MESG0,MESG),
    Done = done.

wp_1(normal(Packages0),VP0,VP,MESG0,MESG,Done) :- list(Packages0) |
    check_mem(Packages0,atom,Status),
    wp_2(Status,VP0,VP,MESG0,MESG,Done).
wp_1(normal(Package),VP0,VP,MESG0,MESG,Done) :- atom(Package) |
    VP0 = [set_working_packages([Package],Done)|VP],
    MESG0 = [info(string#"Working Packages = ~t",[Package])|MESG].
otherwise.
wp_1(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(working_packages,working_packages,MESG0,MESG),
    Done = done.

wp_2(normal(Packages),VP0,VP,MESG0,MESG,Status) :- true |
    VP0 = [set_working_packages(Packages,Done)|VP],
    list_to_comma(Packages,Comma),
    MESG0 = [info(string#"Working Packages = ~t",[Comma])|MESG].
otherwise.
wp_2(_,VP0,VP,MESG0,MESG,Done) :- true |
    VP0 = VP,
    command_error(working_packages,working_packages,MESG0,MESG),
    Done = done.

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % warning message to old command %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

command_v25(assemble_mode,MESG0,MESG) :- true |
    MESG0 = [info(string#"!ERROR! type ""!set compile:assemble_mode"" (command updated)",[])|
            MESG].
command_v25(profile,MESG0,MESG) :- true |
    MESG0 = [info(string#"!ERROR! type ""!set compile:profile"" (command updated)",[])|
            MESG].
command_v25(indexing,MESG0,MESG) :- true |
    MESG0 = [info(string#"!ERROR! type ""!set compile:indexing"" (command updated)",[])|MESG].

    %%%%%%%%%%
    % COERCE %
    %%%%%%%%%%

coerce(In,Out) :- true |
    compile_command_parser:coerce(In,Out).
coerce(In,Mode,VP0,VP,Status) :- true |
    compile_command_parser:coerce(In,Mode,VP0,VP,Status).

coerce_all(In,Mode,VP0,VP,Status) :- true |
    compile_command_parser:coerce_all(In,Mode,VP0,VP,Status).

check_mem(List0,atom,Status) :- true |
    check_mem_atom(List0,List1,Status0),
    set_status(Status0,List1,Status).
check_mem(List0,module,Status) :- true |
    check_mem_mod(List0,List1,Status0),
    set_status(Status0,List1,Status).

check_mem_atom([Atom|Rest],List0,Status) :- atom(Atom) |
    List0 = [Atom|List1],
    check_mem_atom(Rest,List1,Status).
check_mem_atom([],List0,Status) :- true |
    List0 = [],
    Status = normal.
otherwise.
check_mem_atom(_,List0,Status) :- true |
    List0 = [],
    Status = abnormal.

check_mem_mod([Mod|Rest],List0,Status) :- atom(Mod) |
    List0 = [Mod|List1],
    check_mem_mod(Rest,List1,Status).
check_mem_mod([ModSpec|Rest],List0,Status) :-
    ModSpec = {(::),Package,Module}, 
    atom(Package), atom(Module) |
    List0 = [ModSpec|List1],
    check_mem_mod(Rest,List1,Status).
check_mem_mod([],List0,Status) :- true |
    List0 = [],
    Status = normal.
otherwise.
check_mem_mod(_,List0,Status) :- true |
    List0 = [],
    Status = abnormal.

set_status(normal,List,Status) :- true | Status = normal(List).
otherwise.
set_status(_,List,Status) :- true | Status = abnormal.

    %%%%%%%%%%%%%%%%%%%%%%%%%%
    % COMMAND ARGUMENT ERROR %
    %%%%%%%%%%%%%%%%%%%%%%%%%%

command_error(Command,Help,MESG0,MESG) :- true |
    MESG0 = [message("!ERROR! illegal command argument",[])|MESG1],
    kl1_compile_help:item(Help,MESG1,MESG).
