%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1992 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%
%%%%%  File   :: bnum_util.kl1
%%%%%  Module :: bnum_util
%%%%%
%%%%%  MACHINE DEPENDENT CODES  (low level bignum routines)
%%%%%
%%%%%       Methods listed below are implemented to keep compatibility 
%%%%%       between various types/versions of PIM/PIMOS.
%%%%%         - add_ext(Xword,Yword,^C,^Zword)   Equivalent to 'add_extended/4'
%%%%%         - sub_ext(Xword,Yword,^B,^Zword)   Equivalent to 'subtract_extended/4'
%%%%%         - mul_ext(Xword,Yword,^C,^Zword)   Equivalent to 'multiply_extended/4'
%%%%%         - div_ext(Xh,Xl,Yword,^Qout,^Rout) Equivalent to 'divide_extended/5'
%%%%%         - add_bnum(Xstr,Ystr,^Zout)      Equivalent to 'add_bignum/3'
%%%%%         - sub_bnum(Xstr,Ystr,^B,^Zout)   Equivalent to 'subtract_bignum/4'
%%%%%         - mul_word(Xstr,Word,^Zout)      Equivalent to 'multiply_bignum_by_word/3'
%%%%%

:- module     bnum_util.
:- with_macro pimos.

:- public
    add_ext/4,
    sub_ext/4,
    mul_ext/4,
    div_ext/5,
    add_bnum/3,
    sub_bnum/4,
    mul_word/3.


%%%
%%%  ADD
%%%
%%  add_ext(Xin,Yin,^Carry,^Zout)  Equivalent to add_extended/4
add_ext(Xin,0,Carry,Zout) :- integer(Xin) | Carry= 0, Zout= Xin.
add_ext(0,Yin,Carry,Zout) :- integer(Yin) | Carry= 0, Zout= Yin.
otherwise.
add_ext(Xin,Yin,Carry,Zout) :- integer(Xin), integer(Yin) |
    XL := Xin/\16#"FFFF", XH := Xin>>16,  YL := Yin/\16#"FFFF", YH := Yin>>16,   ZL1 := XL+YL,
    ZL := ZL1/\16#"FFFF", CL := ZL1>>16, ZH1 := CL+XH+YH,
    Zout := ((ZH1/\16#"FFFF")<<16)\/ZL, Carry := ZH1>>16.
otherwise.
add_ext(Xin,Yin, C,Z) :- true | shoen:raise(pimos_tag#error,
    '$PIMOS$'(illegal_input, "Arguments must be integer"), bnum_util:add_ext(Xin,Yin,C,Z) ).


%%    add_bnum/3  := equivalent to add_bignum/3
add_bnum(Xin,Yin,Zout) :- string(Xin,XL,_), string(Yin,YL,_) | add_bnum(XL,YL,Xin,Yin,Zout).
otherwise.
add_bnum(Xin,Yin,Zout) :- true | shoen:raise(pimos_tag#error,
    '$PIMOS$'(illegal_input, "Arguments must be 32bit string"), bnum_util:add_bnum(Xin,Yin,Zout) ).

add_bnum(XL,YL,Xin,Yin,Zout) :- XL>=YL | new_string(Zin,XL,32), add_bnum(YL,XL,Yin,Xin,0,Zin,Zout).
add_bnum(XL,YL,Xin,Yin,Zout) :- XL< YL | new_string(Zin,YL,32), add_bnum(XL,YL,Xin,Yin,0,Zin,Zout).

add_bnum(0, 0, _,  _,  0,  Zin,Zout) :- true | Zout= Zin.
add_bnum(0, YL,_,  Yin,0,  Zin,Zout) :- YL  =\= 0 | builtin#copy_string_elements(Zin,0,YL,Yin,0,Zout,_).
add_bnum(0, YL,_,  Yin,Cin,Zin,Zout) :- Cin =\= 0 | add_carry(Cin,YL,Yin,Zin,Zout).
add_bnum(XL,YL,Xin,Yin,Cin,Zin,Zout) :- XL  =\= 0 | XP := XL-1, YP := YL-1,
    string_element(Xin,XP,Xele,Xin1),      string_element(Yin,YP,Yele,Yin1),
    mdlib#add_extended(Xele,Yele,C0,S),    mdlib#add_extended(S,Cin,C1,Zele), Cnew := C0+C1,
    set_string_element(Zin,YP,Zele,Zin1),  add_bnum(XP,YP,Xin1,Yin1,Cnew,Zin1,Zout).

%% add_carry(Carry,Pos,String,Out,^OutNew)  Carry propagation to higher words
add_carry(0,0, _,  Zin,Zout) :- true | Zout= Zin.
add_carry(0,YL,Yin,Zin,Zout) :- YL =\= 0 | builtin#copy_string_elements(Zin,0,YL,Yin,0,Zout,_).
add_carry(C,0, Yin,Zin,Zout) :- C  =\= 0, string(Zin,ZL,_) | ZL1 := ZL+1, new_string(Z,ZL1,32),
    set_string_element(Z,0,C,Zstr), builtin#copy_string_elements(Zstr,1,ZL,Zin,0,Zout,_).
add_carry(C,YL,Yin,Zin,Zout) :- C =\= 0, YL =\= 0 | YP := YL-1,
    string_element(Yin,YP,Ele,Yin1),   mdlib#add_extended(Ele,C,C1,Z), 
    set_string_element(Zin,YP,Z,Zin1), add_carry(C1,YP,Yin1,Zin1,Zout).
%%% 
%%% SUBTRACT
%%% 
%% sub_ext(Xin,Yin,BF,Zout)   Subtract 2 unsigned integer (Equivalent to subtract_extended/4)
%%    Xin, Yin        ::= 32bit unsigned integer    BF(borrow flag) ::= 1 (Yin>Xin) | 0 (Xin>Yin) 
%%    Zout            ::= absolute value when BF=0, 2's complement when BF= 1
sub_ext(Xin,Xin,BF,Z) :- integer(Xin) | BF= 0, Z= 0.
sub_ext(Xin,0,  BF,Z) :- integer(Xin) | BF= 0, Z= Xin.
sub_ext(0,  Yin,BF,Z) :- Yin =\= 16#"80000000" | BF= 1, Z := -Yin .
sub_ext(0,  Yin,BF,Z) :- Yin =:= 16#"80000000" | BF= 1, Z= 16#"80000000" .
otherwise.
sub_ext(Xin,Yin,BF,Z) :- Xin<0,Yin>0 | BF=0, Y := -Yin, mdlib#add_extended(Xin,Y,_,Z).
sub_ext(Xin,Yin,BF,Z) :- Xin>0,Yin<0,Yin =\= 16#"80000000"|BF=1, Y := -Yin,mdlib#add_extended(Xin,Y,_,Z).
sub_ext(Xin,Yin,BF,Z) :- Xin>0, Yin =:= 16#"80000000" | BF=1, mdlib#add_extended(Xin,Yin,_,Z).
otherwise.
sub_ext(Xin,Yin,BF,Z) :- Xin>Yin | BF=0, Z := Xin-Yin.
sub_ext(Xin,Yin,BF,Z) :- Xin<Yin | BF=1, Z := Xin-Yin.
otherwise.
sub_ext(Xin,Yin, B,Z) :- true | shoen:raise(pimos_tag#error,
    '$PIMOS$'(illegal_input, "Arguments must be integer"), bnum_util:sub_ext(Xin,Yin,B,Z) ).


%%    sub_bnum/4 := equivalent to subtract_bignum/4
sub_bnum(Xin,Yin,SZ,Zout) :- mdlib#bignum_less_than(Yin,Xin), string(Xin,XL,_), string(Yin,YL,_) | 
    SZ= 0, new_string(Zin,XL,32), sub_bnum(XL,YL,Xin,Yin,0,Zin,Zout).
sub_bnum(Xin,Yin,SZ,Zout) :- mdlib#bignum_less_than(Xin,Yin), string(Xin,XL,_), string(Yin,YL,_) | 
    SZ= 1, new_string(Zin,YL,32), sub_bnum(YL,XL,Yin,Xin,0,Zin,Zout).
sub_bnum(Xin,Yin,SZ,Zout) :- Xin=Yin | SZ= 0, new_string(Zout,0,32).
otherwise.
sub_bnum(Xin,Yin,SZ,Zout) :- true | shoen:raise(pimos_tag#error,
    '$PIMOS$'(illegal_input, "Arguments must be 32bit string"), bnum_util:sub_bnum(Xin,Yin,SZ,Zout) ).

sub_bnum(0, 0, _,  _,  0,Zin,Zout) :- string(Zin,ZL,_) | 
    string_element(Zin,0,Z,Zin1), zero_suppress(Z,1,ZL,Zin,Zout).
sub_bnum(XL,0, Xin,_,  0,Zin,Zout) :- XL =\= 0 | builtin#copy_string_elements(Zin,0,XL,Xin,0,Zout,_).
sub_bnum(XL,0, Xin,_,  1,Zin,Zout) :- XL =\= 0 | XP := XL-1,
    string_element(Xin,XP,Xele,Xin1), sub_borrow(Xele,XP,Xin,Zin,Zout).
sub_bnum(XL,YL,Xin,Yin,B,Zin,Zout) :- YL =\= 0 | XP := XL-1, YP := YL-1,
    string_element(Xin,XP,Xele,Xin1),   string_element(Yin,YP,Yele,Yin1),
    mdlib#add_extended(Yele,B,B1,YB),   mdlib#subtract_extended(Xele,YB,B2,Z),  Bnew := (B1\/B2),
    set_string_element(Zin,XP,Z,Zin1),  sub_bnum(XP,YP,Xin1,Yin1,Bnew,Zin1,Zout).

sub_borrow(0,XP,Xin,Zin,Zout) :- true | set_string_element(Zin,XP,16#"FFFFFFFF",Zin1), 
    XP1 := XP-1, string_element(Xin,XP1,Xele,Xin1), sub_borrow(Xele,XP1,Xin1,Zin1,Zout).
sub_borrow(1,0, _,  Zin,Zout) :- string(Zin,ZL,_) | zero_suppress(0,1,ZL,Zin,Zout).
otherwise.
sub_borrow(X,0, Xin,Zin,Zout) :- true| mdlib#subtract_extended(X,1,_,Z),set_string_element(Zin,0,Z,Zout).
otherwise.
sub_borrow(X,XP,Xin,Zin,Zout) :- true| mdlib#subtract_extended(X,1,_,Z),
    set_string_element(Zin,XP,Z,Zin1), builtin#copy_string_elements(Zin1,0,XP,Xin,0,Zout,_).

%% zero_suppress(Ele,Pt,Len,Xin,^Xout)   Leading zero suppression
zero_suppress(0,Pt,ZL,_,Zout) :- Pt>=ZL  | new_string(Zout,0,32).
zero_suppress(Z,1,_,Zin,Zout) :- Z =\= 0 | Zout= Zin.
otherwise.
zero_suppress(0,Pt,ZL,Zin,Zout) :- Pt<ZL | 
    string_element(Zin,Pt,Z,Zin1), builtin:add(1,Pt,Pt1), zero_suppress(Z,Pt1,ZL,Zin1,Zout).
zero_suppress(Z,Pt,ZL,Zin,Zout) :- Z =\= 0 | 
    builtin:add(-1,Pt,Pt1), builtin:subtract(ZL,Pt1,Len), builtin#substring(Zin,Pt1,Len,Zout,_).
%%%
%%%  MULTIPLY
%%%
mul_ext(0,  Yin,Cout,Zout) :- integer(Yin) | Cout= 0, Zout= 0.
mul_ext(Xin,0,  Cout,Zout) :- integer(Xin) | Cout= 0, Zout= 0.
otherwise.
mul_ext(1,  Yin,Cout,Zout) :- integer(Yin) | Cout= 0, Zout= Yin.
mul_ext(Xin,1,  Cout,Zout) :- integer(Xin) | Cout= 0, Zout= Xin.
otherwise.
mul_ext(Xin,Yin,Cout,Zout) :- integer(Xin), integer(Yin) |
    XH := Xin>>16, XL := Xin/\16#"FFFF",  YH := Yin>>16, YL := Yin/\16#"FFFF",
    mul32_16(XH,XL,YL,CL,ZL1,Z0),  mul32_16(XH,XL,YH,CH,ZH1,ZH0),  
    LH0 := ZL1+ZH0,   Z1 := LH0/\16#"FFFF", C1 := LH0>>16,
    HL0 := C1+CL+ZH1, Z2 := HL0/\16#"FFFF", C2 := HL0>>16,  
    Cout := ((C2+CH)<<16)\/Z2,  Zout := (Z1<<16)\/Z0.
otherwise.
mul_ext(Xin,Yin,Cout,Zout) :- true | shoen:raise(pimos_tag#error,
    '$PIMOS$'(illegal_input, "Arguments must be integer"), bnum_util:mul_ext(Xin,Yin,Cout,Zout) ).

mul32_16(XH,XL,0,ZH,ZM,ZL) :- true | ZH=0, ZM= 0,  ZL= 0.
mul32_16(XH,XL,1,ZH,ZM,ZL) :- true | ZH=0, ZM= XH, ZL= XL.
otherwise.
mul32_16(XH,XL,Y,ZH,ZM,ZL) :- true | 
    YH := Y>>8, YL := Y/\16#"FF", YY := YH+YL,
    mul16(XL,YH,YL,YY,CL,ZL), mul16(XH,YH,YL,YY,H,M), 
    MM := M+CL, ZM := MM/\16#"FFFF", CM := MM>>16, ZH := H+CM.
    

mul16(X,YH,YL,YY,C,Z):- true |
    shift_right(X,8,XH), and(X,16#"FF",XL),   add(XL,XH,XX),
    multiply(XL,YL,LL),  multiply(XH,YH,HH),  multiply(XX,YY,XY),
    subtract(XY,HH,UU),  subtract(UU,LL,MM),  shift_left(MM,8,MM1),  
    add(MM1,LL,ZL),      and(ZL,16#"FFFF",Z), shift_right(ZL,16,CL), add(CL,HH,C).


%%  mul_word(Xstr,Y,^Zout)   Multiply bignum by word
%%    Xstr,Zout ::= 32bit string,  Y ::= 32bit unsigned integer
mul_word(Xin,_,Zout) :- string(Xin,0,32) | Zout= Xin.
otherwise.
mul_word(Xin,0,Zout) :- string(Xin,_,32) | new_string(Zout,0,32).
mul_word(Xin,1,Zout) :- string(Xin,_,32) | Zout= Xin.
otherwise.
mul_word(Xin,Y,Zout) :- string(Xin,XL,_), integer(Y) | 
    ZL := XL+1, new_string(Zin,ZL,32), mul_word_sub(XL,Xin,Y,0,Zin,Zout).
otherwise.
mul_word(Xin,Y,Zout) :- true | shoen:raise(pimos_tag#error, '$PIMOS$'(illegal_input, 
    "Arguments must be 32bit string and integer"), bnum_util:mul_word(Xin,Y,Zout) ).


% mul_word_sub(Xpt,Xin,Y,C,Accum,^Zout)
mul_word_sub(0, Xin,_,0,Accum,Zout) :- string(Xin,XL,_) | builtin#substring(Accum,1,XL,Zout,_).
mul_word_sub(0, Xin,_,C,Accum,Zout) :- C  =\= 0 | set_string_element(Accum,0,C,Zout).
mul_word_sub(Pt,Xin,Y,C,Accum,Zout) :- Pt =\= 0 | Pt1 := Pt-1,
    string_element(Xin,Pt1,X,Xin1),
    mdlib#multiply_extended(X,Y,C0,M), mdlib#add_extended(M,C,C1,Z), mdlib#add_extended(C0,C1,_,Cout), 
    set_string_element(Accum,Pt,Z,Accum1),  mul_word_sub(Pt1,Xin1,Y,Cout,Accum1,Zout).

%%%
%%%  DIVIDE
%%%
%% div_ext(Xhigh,Xlow,Yin,Qout,Rout)   Qout= (Xhigh,Xlow)/Yin, Rout= (Xhigh,Xlow) mod Yin
%%    Xhigh, Xlow, Yin,Qout,Rout  ::= 32bit unsigned integer
%%    NOTE :: Qout must be less than 16#"FFFFFFFF", else error (integer overflow)
div_ext(XH,XL,0,Q,R) :- true | shoen:raise(pimos_tag#error,
    '$PIMOS$'(integer_zero_division, "Zero division := occured"), bnum_util:div_ext(XH,XL,0,Q,R) ).
otherwise.
div_ext(XH,XL,Y,Q,R) :- XH< 0, Y>0, integer(XL) | shoen:raise(pimos_tag#error,
    '$PIMOS$'(integer_overflow, "Quotient exceeds a word"), bnum_util:div_ext(XH,XL,Y,Q,R) ).
div_ext(XH,XL,Y,Q,R) :- XH>=0, Y<0, integer(XL) |
    shift_num(Y,SN,YY), shift32(XH,XL,SN,XH1,XL1), divEXT(XH1,XL1,YY,Q,RR), R := RR>>SN.
otherwise.
div_ext(XH,XL,Y,Q,R) :- XH< Y, integer(XL) | 
    shift_num(Y,SN,YY), shift32(XH,XL,SN,XH1,XL1), divEXT(XH1,XL1,YY,Q,RR), R := RR>>SN.
div_ext(XH,XL,Y,Q,R) :- XH>=Y, integer(XL) | shoen:raise(pimos_tag#error,
    '$PIMOS$'(integer_overflow, "Quotient exceeds a word"), bnum_util:div_ext(XH,XL,Y,Q,R) ).
otherwise.
div_ext(XH,XL,Y,Q,R) :- true | shoen:raise(pimos_tag#error,
    '$PIMOS$'(illegal_input, "Arguments must be integer"), bnum_util:div_ext(XH,XL,Y,Q,R) ).

divEXT(XH,XL,Y,Qout,Rout) :- true |
    X0 := XH>>16, X1 := XH/\16#"FFFF", X2 := XL>>16, X3 := XL/\16#"FFFF", 
    Y0 := Y>>16,  Y1 := Y/\16#"FFFF", Y8 := Y0>>8,
    div32(X0,X1,Y0,Y8,Q0), mdlib#multiply_extended(Y,Q0,M0,YQ0), M1 := YQ0>>16, M2 := YQ0/\16#"FFFF",
    quot_check(X0,X1,X2,M0,M1,M2,Y,Q0,QH,R0,R1),
    div32(R0,R1,Y0,Y8,Q1), mdlib#multiply_extended(Y,Q1,N0,YQ1), N1 := YQ1>>16, N2 := YQ1/\16#"FFFF",
    quot_check(R0,R1,X3,N0,N1,N2,Y,Q1,QL,RH,RL),
    Qout := (QH<<16)\/QL,   Rout := (RH<<16)\/RL.

quot_check(X0,X1,X2,M0,M1,M2,Y,Q0,QC,RH,RL) :- true |
    XL := (X1<<16)\/X2,  ML := (M1<<16)\/M2,
    mdlib#subtract_extended(XL,ML,B0,RRL), M00 := M0+B0, mdlib#subtract_extended(X0,M00,B,RRH),
    check_sub(B,RRH,RRL, X0,X1,X2,Y,Q0,QC,RH,RL).

check_sub(0,RRH,_, X0,X1,X2,Y,Q0,QC,RH,RL) :- RRH  =\= 0 | Q := Q0+1,
    mdlib#multiply_extended(Y,Q,M0,YQ), M1 := YQ>>16, M2 := YQ/\16#"FFFF",
    quot_check(X0,X1,X2,M0,M1,M2,Y,Q,QC,RH,RL).
check_sub(0,0,  RRL, X0,X1,X2,Y,Q0,QC,RH,RL) :- true | QC= Q0, RH := RRL>>16, RL := RRL/\16#"FFFF".
check_sub(1,_,_, X0,X1,X2,Y,Q0,QC,RH,RL) :- true | Q := Q0-1,
    mdlib#multiply_extended(Y,Q,M0,YQ), M1 := YQ>>16, M2 := YQ/\16#"FFFF",
    quot_check(X0,X1,X2,M0,M1,M2,Y,Q,QC,RH,RL).

div32(XH,XL,Y,YH,Qout) :- XH<  16#"800" | X := (XH<<16)+XL, Q := X/Y, qchk32(Q,Qout).
div32(XH,XL,Y,YH,Qout) :- XH>= 16#"800" | 
    Q1 := XH/YH,  QH := Q1<<8,  QL := (((XH<<8)-(Y*Q1))<<8+XL)/Y, Q := QH+QL, qchk32(Q,Qout).

qchk32(Q,Quot) :- Q<  16#"10000" | Quot= Q .
qchk32(Q,Quot) :- Q>= 16#"10000" | Quot= 16#"FFFF" .

shift_num(Xin,SN,Xout) :- Xin<0 | SN= 0, Xout= Xin.
shift_num(Xin,SN,Xout) :- Xin>0 | X1 := Xin<<1, shift_num1(X1,1,SN,Xout).

shift_num1(Xin,Sn,SN,Xout) :- Xin<0 | SN= Sn, Xout= Xin.
shift_num1(Xin,Sn,SN,Xout) :- Xin>0 | X1 := Xin<<1, builtin:add(1,Sn,Sn1), shift_num1(X1,Sn1,SN,Xout).

shift32(XH,XL,0, XH1,XL1) :- true | XH1= XH, XL1= XL.
shift32(XH,XL,SN,XH1,XL1) :- SN =\= 0 |
    mask(SN,M), CSN := 32-SN, XL1 := XL<<SN, XH1 := (XH<<SN)\/((XL/\M)>>CSN).

mask( 0,Mask) :- true | Mask= 16#"00000000".    mask( 1,Mask) :- true | Mask= 16#"80000000".
mask( 2,Mask) :- true | Mask= 16#"C0000000".    mask( 3,Mask) :- true | Mask= 16#"E0000000".
mask( 4,Mask) :- true | Mask= 16#"F0000000".    mask( 5,Mask) :- true | Mask= 16#"F8000000".
mask( 6,Mask) :- true | Mask= 16#"FC000000".    mask( 7,Mask) :- true | Mask= 16#"FE000000".
mask( 8,Mask) :- true | Mask= 16#"FF000000".    mask( 9,Mask) :- true | Mask= 16#"FF800000".
mask(10,Mask) :- true | Mask= 16#"FFC00000".    mask(11,Mask) :- true | Mask= 16#"FFE00000".
mask(12,Mask) :- true | Mask= 16#"FFF00000".    mask(13,Mask) :- true | Mask= 16#"FFF80000".
mask(14,Mask) :- true | Mask= 16#"FFFC0000".    mask(15,Mask) :- true | Mask= 16#"FFFE0000".
mask(16,Mask) :- true | Mask= 16#"FFFF0000".    mask(17,Mask) :- true | Mask= 16#"FFFF8000".
mask(18,Mask) :- true | Mask= 16#"FFFFC000".    mask(19,Mask) :- true | Mask= 16#"FFFFE000".
mask(20,Mask) :- true | Mask= 16#"FFFFF000".    mask(21,Mask) :- true | Mask= 16#"FFFFF800".
mask(22,Mask) :- true | Mask= 16#"FFFFFC00".    mask(23,Mask) :- true | Mask= 16#"FFFFFE00".
mask(24,Mask) :- true | Mask= 16#"FFFFFF00".    mask(25,Mask) :- true | Mask= 16#"FFFFFF80".
mask(26,Mask) :- true | Mask= 16#"FFFFFFC0".    mask(27,Mask) :- true | Mask= 16#"FFFFFFE0".
mask(28,Mask) :- true | Mask= 16#"FFFFFFF0".    mask(29,Mask) :- true | Mask= 16#"FFFFFFF8".
mask(30,Mask) :- true | Mask= 16#"FFFFFFFC".    mask(31,Mask) :- true | Mask= 16#"FFFFFFFE".

