%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1994 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- module ioutls_usage.
:- with_macro pimos.
:- public buffer/1,
        input_filter/1,output_filter/1,interaction_filter/1,character_pool/1,
        operator/1,variable/1.

variable(L) :- true |
        F="~s~n",
        usage_line(F,L,L0),
        L0=[
        {F,["Wrap-----------"]},
        {F,["  variable:wrap(Term,^Result,D,L)"]},
        {F,["  variable:wrap(Term,^Result,D,L,NVP)"]},
        {F,["  variable:wrap(Term,^Result,D,L,^VP,NVP)"]},
        {F,["  variable:wrap_address(Term,^Result,D,L)"]},
        {F,["       Result={NewTerm,WrappedTerm}"]},
        {F,["Unwrap---------"]},
        {F,["  variable:unwrap(WrappedTerm,^Result)"]},
        {F,["  variable:unwrap(WrappedTerm,^Result,NVP)"]},
        {F,["  variable:unwrap(WrappedTerm,^Result,^VP,NVP)"]},
        {F,["       Result={NewWrappedTerm,Term}"]},
        {F,["Variable_pool--"]},
        {F,["  variable:pool2(In*)"]}|L1],
        msgs_line(F,L1,L2),
        msgs_var_pool(F,L2,[]).

buffer(L) :- true |
        F="~s~n",
        usage_line(F,L,L0),
        L0=[
        {F,["  usage(input_filter)"]},
        {F,["  usage(output_filter)"]},
        {F,["  usage(interaction_filter)"]},
        {"~s",  ["  usage(character_pool)"]}
        ].

input_filter(L) :- true |
        F="~s~n",
        usage_line(F,L,L0),
        L0=[
        {F,["  buffer:input_filter(In*,^Out)"]},
        {F,["  buffer:input_filter(Init,In*,^Out)"]}|L1],
        init_list(F,L1,L2),
        msgs_line(F,L2,L3),
        msgs_input(F,L3,L4),
        msgs_control(F,L4,L5),
        msgs_op_pool_for_filter(F,L5,L6),
        msgs_abort(F,L6,[]).

output_filter(L) :- true |
        F="~s~n",
        usage_line(F,L,L0),
        L0=[
        {F,["  buffer:output_filter(In*,^Out)"]},
        {F,["  buffer:output_filter(Init,In*,^Out)"]}|L1],
        init_list(F,L1,L2),
        msgs_line(F,L2,L3),
        msgs_output(F,L3,L4),
        msgs_print_env(F,L4,L5),
        msgs_control(F,L5,L6),
        msgs_op_pool_for_filter(F,L6,L7),
        msgs_abort(F,L7,[]).

interaction_filter(L) :- true |
        F="~s~n",
        usage_line(F,L,L0),
        L0=[
        {F,["  buffer:interaction_filter(In*,^Out)"]},
        {F,["  buffer:interaction_filter(Init,In*,^Out)"]}|L1],
        init_list(F,L1,L2),
        msgs_line(F,L2,L3),
        msgs_input(F,L3,L4),
        msgs_output(F,L4,L5),
        msgs_print_env(F,L5,L6),
        msgs_control(F,L6,L7),
        msgs_op_pool_for_filter(F,L7,L8),
        msgs_abort(F,L8,[]).

character_pool(L) :- true |
        F="~s~n",
        usage_line(F,L,L0),
        L0=[
        {F,["  buffer:character_pool(In*)"]},
        {F,["  buffer:character_pool(Init,In*)"]}|L1],
        init_list(F,L1,L2),
        msgs_line(F,L2,L3),
        msgs_input(F,L3,L4),
        msgs_output(F,L4,L5),
        msgs_print_env(F,L5,L6),
        msgs_control(F,L6,L7),
        msgs_op_pool_for_filter(F,L7,[]).

init_list(F,L,L1) :- true |
        L=[
        {F,["      Init is list of:"]},
        {F,["          size(Size),"]},
        {F,["          atom_table(^AtomDev),"]},
        {F,["          operator_pool(^OpPool)."]},
        {F,["          portray(Portray), Portray=default ; {Cod,ArgV}."]}
        |L1].

operator(L) :- true |
        F="~s~n",
        usage_line(F,L,L0),
        L0=[
        {F,["  operator:pool(In*)"]},
        {F,["  operator:pool(Init,In*)"]},
        {F,["  operator:empty_pool(In*)"]},
        {F,["  operator:empty_pool(Init,In*)"]}|L1],
        msgs_line(F,L1,L2),
        msgs_op_pool(F,L2,[]).


msgs_input(F,L,L1) :- true |
        L=[
        {F,["Input-------"]},
        {F,["  getc(^C)"]},
        {F,["  getl(^String)"]},
        {F,["  getb(Size,^String)"]},
        {F,["  getwt(^Result)     , Result=normal(WT);"]},
        {F,["         normal(end_of_file);abnormal(ErrorInfo)"]},
        {F,["  gett(^Term)"]},
        {F,["  gett(^Term,NVP)             VP: variable_pool"]},
        {F,["  gett(^Term,^VP,NVP)"]},
        {F,["  skip(C)"]},
        {F,["  ungetc(C)"]},
        {F,["  prompt(String)"]}
        |L1].
%                   getft(^Term,^N)        old
%                   prompt(String,Cnt)     not public
%                   mkflush(^Status)       not public

msgs_control(F,L,L1) :- true |
        L=[
        {F,["Control-----"]},
        {F,["  do(S*)"]},
        {F,["  replace_op_pool(OldOpPool,^NewOpPool)"]},
        {F,["  change_op_pool(^NewOpPool)"]},
        {F,["  change_portray(NewPortray)"]}
%        {F,["  replace_atom_table(OAtomDev,NAtomDev)   not public
%        {F,["  change_atom_table(NAtomDev)             not public
%        {F,["  changeBuffer(NBuf)                      not public
%        {F,["  replaceBuffer(OBuf,NBuf)                not public
%        {F,["  abandon_pool                            not public
        |L1].

msgs_op_pool_for_filter(F,L,L1) :- true |
        L=[{F,["Op_pool-----"]}|L0],
        msgs_op_pool(F,L0,L1).

msgs_op_pool(F,L,L1) :- true |
        L=[
        {F,["  add_op(Prec,Type,OpName)"]},
        {F,["  remove_op(Prec,Type,OpName)"]},
        {F,["  operator(OpName,^Def)"]}
%        {F,["  operator(^All)                          not public
        |L1].

msgs_var_pool(F,L,L1) :- true |
        L=[
        {F,["  count(^N)"]},
        {F,["  unify"]},
        {F,["  reset"]},
        {F,["  put_var(Name,?V)"]},
        {F,["  get_name({PE,Address},^Result)"]},
        {F,["  get_value(Name,^Value)"]}
        |L1].

msgs_abort(F,L,L1) :- true |
        L=[
        {F,["Abort-------"]},
        {F,["  reset(^Result)"]},
        {F,["  resend(ID,^Status)"]},
        {F,["  cancel(ID,^Status)"]},
        {F,["  next_attention(^Result)"]}
        |L1].

msgs_output(F,L,L1) :- true |
        L=[
        {F,["Output------"]},
        {F,["  putc(C)"]},
        {F,["  putl(String)"]},
        {F,["  putb(String)"]},
        {F,["  putwt(WT)                   WT: wrapped_term"]},
        {F,["  putwt(WT,EnvList)           PD: print_depth"]},
        {F,["  putwt(WT,PD,PL)             PL: print_length"]},
        {F,["  putwt(WT,PD,PL,PSL)         PSL: print_string_length"]},
        {F,["  putwt(WT,PD,PL,PSL,PAL)     PAL: print_atom_length"]},
        {F,["  putwtq(WT)"]},
        {F,["  putwtq(WT,EnvList)"]},
        {F,["  putwtq(WT,PD,PL)"]},
        {F,["  putwtq(WT,PD,PL,PSL)"]},
        {F,["  putwtq(WT,PD,PL,PSL,PAL)"]},
        {F,["  putt(T)"]},
        {F,["  putt(T,EnvList)"]},
        {F,["  putt(T,PD,PL)"]},
        {F,["  putt(T,PD,PL,PSL)"]},
        {F,["  putt(T,PD,PL,PSL,PAL)"]},
        {F,["  puttq(T)"]},
        {F,["  puttq(T,EnvList)"]},
        {F,["  puttq(T,PD,PL)"]},
        {F,["  puttq(T,PD,PL,PSL)"]},
        {F,["  puttq(T,PD,PL,PSL,PAL)"]},
        {F,["  printt(T)"]},
        {F,["  printt(T,EnvList)"]},
        {F,["  printt(T,PD,PL)"]},
        {F,["  printt(T,PD,PL,PSL)"]},
        {F,["  printt(T,PD,PL,PSL,PAL)"]},
        {F,["  printwt(WT)"]},
        {F,["  printwt(WT,EnvList)"]},
        {F,["  printwt(WT,PD,PL)"]},
        {F,["  printwt(WT,PD,PL,PSL)"]},
        {F,["  printwt(WT,PD,PL,PSL,PAL)"]},
        {F,["  nl"]},
        {F,["  tab(N)"]},
        {F,["  putf(FormatString,ArgList)"]},
        {F,["  print_error(ErrorInfo)"]},
        {F,["  flush(^Status)"]}
%print_text(Info)
%flush
%mkflush(Status)
%putft(T)
%putft(T,PD,PL)
%putft(T,PD,PL,PSL)
%putft(T,PD,PL,PSL,PAL)
%putftq(T)
%putftq(T,PD,PL)
%putftq(T,PD,PL,PSL)
%putftq(T,PD,PL,PSL,PAL)
        |L1].

msgs_print_env(F,L,L1) :- true |
        L=[
        {F,["PrintEnv----"]},
        {F,["  print_depth(PD)"]},
        {F,["  print_depth(^OldPD,NewPD)"]},
        {F,["  print_length(PL)"]},
        {F,["  print_length(^OldPL,NewPL)"]},
        {F,["  print_string_length(PSL)"]},
        {F,["  print_string_length(^OldPSL,NewPSL)"]},
        {F,["  print_atom_length(PAL)"]},
        {F,["  print_atom_length(^OldPAL,NewPAL)"]},
        {F,["  print_integer_radix(PIR)"]},
        {F,["  print_integer_radix(^OldPIR,NewPIR)"]}
        |L1].

usage_line(F,L,L1) :- true | L=[{F,["Usage :"]}|L1].
msgs_line(F,L,L1) :- true | L=[{F,["Messages :"]}|L1].
