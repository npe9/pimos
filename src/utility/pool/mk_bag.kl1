%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1992 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:- module multiply_keyed_bag.
:- include("pimos.h").
:- with_macro pimos.
:- public multiply_keyed_bag/3,usage/1.

usage(L) :- true |
        pool_usage:multiply_keyed_bag(L).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% multiply_keyed_bag(Fmt,Init,In)
%%      Fmt     :: Data format
%%      Init    :: Information for initialization
%%      In      :: Input stream from users

multiply_keyed_bag(Fmt,Init,In) :- true |
        init_datafile(Init,D,N,P,PR),
        init_indexes(Fmt,N,Ni,Li,Vi,DS),
        merge(In,In1),
        multiply_keyed_bag([],In1,Li,Vi,D,DS,0,N,0,P,PR,Ni).

init_datafile(Init,D,N,P,PR) :- true |
        get_param(Init,N,PR),
        get_packing_size(N,PR,P),
        get_datafile(D,N).

get_param(Init,N,PR) :- true | get_param(Init,1,N,50,PR).

get_packing_size(N,PR,P) :- P0:=N*PR/100,P0>0 | P=P0.
get_packing_size(N,PR,P) :- P0:=N*PR/100,P0=:=0 | P=1.

get_datafile(D,N) :- wait(N) | new_vector(D,N).

get_param(N,_,N1,P,P1) :- N>0 | N=N1,P=P1.
get_param([size(N)|Init],_,N1,P,P1) :- N>0 |
        get_param(Init,N,N1,P,P1).
:- switch(floating_point).
:- case(yes).
get_param([packing_ratio(Q)|Init],N,N1,_,P1) :- 0.0$<Q,Q$=<1.0 |
        Q1:=int(Q*100.0),
        get_param(Init,N,N1,Q1,P1).
:- end_switch.
get_param([],N,N1,P,P1) :- true | N=N1,P=P1.
otherwise.
get_param([P|_],_,_,_,_) :- true |
        raise_error(init_param,P).
otherwise.
get_param(Init,_,_,_,_) :- true |
        raise_error(init_param,Init).

init_indexes(Fmt,N,Ni,Li,Vi,DS) :- vector(Fmt,DS0),DS0>0 |
        DS:=DS0,
        new_vector(Vi0,DS),
        pool:keyed_set(Ni0),
        init_indexes(Fmt,N,Ni0,Ni,Li,Vi0,Vi,0,DS).
otherwise.
init_indexes(Fmt,_,_,_,_,_) :- true |
        raise_error(init_data_fmt,Fmt).

init_indexes(Fmt,N,Ni,Ni1,L,V,V1,I,DS) :- I<DS |
        set_vector_element(Fmt,I,E,0,Fmt1),
        set_vector_element(V,I,_,Index,V0),
        if_generate_index(E,N,I,Ni,Ni0,L,L1,Index),
        init_indexes(Fmt1,N,Ni0,Ni1,L1,V0,V1,~(I+1),DS).
init_indexes(_,_,Ni,Ni1,L,V,V1,DS,DS) :- true |
        Ni=Ni1,L=[],V=V1.

if_generate_index(Name,_,I,Ni,Ni1,L,L1,Index) :- atom(Name) |
        Ni=[put(Name,I,Old)|Ni1],
        if_succeeded(Name,Old),
        Index=0,L=L1.
if_generate_index({Name,Type},N,I,Ni,Ni1,L,L1,Index) :- atom(Name) |
        Ni=[put(Name,I,Old)|Ni1],
        if_succeeded(Name,Old),
        generate_index(Type,Index,[],N,I,L,L1).
if_generate_index({Name,Type,Init},N,I,Ni,Ni1,L,L1,Index) :- atom(Name) |
        Ni=[put(Name,I,Old)|Ni1],
        if_succeeded(Name,Old),
        generate_index(Type,Index,Init,N,I,L,L1).
otherwise.
if_generate_index(Name,_,_,Ni,Ni1,_,_,_) :- true |
        Ni=Ni1,
        raise_error(attr_name,Name).

if_succeeded(_,{}) :- true | true.
otherwise.
if_succeeded(Name,_) :- true |
        raise_error(double_attr_name,Name).

generate_index(ordered,Index,Init,_,I,L,L1) :- true |
        L=[I|L1],
        ordered_index(Init,Index,ascending).
generate_index(hashed,Index,Init,N,I,L,L1) :- true |
        L=[I|L1],
        hashed_index(Init,Index,default,ascending,N).
generate_index(none,Index,Init,_,_,L,L1) :- true |
        L=L1,
        no_index(Init,Index,ascending).
otherwise.
generate_index(Type,_,_,_,_,_,_) :- true |
        raise_error(index_type,Type).

ordered_index([comparator(Comp)|Init],Index,_) :- code(Comp,5,_,_) |
        ordered_index(Init,Index,Comp).
ordered_index([comparator(ascending)|Init],Index,_) :- true |
        ordered_index(Init,Index,ascending).
ordered_index([comparator(descending)|Init],Index,_) :- true |
        ordered_index(Init,Index,descending).
ordered_index([],Index,Comp) :- true |
        Index={ordered,In,Comp},
        pool:keyed_sorted_bag(Comp,In).
otherwise.
ordered_index([P|_],_,_) :- true |
        raise_error(init_param(o),P).
otherwise.
ordered_index(Init,_,_) :- true |
        raise_error(init_param(o),Init).

hashed_index([index_size(N)|Init],Index,Hasher,Comp,_) :- N>0 |
        hashed_index(Init,Index,Hasher,Comp,N).
hashed_index([hasher(Hasher)|Init],Index,_,Comp,N) :- code(Hasher,3,_,_) |
        hashed_index(Init,Index,Hasher,Comp,N).
hashed_index([hasher(default)|Init],Index,_,Comp,N) :- true |
        hashed_index(Init,Index,default,Comp,N).
hashed_index([comparator(Comp)|Init],Index,Hasher,_,N) :- code(Comp,5,_,_) |
        hashed_index(Init,Index,Hasher,Comp,N).
hashed_index([comparator(ascending)|Init],Index,Hasher,_,N) :- true |
        hashed_index(Init,Index,Hasher,ascending,N).
hashed_index([comparator(descending)|Init],Index,Hasher,_,N) :- true |
        hashed_index(Init,Index,Hasher,descending,N).
hashed_index([],Index,Hasher,Comp,N) :- true |
        Index={hashed,In,Comp},
        pool:keyed_bag(Hasher,In,N).
otherwise.
hashed_index([P|_],_,_,_,_) :- true |
        raise_error(init_param(h),P).
otherwise.
hashed_index(Init,_,_,_,_) :- true |
        raise_error(init_param(h),Init).

no_index([comparator(ascending)|Init],Index,_) :- true |
        no_index(Init,Index,ascending).
no_index([comparator(descending)|Init],Index,_) :- true |
        no_index(Init,Index,descending).
no_index([comparator(Comp)|Init],Index,_) :- code(Comp,5,_,_) |
        no_index(Init,Index,Comp).
no_index([],Index,Comp) :- true |
        Index=none(Comp).
otherwise.
no_index([P|_],_,_) :- true |
        raise_error(init_param(n),P).
otherwise.
no_index(Init,_,_) :- true |
        raise_error(init_param(n),Init).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% multiply_keyed_bag(DoBuf,In,Li,Vi,D,DS,I,N,J,P,PR,Ni)
%%      DoBuf   :: Do stream stack
%%      In      :: Input stream from users (merged)
%%      Li      :: List of the index pointers
%%      Vi      :: Output streams to the indexes (vector)
%%      D       :: Main data file (vector)
%%      DS      :: Data size
%%      I       :: Data count
%%      N       :: Main data file size
%%      J       :: Deleted data count
%%      P       :: Packing size
%%      PR      :: Packing ratio (floating)
%%                  (integer, 0<PR=<100: for pim_without_floating)
%%      Ni      :: Output stream to the index name table (pool:keyed_bag)

multiply_keyed_bag(Do,[empty(YorN)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        empty(~(I-J),YorN),
        multiply_keyed_bag(Do,In,Li,Vi,D,DS,I,N,J,P,PR,Ni).

multiply_keyed_bag(Do,[empty(C,YorN)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        empty(C,YorN,Ni,Ni1,Vi,Vi1,D,D1,I,DS,~(I-J)),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[put(X)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        put(Li,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,PR,X,DS,put,_),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I1,N1,J1,P1,PR,Ni).

multiply_keyed_bag(Do,[get(C,X)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        get(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,I1,J,J1,P,DS,X,get),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I1,N,J1,P,PR,Ni1).

multiply_keyed_bag(Do,[getp(C,F,X)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        get(C,Li,Ni,Ni0,Vi,Vi1,D,D1,I,I1,J,J1,P,DS,X0,getp(F1)),
        get_part(F,F1,X0,X,Ni0,Ni1,DS),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I1,N,J1,P,PR,Ni1).

multiply_keyed_bag(Do,[get_if_any(C,X)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        get_if_any(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,I1,J,J1,P,DS,X),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I1,N,J1,P,PR,Ni1).

multiply_keyed_bag(Do,[getp_if_any(C,F,X)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        get_if_any(C,Li,Ni,Ni0,Vi,Vi1,D,D1,I,I1,J,J1,P,DS,X0),
        get_part_if_any(F,X0,X,Ni0,Ni1,DS),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I1,N,J1,P,PR,Ni1).

multiply_keyed_bag(Do,[max_if_any(Attr,Key)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        max_if_any(Attr,Key,Vi,Vi1,D,D1,get_max_if_any,I,Ni,Ni1,DS),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[min_if_any(Attr,Key)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        max_if_any(Attr,Key,Vi,Vi1,D,D1,get_min_if_any,I,Ni,Ni1,DS),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[get_all(A)|In],Li,Vi,D,DS,I,N,_,P,PR,Ni) :- true |
        get_all(0,I,D,D1,A),
        clear_indexes(Li,Vi,Vi1),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,0,N,0,P,PR,Ni).

multiply_keyed_bag(Do,[getp_all(F,A)|In],Li,Vi,D,DS,I,N,_,P,PR,Ni) :- true |
        get_all(0,I,D,D1,A0),
        get_part_all(F,A0,A,Ni,Ni1,DS),
        clear_indexes(Li,Vi,Vi1),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,0,N,0,P,PR,Ni1).

multiply_keyed_bag(Do,[get_all(C,A)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        get_all2(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,I1,J,J1,P,DS,A),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I1,N,J1,P,PR,Ni1).

multiply_keyed_bag(Do,[getp_all(C,F,A)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        get_all2(C,Li,Ni,Ni0,Vi,Vi1,D,D1,I,I1,J,J1,P,DS,A0),
        get_part_all(F,A0,A,Ni0,Ni1,DS),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I1,N,J1,P,PR,Ni1).

multiply_keyed_bag(Do,[get_all(C,S,A)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        get_all3(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,I1,J,J1,P,DS,S,A),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I1,N,J1,P,PR,Ni1).

multiply_keyed_bag(Do,[getp_all(C,S,F,A)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        get_all3(C,Li,Ni,Ni0,Vi,Vi1,D,D1,I,I1,J,J1,P,DS,S,A0),
        get_part_all(F,A0,A,Ni0,Ni1,DS),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I1,N,J1,P,PR,Ni1).

multiply_keyed_bag(Do,[carbon_copy(A)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        carbon_copy(0,I,D,D1,A),
        multiply_keyed_bag(Do,In,Li,Vi,D1,DS,I,N,J,P,PR,Ni).

multiply_keyed_bag(Do,[carbon_copyp(F,A)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        carbon_copy(0,I,D,D1,A0),
        get_part_all(F,A0,A,Ni,Ni1,DS),
        multiply_keyed_bag(Do,In,Li,Vi,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[carbon_copy(C,A)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        carbon_copy2(C,A,Ni,Ni1,Vi,Vi1,D,D1,I,DS),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[carbon_copyp(C,F,A)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        carbon_copy2(C,A0,Ni,Ni0,Vi,Vi1,D,D1,I,DS),
        get_part_all(F,A0,A,Ni0,Ni1,DS),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[carbon_copy(C,S,A)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        carbon_copy3(C,A,Ni,Ni1,Vi,Vi1,D,D1,I,DS,S),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[carbon_copyp(C,S,F,A)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        carbon_copy3(C,A0,Ni,Ni0,Vi,Vi1,D,D1,I,DS,S),
        get_part_all(F,A0,A,Ni0,Ni1,DS),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[get_and_put(C,X,X1)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        get_and_put(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,DS,X,X1),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[getp_and_put(C,F,X,X1)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        getp_and_put(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,DS,F,X,X1),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[get_if_any_and_put(C,X,X1)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        get_if_any_and_put(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,PR,X,X1,DS),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I1,N1,J1,P1,PR,Ni1).

multiply_keyed_bag(Do,[get_and_put_if_any(C,X,X1,X2)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        get_and_put_if_any(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,DS,X,X1,X2),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[getp_and_put_if_any(C,F,X,X1,X2)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        getp_and_put_if_any(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,DS,F,X,X1,X2),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[pack|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        pack(Li,Vi,Vi1,D,D1,I),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,~(I-J),N,0,P,PR,Ni).

multiply_keyed_bag(Do,[do(List)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        merge(List,List1),
        multiply_keyed_bag([In|Do],List1,Li,Vi,D,DS,I,N,J,P,PR,Ni).

multiply_keyed_bag(Do,[get_and_put_all(C,Xs,Xs1)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        get_and_put_all(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,DS,Xs,Xs1),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[getp_and_put_all(C,F,Xs,Xs1)|In],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- true |
        getp_and_put_all(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,DS,F,Xs,Xs1),
        multiply_keyed_bag(Do,In,Li,Vi1,D1,DS,I,N,J,P,PR,Ni1).

multiply_keyed_bag(Do,[],Li,Vi,D,DS,I,N,J,P,PR,Ni) :- Do=[In|Do1] |
        multiply_keyed_bag(Do1,In,Li,Vi,D,DS,I,N,J,P,PR,Ni).
multiply_keyed_bag(Do,[],Li,Vi,_,_,_,_,_,_,_,Ni) :- Do=[] |
        Ni=[],
        terminate_indexes(Li,Vi).

otherwise.
multiply_keyed_bag(_,[Msg|_],Li,Vi,_,_,_,_,_,_,_,Ni) :- true |
        Ni=[],
        terminate_indexes(Li,Vi),
        raise_error(msg_protocol,Msg).

terminate_indexes([I|L],V) :- true |
        set_vector_element(V,I,E,E1,V1),
        get_index_stream(E,E1,[],_),
        terminate_indexes(L,V1).
terminate_indexes([],_) :- true | true.

prepend([A|X],Y,Z) :- true |
        Z=[A|Z1],
        prepend(X,Y,Z1).
prepend([],Y,Z) :- true | Y=Z.


%*** empty ***
empty(0,YorN) :- true | YorN=yes.
empty(N,YorN) :- N>0 | YorN=no.

%*** empty_with_condition ***
empty(C,YorN,Ni,Ni1,Vi,Vi1,D,D1,I,DS,N) :- true |
        get_data_ids(C,_,Vi,Vi1,D,D0,I,L,DS,Ni,Ni1),
        if_empty(L,D0,D1,YorN,N).

if_empty([P|_],D,D1,YorN,_) :- vector_element(D,P,E),vector(E,_) |
        D=D1,YorN=no.
if_empty([P|L],D,D1,YorN,N) :- vector_element(D,P,0) |
        if_empty(L,D,D1,YorN,N).
if_empty([],D,D1,YorN,_) :- true |
        D=D1,YorN=yes.
if_empty(true,D,D1,YorN,N) :- true |
        D=D1,
        empty(N,YorN).

%*** put ***
put(Li,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,_,X,DS,_,_) :- vector(X,DS),I<N |
        I1:=I+1,N1:=N,J1:=J,P1:=P,
        set_vector_element(D,I,_,X1,D1),
        add_to_indexes(Li,Vi,Vi1,X,X1,I).
put(Li,Vi,Vi1,D,D1,N,I1,N,N1,J,J1,_,P1,PR,X,DS,_,_) :- vector(X,DS) |
        remake_and_put(Li,Vi,Vi1,D,D1,X,I1,N,N1,J,J1,PR,P1).
otherwise.
put(_,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,_,X,_,put,_) :- true |
        Vi=Vi1,D=D1,I=I1,N=N1,J=J1,P=P1,
        raise_error(data_fmt,put(X)).
put(_,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,_,X,_,get_if_any_and_put,C) :- true |
        Vi=Vi1,D=D1,I=I1,N=N1,J=J1,P=P1,
        raise_error(data_fmt,get_if_any_and_put(C,{},X)).

remake_and_put(Li,Vi,Vi2,D,D1,X,I1,N,N1,J,J1,PR,P1) :- true |
        I:=N-J,
        N1:=N*2,I1:=I+1,J1:=0,P1:=N1*PR/100,
        clear_indexes(Li,Vi,Vi0),
        new_vector(ND0,N1),
        remake(0,N,Li,Vi0,Vi1,D,0,ND0,ND1),
        set_vector_element(ND1,I,_,X1,D1),
        add_to_indexes(Li,Vi1,Vi2,X,X1,I).

%*** get ***
get(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,I1,J,J1,P,DS,X,Msg) :- true |
        get_data_ids(C,C1,Vi,Vi0,D,D0,I,L,DS,Ni,Ni1),
        do_get(L,Li,X,Msg,Vi0,Vi1,D0,D1,I,I1,J,J1,P,C1).

do_get([Q|_],Li,X,_,Vi,Vi1,D,D1,I,I1,J,J1,P,_) :- vector_element(D,Q,E),vector(E,_) |
        set_vector_element(D,Q,X,0,D0),
        if_pack(P,Li,~(J+1),J1,Vi,Vi1,D0,D1,I,I1).
do_get([Q|L],Li,X,Msg,Vi,Vi1,D,D1,I,I1,J,J1,P,C) :- vector_element(D,Q,0) |
        do_get(L,Li,X,Msg,Vi,Vi1,D,D1,I,I1,J,J1,P,C).
do_get([],_,X,Msg,Vi,Vi1,_,_,_,_,_,_,_,C) :- true |
        Vi=Vi1,
        raise_message(Msg,C,X).
do_get(true,Li,X,Msg,Vi,Vi1,D,D1,I,I1,J,J1,P,C) :- true |
        get_anyone(~(I-1),Li,X,Msg,Vi,Vi1,D,D1,I,I1,J,J1,P,C).

get_anyone(Q,Li,X,_,Vi,Vi1,D,D1,I,I1,J,J1,P,_) :- Q>=0,vector_element(D,Q,E),vector(E,_) |
        set_vector_element(D,Q,X,0,D0),
        if_pack(P,Li,~(J+1),J1,Vi,Vi1,D0,D1,I,I1).
get_anyone(Q,Li,X,Msg,Vi,Vi1,D,D1,I,I1,J,J1,P,C) :- Q>=0,vector_element(D,Q,0) |
        get_anyone(~(Q-1),Li,X,Msg,Vi,Vi1,D,D1,I,I1,J,J1,P,C).
get_anyone(Q,_,X,Msg,Vi,Vi1,_,_,_,_,_,_,_,C) :- Q<0 |
        Vi=Vi1,
        raise_message(Msg,C,X).

raise_message(Msg,C,X) :- atom(Msg) |
        raise_error(nonexistent,{Msg,C,X}).

raise_message({Msg,F},C,X) :- wait(F) |
        raise_error(nonexistent,{Msg,C,F,X}).

if_pack(P,_,J,J1,Vi,Vi1,D,D1,I,I1) :- J<P |
        Vi=Vi1,D=D1,I1:=I,J1:=J.
if_pack(P,Li,J,J1,Vi,Vi1,D,D1,I,I1) :- J>=P |
        I1:=I-J,J1:=0,
        pack(Li,Vi,Vi1,D,D1,I).

%*** get_if_any ***
get_if_any(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,I1,J,J1,P,DS,X) :- true |
        get_data_ids(C,_,Vi,Vi0,D,D0,I,L,DS,Ni,Ni1),
        do_get_if_any(L,Li,X,P,Vi0,Vi1,D0,D1,I,I1,J,J1).

do_get_if_any([Q|_],Li,X,P,Vi,Vi1,D,D1,I,I1,J,J1) :- vector_element(D,Q,E),vector(E,_) |
        set_vector_element(D,Q,X,0,D0),
        if_pack(P,Li,~(J+1),J1,Vi,Vi1,D0,D1,I,I1).
do_get_if_any([Q|L],Li,X,P,Vi,Vi1,D,D1,I,I1,J,J1) :- vector_element(D,Q,0) |
        do_get_if_any(L,Li,X,P,Vi,Vi1,D,D1,I,I1,J,J1).
do_get_if_any([],_,X,_,Vi,Vi1,D,D1,I,I1,J,J1) :- true |
        X={},Vi=Vi1,D=D1,I1:=I,J1:=J.
do_get_if_any(true,Li,X,P,Vi,Vi1,D,D1,I,I1,J,J1) :- true |
        get_if_any_anyone(~(I-1),Li,X,P,Vi,Vi1,D,D1,I,I1,J,J1).

get_if_any_anyone(Q,Li,X,P,Vi,Vi1,D,D1,I,I1,J,J1) :- Q>=0,vector_element(D,Q,E),vector(E,_) |
        set_vector_element(D,Q,X,0,D0),
        if_pack(P,Li,~(J+1),J1,Vi,Vi1,D0,D1,I,I1).
get_if_any_anyone(Q,Li,X,P,Vi,Vi1,D,D1,I,I1,J,J1) :- Q>=0,vector_element(D,Q,0) |
        get_if_any_anyone(~(Q-1),Li,X,P,Vi,Vi1,D,D1,I,I1,J,J1).
get_if_any_anyone(Q,_,X,_,Vi,Vi1,D,D1,I,I1,J,J1) :- Q<0 |
        X={},Vi=Vi1,D=D1,I1:=I,J1:=J.

%*** max_if_any ***
max_if_any(Attr,Key,Vi,Vi1,D,D1,Msg,I,Ni,Ni1,DS) :- 0=<Attr,Attr<DS |
        Ni=Ni1,
        set_vector_element(Vi,Attr,E,E1,Vi1),
        if_ordered_index(Attr,Key,E,E1,D,D1,Msg,I).
max_if_any(Attr,Key,Vi,Vi1,D,D1,Msg,I,Ni,Ni1,_) :- atom(Attr) |
        Ni=[carbon_copy(Attr,PtrL)|Ni1],
        get_attr_position(PtrL,Attr,P),
        set_vector_element(Vi,P,E,E1,Vi1),
        if_ordered_index(P,Key,E,E1,D,D1,Msg,I).
otherwise.
max_if_any(Attr,_,Vi,Vi1,_,_,_,_,Ni,Ni1,_) :- true |
        Vi=Vi1,Ni=Ni1,
        raise_error(attr_name,Attr).

if_ordered_index(_,Key,ordered(In,Comp),E1,D,D1,Msg,_) :- true |
        In=[{Msg,Res}|In0],
        E1=ordered(In1,Comp),
        max(Res,Key,In0,In1,D,D1,Msg).
if_ordered_index(P,Key,hashed(In,Comp),E1,D,D1,Msg,I) :- true |
        E1=hashed(In,Comp),
        max_sequential(~(I-1),D,D1,P,Key,Comp,Msg).
if_ordered_index(P,Key,none(Comp),E1,D,D1,Msg,I) :- true |
        E1=none(Comp),
        max_sequential(~(I-1),D,D1,P,Key,Comp,Msg).
if_ordered_index(P,Key,0,E1,D,D1,Msg,I) :- true |
        E1=none(ascending),
        max_sequential(~(I-1),D,D1,P,Key,ascending,Msg).

max({K,P},Key,In,In1,D,D1,_) :- vector_element(D,P,E),vector(E,_) |
        Key={K},D=D1,
        In=[put(K,P)|In1].
max({_,P},Key,In,In1,D,D1,Msg) :- vector_element(D,P,0) |
        In=[{Msg,Res}|In0],
        max(Res,Key,In0,In1,D,D1,Msg).
max({},Key,In,In1,D,D1,_) :- true |
        Key={},In=In1,D=D1.

max_sequential(I,D,D1,P,Key,Comp,Msg) :- true |
        get_and_put_all(I,D,D1,A,B,P),
        max_sequential(A,B,Key,Comp,Msg).

get_and_put_all(I,D,D1,A,B,P) :- I>=0 |
        set_vector_element(D,I,X,X1,D0),
        if_empty_element(X,X1,P,A,A1,B,B1),
        get_and_put_all(~(I-1),D0,D1,A1,B1,P).
get_and_put_all(I,D,D1,A,B,_) :- I<0 |
        D=D1,A=[],B=[].

if_empty_element(X,X1,P,A,A1,B,B1) :- vector(X,_) |
        set_vector_element(X,P,E,E1,X1),
        A=[E|A1],B=[E1|B1].
if_empty_element(0,X1,_,A,A1,B,B1) :- true |
        X1:=0,A=A1,B=B1.

max_sequential([E|A],[E1|B],Key,Comp,Msg) :- true |
        max_seq(A,B,Key,Comp,E,E1,Msg).
max_sequential([],[],Key,_,_) :- true |
        Key={}.

max_seq(A,B,Key,Comp,E,E1,get_max_if_any) :- true |
        do_max_seq(A,B,Key,Comp,E,E1).
max_seq(A,B,Key,Comp,E,E1,get_min_if_any) :- true |
        do_min_seq(A,B,Key,Comp,E,E1).

do_max_seq([F|A],[F1|B],Key,ascending,E,E1) :- true |
        comparator:sort(E,F,Sml,Lag,YorN),
        wait_compared_max(A,B,Key,ascending,Sml,E1,Lag,F1,YorN).
do_max_seq([F|A],[F1|B],Key,descending,E,E1) :- true |
        comparator:descending_sort(E,F,Sml,Lag,YorN),
        wait_compared_max(A,B,Key,descending,Sml,E1,Lag,F1,YorN).
do_max_seq([F|A],[F1|B],Key,Comp,E,E1) :- code(Comp,_,_,_) |
        builtin#apply(Comp,{E,F,Sml,Lag,YorN}),
        wait_compared_max(A,B,Key,Comp,Sml,E1,Lag,F1,YorN).
do_max_seq([],[],Key,_,E,E1) :- true |
        E=E1,Key={E1}.

wait_compared_max(A,B,Key,Comp,E,E1,F,F1,no) :- true |
        E=E1,
        do_max_seq(A,B,Key,Comp,F,F1).
wait_compared_max(A,B,Key,Comp,F,E1,E,F1,yes) :- true |
        F=F1,
        do_max_seq(A,B,Key,Comp,E,E1).

do_min_seq([F|A],[F1|B],Key,ascending,E,E1) :- true |
        comparator:sort(E,F,Sml,Lag,YorN),
        wait_compared_min(A,B,Key,ascending,Sml,E1,Lag,F1,YorN).
do_min_seq([F|A],[F1|B],Key,descending,E,E1) :- true |
        comparator:descending_sort(E,F,Sml,Lag,YorN),
        wait_compared_min(A,B,Key,descending,Sml,E1,Lag,F1,YorN).
do_min_seq([F|A],[F1|B],Key,Comp,E,E1) :- code(Comp,_,_,_) |
        builtin#apply(Comp,{E,F,Sml,Lag,YorN}),
        wait_compared_min(A,B,Key,Comp,Sml,E1,Lag,F1,YorN).
do_min_seq([],[],Key,_,E,E1) :- true |
        E=E1,Key={E1}.

wait_compared_min(A,B,Key,Comp,E,E1,F,F1,no) :- true |
        F=F1,
        do_min_seq(A,B,Key,Comp,E,E1).
wait_compared_min(A,B,Key,Comp,F,E1,E,F1,yes) :- true |
        E=E1,
        do_min_seq(A,B,Key,Comp,F,F1).

%*** get_all ***
get_all(I,N,D,D1,A) :- I<N |
        set_vector_element(D,I,E,0,D0),
        if_get_all(E,A,A1),
        get_all(~(I+1),N,D0,D1,A1).
get_all(N,N,D,D1,A) :- true | D=D1,A=[].

if_get_all(0,A,A1) :- true | A=A1.
if_get_all(E,A,A1) :- vector(E,_) | A=[E|A1].

%*** get_all/2 ***
get_all2(sorted_by(C),Li,Ni,Ni1,Vi,Vi1,D,D1,I,I1,_,J1,_,DS,A) :- true |
        I1:=0,J1:=0,
        get_all_by_index(C,A,Ni,Ni1,Vi,Vi0,D,D1,I,DS),
        clear_indexes(Li,Vi0,Vi1).
otherwise.
get_all2(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,I1,J,J1,P,DS,A) :- true |
        get_data_ids(C,_,Vi,Vi0,D,D0,I,L,DS,Ni,Ni1),
        do_get_all2(L,Li,P,A,Vi0,Vi1,D0,D1,I,I1,J,J1).

do_get_all2(true,Li,_,A,Vi,Vi1,D,D1,I,I1,_,J1) :- true |
        I1:=0,J1:=0,
        get_all(0,I,D,D1,A),
        clear_indexes(Li,Vi,Vi1).
otherwise.
do_get_all2(L,Li,P,A,Vi,Vi1,D,D1,I,I1,J,J1) :- true |
        do_get_all(L,Li,P,A,Vi,Vi1,D,D1,I,I1,J,J1).

do_get_all([Q|L],Li,P,A,Vi,Vi1,D,D1,I,I1,J,J1) :- vector_element(D,Q,E),vector(E,_) |
        set_vector_element(D,Q,X,0,D0),
        A=[X|A1],
        do_get_all(L,Li,P,A1,Vi,Vi1,D0,D1,I,I1,~(J+1),J1).
do_get_all([Q|L],Li,P,A,Vi,Vi1,D,D1,I,I1,J,J1) :- vector_element(D,Q,0) |
        do_get_all(L,Li,P,A,Vi,Vi1,D,D1,I,I1,J,J1).
do_get_all([],Li,P,A,Vi,Vi1,D,D1,I,I1,J,J1) :- true |
        A=[],
        if_pack(P,Li,J,J1,Vi,Vi1,D,D1,I,I1).

%*** get_all/3 ***
get_all3(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,I1,J,J1,P,DS,S,A) :- true |
        get_data_ids(C,_,Vi,Vi0,D,D0,I,L,DS,Ni,Ni0),
        do_get_all3(L,Li,Ni0,Ni1,Vi0,Vi1,D0,D1,I,I1,J,J1,P,DS,S,A).

do_get_all3(true,Li,Ni,Ni1,Vi,Vi1,D,D1,I,I1,_,J1,_,DS,S,A) :- true |
        I1:=0,J1:=0,
        if_get_all_by_index(S,A,Ni,Ni1,Vi,Vi0,D,D1,I,DS),
        clear_indexes(Li,Vi0,Vi1).
otherwise.
do_get_all3(L,Li,Ni,Ni1,Vi,Vi1,D,D1,I,I1,J,J1,P,DS,S,A) :- true |
        do_get_all(L,Li,P,A0,Vi,Vi0,D,D1,I,I1,J,J1),
        sorted_by(A0,A,S,Vi0,Vi1,Ni,Ni1,DS).

if_get_all_by_index(sorted_by(C),A,Ni,Ni1,Vi,Vi1,D,D1,I,DS) :- true |
        get_all_by_index(C,A,Ni,Ni1,Vi,Vi1,D,D1,I,DS).
otherwise.
if_get_all_by_index(S,_,Ni,Ni1,Vi,Vi1,_,_,_,_) :- true |
        Ni=Ni1,Vi=Vi1,
        raise_error(sort_param,S).

%*** get_all_by_index ***
get_all_by_index(C,A,Ni,Ni1,Vi,Vi1,D,D1,I,DS) :- 0=<C,C<DS |
        Ni=Ni1,
        set_vector_element(Vi,C,E,E1,Vi1),
        if_get_all_i(C,A,E,E1,D,D1,I).
get_all_by_index(C,A,Ni,Ni1,Vi,Vi1,D,D1,I,_) :- atom(C) |
        Ni=[carbon_copy(C,PtrL)|Ni1],
        get_attr_position(PtrL,C,P),
        set_vector_element(Vi,P,E,E1,Vi1),
        if_get_all_i(P,A,E,E1,D,D1,I).
otherwise.
get_all_by_index(C,A,Ni,Ni1,Vi,Vi1,_,_,_,_) :- true |
        Ni=Ni1,Vi=Vi1,
        raise_error(sort_param,sorted_by(C)).

if_get_all_i(_,A,ordered(In,Comp),E1,D,D1,_) :- true |
        E1=ordered(In1,Comp),
        In=[get_all(L)|In1],
        do_get_all_i(L,D,D1,A).
if_get_all_i(P,A,hashed(In,Comp),E1,D,D1,I) :- true |
        E1=hashed(In,Comp),
        get_all(0,I,D,D1,A0),
        sorted_by(A0,A,P,Comp).
if_get_all_i(P,A,none(Comp),E1,D,D1,I) :- true |
        E1=none(Comp),
        get_all(0,I,D,D1,A0),
        sorted_by(A0,A,P,Comp).
if_get_all_i(P,A,0,E1,D,D1,I) :- true |
        E1=none(ascending),
        get_all(0,I,D,D1,A0),
        sorted_by(A0,A,P,ascending).

do_get_all_i([{_,P}|L],D,D1,A) :- vector_element(D,P,E),vector(E,_) |
        set_vector_element(D,P,E,0,D0),
        A=[E|A1],
        do_get_all_i(L,D0,D1,A1).
do_get_all_i([{_,P}|L],D,D1,A) :- vector_element(D,P,0) |
        do_get_all_i(L,D,D1,A).
do_get_all_i([],D,D1,A) :- true | D=D1,A=[].

sorted_by(A,A1,sorted_by(C),Vi,Vi1,Ni,Ni1,DS) :- 0=<C,C<DS |
        Ni=Ni1,
        set_vector_element(Vi,C,E,E1,Vi1),
        get_comparator(E,E1,Comp),
        sorted_by(A,A1,C,Comp).
sorted_by(A,A1,sorted_by(C),Vi,Vi1,Ni,Ni1,_) :- atom(C) |
        Ni=[carbon_copy(C,PtrL)|Ni1],
        get_attr_position(PtrL,C,P),
        set_vector_element(Vi,P,E,E1,Vi1),
        get_comparator(E,E1,Comp),
        sorted_by(A,A1,P,Comp).
otherwise.
sorted_by(_,_,S,Vi,Vi1,Ni,Ni1,_) :- true |
        Vi=Vi1,Ni=Ni1,
        raise_error(sort_param,S).

get_comparator(ordered(In,C),E1,Comp) :- true |
        E1=ordered(In,C),
        C=Comp.
get_comparator(hashed(In,C),E1,Comp) :- true |
        E1=hashed(In,C),
        C=Comp.
get_comparator(none(C),E1,Comp) :- true |
        E1=none(C),
        C=Comp.
get_comparator(0,E1,Comp) :- true |
        E1=none(ascending),
        Comp=ascending.

sorted_by(A,A1,P,Comp) :- true |
        trans_datalist(A,P,B),
        sorter:key_sort(B,Comp,B1),
        return_datalist(B1,P,A1).

trans_datalist([E|A],P,B) :- true |
        set_vector_element(E,P,K,0,E1),
        B=[{K,E1}|B1],
        trans_datalist(A,P,B1).
trans_datalist([],_,B) :- true | B=[].

return_datalist([{K,E}|B],P,A) :- true |
        set_vector_element(E,P,_,K,E1),
        A=[E1|A1],
        return_datalist(B,P,A1).
return_datalist([],_,A) :- true | A=[].

%*** carbon_copy ***
carbon_copy(I,N,D,D1,A) :- I<N |
        set_vector_element(D,I,E,E1,D0),
        if_carbon_copy(E,E1,A,A1),
        carbon_copy(~(I+1),N,D0,D1,A1).
carbon_copy(N,N,D,D1,A) :- true | D=D1,A=[].

if_carbon_copy(0,E1,A,A1) :- true | E1:=0,A=A1.
if_carbon_copy(E,E1,A,A1) :- vector(E,_) | E=E1,A=[E|A1].

%*** carbon_copy/2 ***
carbon_copy2(sorted_by(C),A,Ni,Ni1,Vi,Vi1,D,D1,I,DS) :- true |
        carbon_copy_by_index(C,A,Ni,Ni1,Vi,Vi1,D,D1,I,DS).
otherwise.
carbon_copy2(C,A,Ni,Ni1,Vi,Vi1,D,D1,I,DS) :- true |
        get_data_ids(C,_,Vi,Vi1,D,D0,I,L,DS,Ni,Ni1),
        do_carbon_copy2(L,D0,D1,A,I).

do_carbon_copy2(true,D,D1,A,I) :- true |
        carbon_copy(0,I,D,D1,A).
otherwise.
do_carbon_copy2(L,D,D1,A,_) :- true |
        do_carbon_copy(L,D,D1,A).

do_carbon_copy([Q|L],D,D1,A) :- vector_element(D,Q,E),vector(E,_) |
        set_vector_element(D,Q,E,E,D0),
        A=[E|A1],
        do_carbon_copy(L,D0,D1,A1).
do_carbon_copy([Q|L],D,D1,A) :- vector_element(D,Q,0) |
        do_carbon_copy(L,D,D1,A).
do_carbon_copy([],D,D1,A) :- true | D=D1,A=[].

%*** carbon_copy/3 ***
carbon_copy3(C,A,Ni,Ni1,Vi,Vi1,D,D1,I,DS,S) :- true |
        get_data_ids(C,_,Vi,Vi0,D,D0,I,L,DS,Ni,Ni0),
        do_carbon_copy3(L,A,Ni0,Ni1,Vi0,Vi1,D0,D1,I,DS,S).

do_carbon_copy3(true,A,Ni,Ni1,Vi,Vi1,D,D1,I,DS,S) :- true |
        if_carbon_copy_by_index(S,A,Ni,Ni1,Vi,Vi1,D,D1,I,DS).
otherwise.
do_carbon_copy3(L,A,Ni,Ni1,Vi,Vi1,D,D1,_,DS,S) :- true |
        do_carbon_copy(L,D,D1,A0),
        sorted_by(A0,A,S,Vi,Vi1,Ni,Ni1,DS).

if_carbon_copy_by_index(sorted_by(C),A,Ni,Ni1,Vi,Vi1,D,D1,I,DS) :- true |
        carbon_copy_by_index(C,A,Ni,Ni1,Vi,Vi1,D,D1,I,DS).
otherwise.
if_carbon_copy_by_index(S,A,Ni,Ni1,Vi,Vi1,_,_,_,_) :- true |
        Ni=Ni1,Vi=Vi1,
        raise_error(sort_param,S).

%*** carbon_copy_by_index ***
carbon_copy_by_index(C,A,Ni,Ni1,Vi,Vi1,D,D1,I,DS) :- 0=<C,C<DS |
        Ni=Ni1,
        set_vector_element(Vi,C,E,E1,Vi1),
        if_carbon_copy_i(C,A,E,E1,D,D1,I).
carbon_copy_by_index(C,A,Ni,Ni1,Vi,Vi1,D,D1,I,_) :- atom(C) |
        Ni=[carbon_copy(C,PtrL)|Ni1],
        get_attr_position(PtrL,C,P),
        set_vector_element(Vi,P,E,E1,Vi1),
        if_carbon_copy_i(P,A,E,E1,D,D1,I).
otherwise.
carbon_copy_by_index(C,A,Ni,Ni1,Vi,Vi1,_,_,_,_) :- true |
        Ni=Ni1,Vi=Vi1,
        raise_error(attr_name,C).

if_carbon_copy_i(_,A,ordered(In,Comp),E1,D,D1,_) :- true |
        E1=ordered(In1,Comp),
        In=[carbon_copy(L)|In1],
        do_carbon_copy_i(L,D,D1,A).
if_carbon_copy_i(P,A,hashed(In,Comp),E1,D,D1,I) :- true |
        E1=hashed(In,Comp),
        carbon_copy(0,I,D,D1,A0),
        sorted_by(A0,A,P,Comp).
if_carbon_copy_i(P,A,none(Comp),E1,D,D1,I) :- true |
        E1=none(Comp),
        carbon_copy(0,I,D,D1,A0),
        sorted_by(A0,A,P,Comp).
if_carbon_copy_i(P,A,0,E1,D,D1,I) :- true |
        E1=none(ascending),
        carbon_copy(0,I,D,D1,A0),
        sorted_by(A0,A,P,ascending).

do_carbon_copy_i([{_,P}|L],D,D1,A) :- vector_element(D,P,E),vector(E,_) |
        set_vector_element(D,P,E,E,D0),
        A=[E|A1],
        do_carbon_copy_i(L,D0,D1,A1).
do_carbon_copy_i([{_,P}|L],D,D1,A) :- vector_element(D,P,0) |
        do_carbon_copy_i(L,D,D1,A).
do_carbon_copy_i([],D,D1,A) :- true | D=D1,A=[].

%*** get_and_put ***
get_and_put(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,DS,X,X1) :- true |
        get_data_ids(C,C1,Vi,Vi0,D,D0,I,L,DS,Ni,Ni1),
        do_get_and_put(L,Li,X,X1,Vi0,Vi1,D0,D1,DS,C1,I).

do_get_and_put([Q|_],Li,Old,New0,Vi,Vi1,D,D1,DS,C,_) :- vector_element(D,Q,E),vector(E,_) |
        set_vector_element(D,Q,Old0,New,D1),
        modify_indexes(Li,Vi,Vi1,Old0,Old,New0,New,Q,DS,get_and_put,C).
do_get_and_put([Q|L],Li,X,X1,Vi,Vi1,D,D1,DS,C,I) :- vector_element(D,Q,0) |
        do_get_and_put(L,Li,X,X1,Vi,Vi1,D,D1,DS,C,I).
do_get_and_put([],_,X,X1,Vi,Vi1,_,_,_,C,_) :- true |
        Vi=Vi1,
        raise_error(nonexistent,get_and_put(C,X,X1)).
do_get_and_put(true,Li,X,X1,Vi,Vi1,D,D1,DS,C,I) :- true |
        get_and_put_anyone(~(I-1),Li,X,X1,Vi,Vi1,D,D1,DS,C).

get_and_put_anyone(Q,Li,Old,New0,Vi,Vi1,D,D1,DS,C) :- Q>=0,vector_element(D,Q,E),vector(E,_) |
        set_vector_element(D,Q,Old0,New,D1),
        modify_indexes(Li,Vi,Vi1,Old0,Old,New0,New,Q,DS,get_and_put,C).
get_and_put_anyone(Q,Li,X,X1,Vi,Vi1,D,D1,DS,C) :- Q>=0,vector_element(D,Q,0) |
        get_and_put_anyone(~(Q-1),Li,X,X1,Vi,Vi1,D,D1,DS,C).
get_and_put_anyone(Q,_,X,X1,Vi,Vi1,_,_,_,C) :- Q<0 |
        Vi=Vi1,
        raise_error(nonexistent,get_and_put(C,X,X1)).

%*** getp_and_put ***
getp_and_put(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,DS,F,X,X1) :- true |
        get_data_ids(C,C1,Vi,Vi0,D,D0,I,L,DS,Ni,Ni0),
        get_format(F,F1,N,FL,Ni0,Ni1,DS),
        do_and0(Li,FL,Li1),
        do_getp_and_put(L,Li1,X,X1,Vi0,Vi1,D0,D1,DS,N,FL,C1,F1,I).

do_getp_and_put([Q|_],Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,C,F,_) :- 
    vector_element(D,Q,E),vector(E,_) |
        set_vector_element(D,Q,Old0,New,D1),
        modify_indexes(Li,Vi,Vi1,Old0,Old,New0,New,Q,DS,getp_and_put(F),C),
        get_part_and_put(N,FL,Old,New0,X,X1).
do_getp_and_put([Q|L],Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,C,F,I) :- vector_element(D,Q,0) |
        do_getp_and_put(L,Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,C,F,I).
do_getp_and_put([],_,X,X1,Vi,Vi1,_,_,_,_,_,C,F,_) :- wait(F) |
        Vi=Vi1,
        raise_error(nonexistent,getp_and_put(C,F,X,X1)).
do_getp_and_put(true,Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,C,F,I) :- true |
        getp_and_put_anyone(~(I-1),Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,C,F).

getp_and_put_anyone(Q,Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,C,F) :- Q>=0,
    vector_element(D,Q,E),vector(E,_) |
        set_vector_element(D,Q,Old0,New,D1),
        modify_indexes(Li,Vi,Vi1,Old0,Old,New0,New,Q,DS,getp_and_put(F),C),
        get_part_and_put(N,FL,Old,New0,X,X1).
getp_and_put_anyone(Q,Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,C,F) :- Q>=0,vector_element(D,Q,0) |
        getp_and_put_anyone(~(Q-1),Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,C,F).
getp_and_put_anyone(Q,_,X,X1,Vi,Vi1,_,_,_,_,_,C,F) :- Q<0,wait(F) |
        Vi=Vi1,
        raise_error(nonexistent,getp_and_put(C,F,X,X1)).

get_part_and_put(N,L,X,X1,P,P1) :- true |
        new_vector(P0,N),
        get_part_and_put1(L,X,X1,P0,P,InP,0),
        unify_part(InP,P1,N,getp_and_put).

get_part_and_put1([I|L],X,X1,P,P1,InP,J) :- true |
        set_vector_element(X,I,E,E1,X0),
        set_vector_element(P,J,_,E,P0),
        InP=[E1|InP1],
        get_part_and_put1(L,X0,X1,P0,P1,InP1,~(J+1)).
get_part_and_put1([],X,X1,P,P1,InP,_) :- true |
        X=X1,P=P1,InP=[].

%*** get_if_any_and_put ***
get_if_any_and_put(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,PR,X,X1,DS) :- true |
        get_data_ids(C,C1,Vi,Vi0,D,D0,I,L,DS,Ni,Ni1),
        do_get_if_any_and_put(L,Li,X,X1,Vi0,Vi1,D0,D1,I,I1,N,N1,J,J1,P,P1,PR,DS,C1).

do_get_if_any_and_put([Q|_],Li,Old,New0,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,_,DS,C) :-
    vector_element(D,Q,E),vector(E,_) |
        I1:=I,N1:=N,J1:=J,P1:=P,
        set_vector_element(D,Q,Old0,New,D1),
        modify_indexes(Li,Vi,Vi1,Old0,Old,New0,New,Q,DS,get_if_any_and_put,C).
do_get_if_any_and_put([Q|L],Li,Old,New0,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,PR,DS,C) :-
    vector_element(D,Q,0) |
        do_get_if_any_and_put(L,Li,Old,New0,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,PR,DS,C).
do_get_if_any_and_put([],Li,X,X1,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,PR,DS,C) :- true |
        X={},
        put(Li,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,PR,X1,DS,get_if_any_and_put,C).
do_get_if_any_and_put(true,Li,X,X1,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,PR,DS,C) :- true |
        get_if_any_and_put_anyone(~(I-1),Li,X,X1,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,PR,DS,C).

get_if_any_and_put_anyone(Q,Li,Old,New0,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,_,DS,C) :- Q>=0,
    vector_element(D,Q,E),vector(E,_) |
        I1:=I,N1:=N,J1:=J,P1:=P,
        set_vector_element(D,Q,Old0,New,D1),
        modify_indexes(Li,Vi,Vi1,Old0,Old,New0,New,Q,DS,get_if_any_and_put,C).
get_if_any_and_put_anyone(Q,Li,X,X1,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,PR,DS,C) :- Q>=0,
    vector_element(D,Q,0) |
        get_if_any_and_put_anyone(~(Q-1),Li,X,X1,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,PR,DS,C).
get_if_any_and_put_anyone(Q,Li,X,X1,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,PR,DS,C) :- Q<0 |
        X={},
        put(Li,Vi,Vi1,D,D1,I,I1,N,N1,J,J1,P,P1,PR,X1,DS,get_if_any_and_put,C).

%*** get_and_put_if_any ***
get_and_put_if_any(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,DS,X,X1,X2) :- true |
        get_data_ids(C,C1,Vi,Vi0,D,D0,I,L,DS,Ni,Ni1),
        do_get_and_put_if_any(L,Li,X,X1,Vi0,Vi1,D0,D1,X2,DS,C1,I).

do_get_and_put_if_any([Q|_],Li,Old,New0,Vi,Vi1,D,D1,X2,DS,C,_) :-
    vector_element(D,Q,E),vector(E,_) |
        X2={},
        set_vector_element(D,Q,Old0,New,D1),
        modify_indexes(Li,Vi,Vi1,Old0,Old,New0,New,Q,DS,get_and_put_if_any,C).
do_get_and_put_if_any([Q|L],Li,X,X1,Vi,Vi1,D,D1,X2,DS,C,I) :- vector_element(D,Q,0) |
        do_get_and_put_if_any(L,Li,X,X1,Vi,Vi1,D,D1,X2,DS,C,I).
do_get_and_put_if_any([],_,X,X1,Vi,Vi1,D,D1,X2,_,_,_) :- true |
        X={},X1=X2,Vi=Vi1,D=D1.
do_get_and_put_if_any(true,Li,X,X1,Vi,Vi1,D,D1,X2,DS,C,I) :- true |
        get_and_put_if_any_anyone(~(I-1),Li,X,X1,Vi,Vi1,D,D1,X2,DS,C).

get_and_put_if_any_anyone(Q,Li,Old,New0,Vi,Vi1,D,D1,X2,DS,C) :- Q>=0,
    vector_element(D,Q,E),vector(E,_) |
        X2={},
        set_vector_element(D,Q,Old0,New,D1),
        modify_indexes(Li,Vi,Vi1,Old0,Old,New0,New,Q,DS,get_and_put_if_any,C).
get_and_put_if_any_anyone(Q,Li,X,X1,Vi,Vi1,D,D1,X2,DS,C) :- Q>=0,vector_element(D,Q,0) |
        get_and_put_if_any_anyone(~(Q-1),Li,X,X1,Vi,Vi1,D,D1,X2,DS,C).
get_and_put_if_any_anyone(Q,_,X,X1,Vi,Vi1,D,D1,X2,_,_) :- Q<0 |
        X={},X1=X2,Vi=Vi1,D=D1.

%*** getp_and_put_if_any ***
getp_and_put_if_any(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,DS,F,X,X1,X2) :- true |
        get_data_ids(C,C1,Vi,Vi0,D,D0,I,L,DS,Ni,Ni0),
        get_format(F,F1,N,FL,Ni0,Ni1,DS),
        do_getp_and_put_if_any(L,Li,X,X1,Vi0,Vi1,D0,D1,DS,N,FL,X2,C1,F1,I).

do_getp_and_put_if_any([Q|_],Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,X2,C,F,_) :-
    vector_element(D,Q,E),vector(E,_) |
        set_vector_element(D,Q,Old0,New,D1),
        do_and0(Li,FL,Li1),
        modify_indexes(Li1,Vi,Vi1,Old0,Old,New0,New,Q,DS,getp_and_put_if_any(F),C),
        get_part_and_put_if_any(FL,Old,New0,X,X1,X2,DS,N).
do_getp_and_put_if_any([Q|L],Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,X2,C,F,I) :- 
    vector_element(D,Q,0) |
        do_getp_and_put_if_any(L,Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,X2,C,F,I).
do_getp_and_put_if_any([],_,X,X1,Vi,Vi1,D,D1,_,_,_,X2,_,_,_) :- true |
        X={},X1=X2,Vi=Vi1,D=D1.
do_getp_and_put_if_any(true,Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,X2,C,F,I) :- true |
        getp_and_put_if_any_anyone(~(I-1),Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,X2,C,F).

getp_and_put_if_any_anyone(Q,Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,X2,C,F) :- Q>=0,
    vector_element(D,Q,E),vector(E,_) |
        set_vector_element(D,Q,Old0,New,D1),
        do_and0(Li,FL,Li1),
        modify_indexes(Li1,Vi,Vi1,Old0,Old,New0,New,Q,DS,getp_and_put_if_any(F),C),
        get_part_and_put_if_any(FL,Old,New0,X,X1,X2,DS,N).
getp_and_put_if_any_anyone(Q,Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,X2,C,F) :- Q>=0,
    vector_element(D,Q,0) |
        getp_and_put_if_any_anyone(~(Q-1),Li,X,X1,Vi,Vi1,D,D1,DS,N,FL,X2,C,F).
getp_and_put_if_any_anyone(Q,_,X,X1,Vi,Vi1,D,D1,_,_,_,X2,_,_) :- Q<0 |
        X={},X1=X2,Vi=Vi1,D=D1.

get_part_and_put_if_any(L,X,X1,P,P1,P2,DS,N) :- vector(X,DS) |
        new_vector(P0,N),
        P2={},
        get_part_and_put1(L,X,X1,P0,P,InP,0),
        unify_part(InP,P1,N,getp_and_put_if_any).
get_part_and_put_if_any(_,{},_,P,P1,P2,_,_) :- true |
        P={},P1=P2.

%*** get_and_put_all_with_condition ***
get_and_put_all(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,DS,Xs,Ys) :- true |
        get_data_ids(C,C1,Vi,Vi0,D,D0,I,L,DS,Ni,Ni1),
        check_modified_data_list(Ys,Ys0,get_and_put_all,C),
        do_get_and_put_all(L,Li,Xs,Ys0,Vi0,Vi1,D0,D1,DS,C1).

do_get_and_put_all([Q|L],Li,Xs,Ys,Vi,Vi1,D,D1,DS,C) :- vector_element(D,Q,E),vector(E,_) |
        Xs=[Old|Xs1],
        Ys=[New0|Ys1],
        set_vector_element(D,Q,Old0,New,D0),
        modify_indexes(Li,Vi,Vi0,Old0,Old,New0,New,Q,DS,get_and_put_all,C),
        do_get_and_put_all(L,Li,Xs1,Ys1,Vi0,Vi1,D0,D1,DS,C).
do_get_and_put_all([Q|L],Li,Xs,Ys,Vi,Vi1,D,D1,DS,C) :- vector_element(D,Q,0) |
        do_get_and_put_all(L,Li,Xs,Ys,Vi,Vi1,D,D1,DS,C).
do_get_and_put_all([],_,Xs,Ys,Vi,Vi1,D,D1,_,_) :- true |
        Xs=[],Ys=[],Vi=Vi1,D=D1.

check_modified_data_list([New0|Ys],[New|Ys0],Msg,C) :- true |
        New0=New,
        check_modified_data_list(Ys,Ys0,Msg,C).
check_modified_data_list([],[],_,_) :- true | true.
otherwise.
check_modified_data_list(Ys,_,get_and_put_all,C) :- true |
        raise_error(data_fmt,get_and_put_all(C,_,Ys)).
check_modified_data_list(Ys,_,getp_and_put_all,C) :- true |
        raise_error(data_fmt,getp_and_put_all(C,_,_,Ys)).

%*** getp_and_put_all ***
getp_and_put_all(C,Li,Ni,Ni1,Vi,Vi1,D,D1,I,DS,F,Xs,Ys) :- true |
        get_data_ids(C,C1,Vi,Vi0,D,D0,I,L,DS,Ni,Ni0),
        get_format(F,F1,N,FL,Ni0,Ni1,DS),
        do_and0(Li,FL,Li1),
        check_modified_data_list(Ys,Ys1,getp_and_put_all,_),
        do_getp_and_put_all(L,Li1,Xs,Ys1,Vi0,Vi1,D0,D1,DS,N,FL,getp_and_put_all(F1),C1).

do_getp_and_put_all([Q|L],Li,Xs,Ys,Vi,Vi1,D,D1,DS,N,FL,Msg,C) :-
    vector_element(D,Q,E),vector(E,_) |
        Xs=[P|Xs1],
        Ys=[P1|Ys1],
        get_part_and_put(N,FL,Old,New0,P,P1),
        set_vector_element(D,Q,Old0,New,D0),
        modify_indexes(Li,Vi,Vi0,Old0,Old,New0,New,Q,DS,Msg,C),
        do_getp_and_put_all(L,Li,Xs1,Ys1,Vi0,Vi1,D0,D1,DS,N,FL,Msg,C).
do_getp_and_put_all([Q|L],Li,Xs,Ys,Vi,Vi1,D,D1,DS,N,FL,Msg,C) :- vector_element(D,Q,0) |
        do_getp_and_put_all(L,Li,Xs,Ys,Vi,Vi1,D,D1,DS,N,FL,Msg,C).
do_getp_and_put_all([],_,Xs,Ys,Vi,Vi1,D,D1,_,_,_,_,_) :- true |
        Xs=[],Ys=[],Vi=Vi1,D=D1.


get_data_ids({Op,Idx,Key},NC,Vi,Vi1,D,D1,I,L,DS,Ni,Ni1) :- (Op= '=' ; Op=equal),
    0=<Idx,Idx<DS |
        NC={Op,Idx,Key1},
        Ni=Ni1,
        set_vector_element(Vi,Idx,E,E1,Vi1),
        get_ids(Key,Key1,E,E1,D,D1,I,L,Idx).
get_data_ids({Op,Idx,Key},NC,Vi,Vi1,D,D1,I,L,_,Ni,Ni1) :- (Op= '=' ; Op=equal),
    atom(Idx) |
        NC={Op,Idx,Key1},
        Ni=[carbon_copy(Idx,PtrL)|Ni1],
        get_attr_position(PtrL,Idx,P),
        get_ids0(Key,Key1,Vi,Vi1,D,D1,I,L,P).

get_data_ids({Op,Idx,Key},NC,Vi,Vi1,D,D1,I,L,DS,Ni,Ni1) :- (Op= '\=' ; Op=not_equal),
    0=<Idx,Idx<DS |
        NC={Op,Idx,Key1},
        Ni=Ni1,
        set_vector_element(Vi,Idx,E,E1,Vi1),
        get_ids(Key,Key1,E,E1,D,D1,I,L0,Idx),
        do_not(L0,L,I).
get_data_ids({Op,Idx,Key},NC,Vi,Vi1,D,D1,I,L,_,Ni,Ni1) :- (Op= '\=' ; Op=not_equal),
    atom(Idx) |
        NC={Op,Idx,Key1},
        Ni=[carbon_copy(Idx,PtrL)|Ni1],
        get_attr_position(PtrL,Idx,P),
        get_ids0(Key,Key1,Vi,Vi1,D,D1,I,L0,P),
        do_not(L0,L,I).

get_data_ids({Op,C,C1},NC,Vi,Vi1,D,D1,I,L,DS,Ni,Ni1) :- (Op= '/\' ; Op=and) |
        NC={Op,NC0,NC1},
        get_data_ids(C,NC0,Vi,Vi0,D,D0,I,L0,DS,Ni,Ni0),
        get_data_ids(C1,NC1,Vi0,Vi1,D0,D1,I,L1,DS,Ni0,Ni1),
        do_and(L0,L1,L).
get_data_ids({Op,C,C1},NC,Vi,Vi1,D,D1,I,L,DS,Ni,Ni1) :- (Op= '\/' ; Op=or) |
        NC={Op,NC0,NC1},
        get_data_ids(C,NC0,Vi,Vi0,D,D0,I,L0,DS,Ni,Ni0),
        get_data_ids(C1,NC1,Vi0,Vi1,D0,D1,I,L1,DS,Ni0,Ni1),
        do_or(L0,L1,L).
get_data_ids({Op,C},NC,Vi,Vi1,D,D1,I,L,DS,Ni,Ni1) :- (Op= '\' ; Op=not) |
        NC={Op,NC1},
        get_data_ids(C,NC1,Vi,Vi1,D,D1,I,L0,DS,Ni,Ni1),
        do_not(L0,L,I).
get_data_ids(true,NC,Vi,Vi1,D,D1,_,L,_,Ni,Ni1) :- true |
        NC=true,Vi=Vi1,D=D1,L=true,Ni=Ni1.

otherwise.
get_data_ids(C,NC,Vi,Vi1,D,D1,_,L,_,Ni,Ni1) :- true |
        C=NC,Vi=Vi1,D=D1,L=[],Ni=Ni1,
        raise_error(condition,C).

get_attr_position([P0],_,P) :- true | P:=P0.
get_attr_position([],Idx,P) :- true |
        P:=0,
        raise_error(attr_name,Idx).

get_ids0(Key,Key1,Vi,Vi1,D,D1,I,L,P) :- wait(P) |
        set_vector_element(Vi,P,E,E1,Vi1),
        get_ids(Key,Key1,E,E1,D,D1,I,L,P).

get_ids(Key,Key1,{Index,In,Comp},E1,D,D1,_,L,_) :- true |
        E1={Index,In1,Comp},
        D=D1,
%        In=[get_index_list(Key,Key1,L)|In1].
        Key=Key1,
        In=[carbon_copy(Key,L)|In1].
get_ids(Key,Key1,E,E1,D,D1,I,L,Idx) :- (E=none(_) ; E=0) |
        E=E1,
        linear_search(Key,Key1,Idx,0,D,D1,I,L).

linear_search(Key,Key1,P,J,D,D1,I,L) :- J<I,vector_element(D,J,X),vector_element(X,P,K),K=Key |
        L=[J|L1],
        linear_search(Key,Key1,P,~(J+1),D,D1,I,L1).
linear_search(Key,Key1,P,J,D,D1,I,L) :- J<I,vector_element(D,J,0) |
        linear_search(Key,Key1,P,~(J+1),D,D1,I,L).
linear_search(Key,Key1,_,I,D,D1,I,L) :- true | Key=Key1,D=D1,L=[].
otherwise.
linear_search(Key,Key1,P,J,D,D1,I,L) :- true |          % when J<I,vector_element(D,J,X),
        linear_search(Key,Key1,P,~(J+1),D,D1,I,L).      %   vector_element(X,P,K),K\=Key

do_and(X,Y,Z) :- X\=true,Y\=true |
        sorter:sort(X,X1),
        sorter:sort(Y,Y1),
        do_do_and(X1,Y1,Z).
do_and(true,Y,Z) :- true | Y=Z.
do_and(X,true,Z) :- true | X=Z.

do_and0(X,Y,Z) :- true |
        sorter:sort(Y,Y1),
        do_do_and(X,Y1,Z).

do_do_and([P|X],[Q|Y],Z) :- P<Q |
        get_away_x(X,Y,Z,Q).
do_do_and([P|X],[Q|Y],Z) :- P>Q |
        get_away_y(X,Y,Z,P).
do_do_and([P|X],[P|Y],Z) :- true |
        Z=[P|Z1],
        do_do_and(X,Y,Z1).
do_do_and([],_,Z) :- true | Z=[].
do_do_and(_,[],Z) :- true | Z=[].

get_away_x([P|X],Y,Z,Q) :- P<Q |
        get_away_x(X,Y,Z,Q).
get_away_x([P|X],Y,Z,Q) :- P>Q |
        get_away_y(X,Y,Z,P).
get_away_x([P|X],Y,Z,P) :- true |
        Z=[P|Z1],
        do_do_and(X,Y,Z1).
get_away_x([],_,Z,_) :- true |
        Z=[].

get_away_y(X,[Q|Y],Z,P) :- Q<P |
        get_away_y(X,Y,Z,P).
get_away_y(X,[Q|Y],Z,P) :- Q>P |
        get_away_x(X,Y,Z,Q).
get_away_y(X,[Q|Y],Z,Q) :- true |
        Z=[Q|Z1],
        do_do_and(X,Y,Z1).
get_away_y(_,[],Z,_) :- true |
        Z=[].

do_or(X,Y,Z) :- X\=true,Y\=true |
        sorter:sort(X,X1),
        sorter:sort(Y,Y1),
        do_do_or(X1,Y1,Z).
otherwise.
do_or(_,_,Z) :- true | Z=true.

do_do_or([P|X],[Q|Y],Z) :- P<Q |
        Z=[P|Z1],
        consume_x(X,Y,Z1,Q).
do_do_or([P|X],[Q|Y],Z) :- P>Q |
        Z=[Q|Z1],
        consume_y(X,Y,Z1,P).
do_do_or([P|X],[P|Y],Z) :- true |
        Z=[P|Z1],
        do_do_or(X,Y,Z1).
do_do_or([],Y,Z) :- true | Y=Z.
do_do_or(X,[],Z) :- true | X=Z.

consume_x([P|X],Y,Z,Q) :- P<Q |
        Z=[P|Z1],
        consume_x(X,Y,Z1,Q).
consume_x([P|X],Y,Z,Q) :- P>Q |
        Z=[Q|Z1],
        consume_y(X,Y,Z1,P).
consume_x([P|X],Y,Z,P) :- true |
        Z=[P|Z1],
        do_do_or(X,Y,Z1).
consume_x([],Y,Z,Q) :- true |
        Z=[Q|Y].

consume_y(X,[Q|Y],Z,P) :- Q<P |
        Z=[Q|Z1],
        consume_y(X,Y,Z1,P).
consume_y(X,[Q|Y],Z,P) :- Q>P |
        Z=[P|Z1],
        consume_x(X,Y,Z1,Q).
consume_y(X,[Q|Y],Z,Q) :- true |
        Z=[Q|Z1],
        do_do_or(X,Y,Z1).
consume_y(X,[],Z,P) :- true |
        Z=[P|X].

do_not(L,L1,N) :- list(L) |
        sorter:sort(L,L0),
        do_do_not(L0,L1,N,0).
do_not(true,L1,_) :- true | L1=[].
do_not([],L1,_) :- true | L1=true.

do_do_not([P|L],L1,N,I) :- P>I |
        L1=[I|L2],
        do_do_not([P|L],L2,N,~(I+1)).
do_do_not([P|L],L1,N,P) :- true |
        do_do_not(L,L1,N,~(P+1)).
do_do_not([],L,N,I) :- true |
        append_rest(I,L,N).

append_rest(I,L,N) :- I<N |
        L=[I|L1],
        append_rest(~(I+1),L1,N).
append_rest(N,L,N) :- true |
        L=[].


add_to_indexes([I|Li],Vi,Vi1,X,X1,P) :- true |
        set_vector_element(Vi,I,E,E1,Vi0),
        get_index_stream(E,E1,In,In1),
        vector_element(X,I,K,X0),
        In=[put(K,P)|In1],
        add_to_indexes(Li,Vi0,Vi1,X0,X1,P).
add_to_indexes([],Vi,Vi1,X,X1,_) :- true | Vi=Vi1,X=X1.

get_index_stream(ordered(St,Comp),E1,In,In1) :- true |
        In=St,E1=ordered(In1,Comp).
get_index_stream(hashed(St,Comp),E1,In,In1) :- true |
        In=St,E1=hashed(In1,Comp).

modify_indexes(Li,Vi,Vi1,X,X1,Y,Y1,P,DS,Msg,C) :- true |
        modify_indexes(Li,Vi,Vi1,X,X1,P,Ky_list),
        unify_new_keyes(Li,Ky_list,Y,Y1,DS,Msg,C).

modify_indexes([I|Li],Vi,Vi1,X,X1,P,Ky_list) :- true |
        set_vector_element(Vi,I,E,E1,Vi0),
        get_index_stream(E,E1,In,In1),
        vector_element(X,I,Kx,X0),
        In=[get_all(Kx,A)|In0],
        modify_index(A,P,In0,In1,Kx,Ky0),
        Ky_list=[Ky0|Ky_list1],
        modify_indexes(Li,Vi0,Vi1,X0,X1,P,Ky_list1).
modify_indexes([],Vi,Vi1,X,X1,_,Ky_list) :- true |
        Vi=Vi1,X=X1,Ky_list=[].

unify_new_keyes(Li,Ky_list,Y,Y1,DS,_,_) :- vector(Y,DS) |
        unify_new_keyes(Li,Ky_list,Y,Y1).
otherwise.
unify_new_keyes(_,_,Y,Y1,_,get_and_put_if_any,C) :- true |
        Y1=0,
        raise_error(data_fmt,get_and_put_if_any(C,_,Y,_)).
otherwise.
unify_new_keyes(_,_,Y,Y1,_,Msg,C) :- true |     % Msg = get_and_put;get_if_any_and_put
        Y1=0,
        raise_error(data_fmt,{Msg,C,_,Y}).

unify_new_keyes([I|Li],[Ky0|Ky_list],Y,Y1) :- true |
        vector_element(Y,I,Ky,Y0),
        Ky0=Ky,
        unify_new_keyes(Li,Ky_list,Y0,Y1).
unify_new_keyes([],[],Y,Y1) :- true | Y=Y1.

modify_indexes([I|Li],Vi,Vi1,X,X1,Y,Y1,P) :- true |
        set_vector_element(Vi,I,E,E1,Vi0),
        get_index_stream(E,E1,In,In1),
        vector_element(X,I,Kx,X0),
        vector_element(Y,I,Ky,Y0),
        In=[get_all(Kx,A)|In0],
        modify_index(A,P,In0,In1,Kx,Ky),
        modify_indexes(Li,Vi0,Vi1,X0,X1,Y0,Y1,P).
modify_indexes([],Vi,Vi1,X,X1,Y,Y1,_) :- true |
        Vi=Vi1,X=X1,Y=Y1.

modify_index([P|A],P,In,In1,E,F) :- true |
        In=[put(F,P)|In0],
        return_ids(A,E,In0,In1).
modify_index([Q|A],P,In,In1,E,F) :- Q=\=P |
        In=[put(E,Q)|In0],
        modify_index(A,P,In0,In1,E,F).

return_ids([P|A],E,In,In1) :- true |
        In=[put(E,P)|In0],
        return_ids(A,E,In0,In1).
return_ids([],_,In,In1) :- true | In=In1.

%*** remake ***
remake(I,N,Li,Vi,Vi1,D,P,ND,ND1) :- I<N |
        set_vector_element(D,I,X,0,D1),
        if_move_element(Li,Vi,Vi0,X,P,P1,ND,ND0),
        remake(~(I+1),N,Li,Vi0,Vi1,D1,P1,ND0,ND1).
remake(N,N,_,Vi,Vi1,_,_,ND,ND1) :- true |
        Vi=Vi1,ND=ND1.

if_move_element(Li,Vi,Vi1,X,P,P1,ND,ND1) :- vector(X,_) |
        set_vector_element(ND,P,_,X1,ND1),
        add_to_indexes(Li,Vi,Vi1,X,X1,P),
        P1:=P+1.
if_move_element(_,Vi,Vi1,0,P,P1,ND,ND1) :- true |
        Vi=Vi1,P1:=P,ND=ND1.

clear_indexes([I|Li],Vi,Vi1) :- true |
        set_vector_element(Vi,I,E,E1,Vi0),
        get_index_stream(E,E1,In,In1),
%        In=[get_all(_)|In1],
        In=[clear|In1],
        clear_indexes(Li,Vi0,Vi1).
clear_indexes([],Vi,Vi1) :- true | Vi=Vi1.

%*** pack ***
pack(Li,Vi,Vi1,D,D1,I) :- true |
        clear_indexes(Li,Vi,Vi0),
        do_pack(Li,Vi0,Vi1,D,D1,0,~(I-1)).

do_pack(Li,Vi,Vi1,D,D1,Top,Bot) :- Top<Bot |
        find_space(Li,Vi,Vi1,D,D1,Top,Bot).
do_pack(Li,Vi,Vi1,D,D1,Top,Bot) :- Top=:=Bot,vector_element(D,Top,E),vector(E,_) |
        set_vector_element(D,Top,X,X1,D1),
        add_to_indexes(Li,Vi,Vi1,X,X1,Top).
do_pack(_,Vi,Vi1,D,D1,Top,Bot) :- Top=:=Bot,vector_element(D,Top,0) |
        Vi=Vi1,D=D1.
do_pack(_,Vi,Vi1,D,D1,Top,Bot) :- Top>Bot |
        Vi=Vi1,D=D1.

find_space(Li,Vi,Vi1,D,D1,Top,Bot) :- vector_element(D,Top,0) |
        find_element(Li,Vi,Vi1,D,D1,Top,Bot).
find_space(Li,Vi,Vi1,D,D1,Top,Bot) :- vector_element(D,Top,E),vector(E,_) |
        set_vector_element(D,Top,X,X1,D0),
        add_to_indexes(Li,Vi,Vi0,X,X1,Top),
        do_pack(Li,Vi0,Vi1,D0,D1,~(Top+1),Bot).

find_element(Li,Vi,Vi1,D,D1,Top,Bot) :- Top<Bot |
        do_find_element(Li,Vi,Vi1,D,D1,Top,Bot).
find_element(_,Vi,Vi1,D,D1,Top,Bot) :- Top>=Bot |
        Vi=Vi1,D=D1.

do_find_element(Li,Vi,Vi1,D,D1,Top,Bot) :- vector_element(D,Bot,0) |
        find_element(Li,Vi,Vi1,D,D1,Top,~(Bot-1)).
do_find_element(Li,Vi,Vi1,D,D2,Top,Bot) :- vector_element(D,Bot,E),vector(E,_) |
        set_vector_element(D,Bot,X,0,D0),
        set_vector_element(D0,Top,_,X1,D1),
        add_to_indexes(Li,Vi,Vi0,X,X1,Top),
        do_pack(Li,Vi0,Vi1,D1,D2,~(Top+1),~(Bot-1)).


%*** get_part ***
get_part(F,F1,X,Y,Ni,Ni1,DS) :- true |
        get_format(F,F1,N,L,Ni,Ni1,DS),
        new_vector(Y0,N),
        part(L,_,X,Y0,Y,0).

part([I|L],L1,X,Y,Y1,J) :- true |
        set_vector_element(X,I,E,0,X1),
        set_vector_element(Y,J,_,E,Y0),
        L1=[I|L2],
        part(L,L2,X1,Y0,Y1,~(J+1)).
part([],L1,_,Y,Y1,_) :- true | L1=[],Y=Y1.

%*** get_part_if_any ***
get_part_if_any(F,X,Y,Ni,Ni1,DS) :- true |
        get_format(F,_,N,L,Ni,Ni1,DS),
        do_get_part_if_any(L,X,Y,DS,N).

do_get_part_if_any(L,X,Y,DS,N) :- vector(X,DS) |
        new_vector(Y0,N),
        part(L,_,X,Y0,Y,0).
do_get_part_if_any(_,{},Y,_,_) :- true | Y={}.

%*** get_part_all ***
get_part_all(F,A0,A,Ni,Ni1,DS) :- true |
        get_format(F,_,N,L,Ni,Ni1,DS),
        get_part_all(L,A0,A,N).

get_part_all(L,[X|A],A1,N) :- true |
        new_vector(Y0,N),
        part(L,L1,X,Y0,Y,0),
        A1=[Y|A2],
        get_part_all(L1,A,A2,N).
get_part_all(_,[],A,_) :- true | A=[].

%*** unify_part ***
unify_part(InP,P,N,_) :- vector(P,N) |
        do_unify_part(InP,P,0).
otherwise.
unify_part(_,P,_,getp_and_put) :- true |
        raise_error(data_fmt,getp_and_put(_,_,_,P)).
unify_part(_,P,_,getp_and_put_if_any) :- true |
        raise_error(data_fmt,getp_and_put_if_any(_,_,_,P,_)).
unify_part(_,P,_,getp_and_put_all) :- true |
        raise_error(data_fmt,getp_and_put_all(_,_,_,P)).

do_unify_part([E|InP],P,J) :- true |
        set_vector_element(P,J,E,0,P1),
        do_unify_part(InP,P1,~(J+1)).
do_unify_part([],_,_) :- true | true.

%*** get_format ***
get_format(F,F1,N,L,Ni,Ni1,DS) :- vector(F,N0),N0>0 |
        N:=N0,
        get_format(F,F1,N,L,Ni,Ni1,DS,0).
otherwise.
get_format(F,F1,N,L,Ni,Ni1,_) :- true |
        F=F1,N:=0,L=[],Ni=Ni1,
        raise_error(fmt_partial,F).

get_format(F,F1,N,L,Ni,Ni1,DS,I) :- I<N |
        set_vector_element(F,I,E,E,F0),
        if_correct(E,L,L1,DS,Ni,Ni0),
        get_format(F0,F1,N,L1,Ni0,Ni1,DS,~(I+1)).
get_format(F,F1,N,L,Ni,Ni1,_,N) :- true |
        F=F1,L=[],Ni=Ni1.

if_correct(Attr,L,L1,DS,Ni,Ni1) :- 0=<Attr,Attr<DS |
        Ni=Ni1,L=[Attr|L1].
if_correct(Attr,L,L1,_,Ni,Ni1) :- atom(Attr) |
        Ni=[carbon_copy(Attr,Res)|Ni1],
        if_if_correct(Attr,L,L1,Res).
otherwise.
if_correct(Attr,_,_,_,Ni,Ni1) :- true |
        Ni=Ni1,
        raise_error(attr_name,Attr).

if_if_correct(_,L,L1,[P]) :- true | L=[P|L1].
if_if_correct(Attr,L,L1,[]) :- true |
        L=L1,
        raise_error(attr_name,Attr).

raise_error(Kind,Msg) :- true |
        raise_error(Kind,multiply_keyed_bag,Msg).

raise_error(Kind,Name,Msg) :- true |
        get_msg(Kind,Str),
        do_raise(Str,Name,Msg).

do_raise(Str,Name,Msg) :- wait(Str) |
        shoen:raise(pimos_tag#error,'$PIMOS$'(Name,Str),Msg).

get_msg(init_param,S) :- true | S="illegal_initiation_parameter".
get_msg(init_param(o),S) :- true | S="illegal_initiation_parameter_for_ordered_index".
get_msg(init_param(h),S) :- true | S="illegal_initiation_parameter_for_hashed_index".
get_msg(init_param(n),S) :- true | S="illegal_initiation_parameter_for_no_index".
get_msg(double_attr_name,S) :- true | S="doubly_defined_attribute_name".
get_msg(index_type,S) :- true | S="illegal_index_type".
get_msg(msg_protocol,S) :- true | S="illegal_message_protocol".
get_msg(condition,S) :- true | S="illegal_condition".
get_msg(fmt_partial,S) :- true | S="illegal_format_for_partial_reference".
get_msg(sort_param,S) :- true | S="illegal_sorting_parameter".
get_msg(nonexistent,S) :- true | S="tried_to_get_nonexistent_element".
get_msg(init_data_fmt,S) :- true | S="illegal_data_format".
get_msg(data_fmt,S) :- true | S="illegal_data_format in ".
get_msg(attr_name,S) :- true | S="illegal_attribute_name".
otherwise.
get_msg(_,S) :- true | S="".
