%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                          %
% (C)1992 Institute for New Generation Computer Technology %
% Read COPYRIGHT for detailed information.                 %
%                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
:- module pool_usage.
:- with_macro pimos.
:- public 
    comparator/1,hasher/1,
    pool/1,
    bag/1,stack/1,queue/1,sorted_bag/1,
    keyed_bag/1,keyed_set/1,
    keyed_sorted_bag/1,keyed_sorted_set/1,
    multiply_keyed_bag/1,
    sorter/1.

comparator(L) :- true |
        L=[
        {"~s~n",["Usage : comparator:sort(X,Y,^Smaller,^Larger,^Swapped)"]},
        {"~s",  ["Usage : comparator:descending_sort(X,Y,^Larger,^Smaller,^Swapped)"]}].

hasher(L) :- true |
        L=[
        {"~s",  ["Usage : hasher:hash(X,^HashedValue,^NewX)"]}].

pool(L) :- true |
        usage_line(L,L0),
        L0=[
        {"~s~n",["  usage(bag)"]},
        {"~s~n",["  usage(stack)"]},
        {"~s~n",["  usage(queue)"]},
        {"~s~n",["  usage(sorted_bag)"]},
        {"~s~n",["  usage(keyed_bag)"]},
        {"~s~n",["  usage(keyed_set)"]},
        {"~s~n",["  usage(keyed_sorted_bag)"]},
        {"~s~n",["  usage(keyed_sorted_set)"]},
        {"~s",  ["  usage(multiply_keyed_bag)"]}
        ].

usage_line(L,L1) :- true | L=[{"~s~n",["Usage :"]}|L1].
msgs_line(L,L1) :- true | L=[{"~s~n",["Messages :"]}|L1].

bag(L) :- true |
        usage_line(L,L0),
        L0=[{"~s~n",["  pool:bag(S*)"]}|L1],
        msgs_bag(L1).

stack(L) :- true |
        usage_line(L,L0),
        L0=[{"~s~n",["  pool:stack(S*)"]}|L1],
        msgs_bag(L1).

queue(L) :- true |
        usage_line(L,L0),
        L0=[{"~s~n",["  pool:queue(S*)"]}|L1],
        msgs_bag(L1).

sorted_bag(L) :- true |
        usage_line(L,L0),
        L0=[{"~s~n",["  pool:sorted_bag(S*)"]},
            {"~s~n",["  pool:sorted_bag(Comparator,S*)"]}|L1],
        msgs_sorted_bag(L1).

keyed_bag(L) :- true |
        usage_line(L,L0),
        L0=[{"~s~n",["  pool:keyed_bag(S*)"]},
            {"~s~n",["  pool:keyed_bag(S*,Size)"]},
            {"~s~n",["  pool:keyed_bag(Hasher,S*,Size)"]}|L1],
        msgs_keyed_bag(L1).

keyed_set(L) :- true |
        usage_line(L,L0),
        L0=[{"~s~n",["  pool:keyed_set(S*)"]},
            {"~s~n",["  pool:keyed_set(S*,Size)"]},
            {"~s~n",["  pool:keyed_set(Hasher,S*,Size)"]}|L1],
        msgs_keyed_set(L1).

keyed_sorted_bag(L) :- true |
        usage_line(L,L0),
        L0=[{"~s~n",["  pool:keyed_sorted_bag(S*)"]},
            {"~s~n",["  pool:keyed_sorted_bag(Comparator,S*)"]}|L1],
        msgs_keyed_sorted_bag(L1).

keyed_sorted_set(L) :- true |
        usage_line(L,L0),
        L0=[{"~s~n",["  pool:keyed_sorted_set(S*)"]},
            {"~s~n",["  pool:keyed_sorted_set(Comparator,S*)"]}|L1],
        msgs_keyed_sorted_set(L1).

multiply_keyed_bag(L) :- true |
        usage_line(L,L0),
        L0=[{"~s~n",["  pool:multiply_keyed_bag(Format,S*)"]},
            {"~s~n",["  pool:multiply_keyed_bag(Format,Init,S*)"]}|L1],
        msgs_multiply_keyed_bag(L1).

msgs_bag(L) :- true |
        msgs_line(L,L0),
        L0=[
        {"~s~n",["  empty(^YorN)"]},
        {"~s~n",["  put(Data)"]},
        {"~s~n",["  get(^Data)"]},
        {"~s~n",["  get_if_any(^X)  , X={Data};{}"]},
        {"~s~n",["  get_all(^O)     , O=[Data, .. ]"]},
        {"~s~n",["  carbon_copy(^O) , O=[Data, .. ]"]},
        {"~s",  ["  do(S*)"]}].

msgs_sorted_bag(L) :- true |
        msgs_line(L,L0),
        L0=[
        {"~s~n",["  empty(^YorN)"]},
        {"~s~n",["  put(Data)"]},
        {"~s~n",["  get(^Data)"]},
        {"~s~n",["  get_if_any(^X)     , X={Data};{}"]},
        {"~s~n",["  get_max_if_any(^X) , X={Data};{}"]},
        {"~s~n",["  get_min_if_any(^X) , X={Data};{}"]},
        {"~s~n",["  get_all(^O)        , O=[Data, .. ]"]},
        {"~s~n",["  carbon_copy(^O)    , O=[Data, .. ]"]},
        {"~s",  ["  do(S*)"]}].

msgs_keyed_bag(L) :- true |
        msgs_line(L,L0),
        msgs_k_empty(L0,L1),
        msgs_k_b_put(L1,L2),
        msgs_k_common(L2,L3),
        msgs_k_get_all_common(L3,L4),
        msgs_k_hash(L4,L5),
        msgs_do(L5).

msgs_keyed_set(L) :- true |
        msgs_line(L,L0),
        msgs_k_empty(L0,L1),
        msgs_k_s_put(L1,L2),
        msgs_k_common(L2,L3),
        msgs_k_get_all_common(L3,L4),
        msgs_k_hash(L4,L5),
        msgs_do(L5).

msgs_keyed_sorted_bag(L) :- true |
        msgs_line(L,L0),
        msgs_k_empty(L0,L1),
        msgs_k_b_put(L1,L2),
        msgs_k_common(L2,L3),
        msgs_k_get_all_with_conditional(L3,L4),
        msgs_k_maxmin(L4,L5),
        msgs_do(L5).

msgs_keyed_sorted_set(L) :- true |
        msgs_line(L,L0),
        msgs_k_empty(L0,L1),
        msgs_k_s_put(L1,L2),
        msgs_k_common(L2,L3),
        msgs_k_get_all_with_conditional(L3,L4),
        msgs_k_maxmin(L4,L5),
        msgs_do(L5).

msgs_k_empty(L,L1) :- true |
        L=[
        {"~s~n",["  empty(^YorN)"]},
        {"~s~n",["  empty(Key,^YorN)"]}
        |L1].

msgs_k_b_put(L,L1) :- true |
        L=[
        {"~s~n",["  put(Key,Data)"]}
        |L1].

msgs_k_s_put(L,L1) :- true |
        L=[
        {"~s~n",["  put(Key,Data,OldData)"]}
        |L1].

msgs_k_common(L,L1) :- true |
        L=[
        {"~s~n",["  get(Key,^Data)"]},
        {"~s~n",["  get_if_any(Key,^X)  , X={Data};{}"]},
        {"~s~n",["  get_and_put(Key,^Data,NewData)"]},
        {"~s~n",["  get_if_any_and_put(Key,^X,NewData) , X={Data};{}"]},
        {"~s~n",["  get_and_put_if_any(Key,^X,NewData,^Y)"]},
        {"~s~n",["                , X={Data},Y={} ; X={},Y={NewData}"]}
        |L1].

msgs_k_get_all_common(L,L1) :- true |
        L=[
        {"~s~n",["  get_all(^O)         , O=[{Key,Data}, .. ]"]},
        {"~s~n",["  get_all(Key,^O)     , O=[Data, .. ]"]},
        {"~s~n",["  carbon_copy(^O)     , O=[{Key,Data}, .. ]"]},
        {"~s~n",["  carbon_copy(Key,^O) , O=[Data, .. ]"]}
        |L1].

msgs_k_get_all_with_conditional(L,L1) :- true |
        L=[
        {"~s~n",["  get_all(^O)                  , O=[{Key,Data}, .. ]"]},
        {"~s~n",["  get_all(Key,^O)              , O=[Data, .. ]"]},
        {"~s~n",["  get_all_conditional(C,^O)    , O=[{Key,Data}, .. ]"]},
        {"~s~n",["  carbon_copy(^O)              , O=[{Key,Data}, .. ]"]},
        {"~s~n",["  carbon_copy(Key,^O)          , O=[Data, .. ]"]},
        {"~s~n",["  carbon_copy_conditional(C,^O), O=[{Key,Data}, .. ]"]}
        |L1].

msgs_k_hash(L,L1) :- true |
        L=[
        {"~s~n",["  get_load_facter(^A)"]},
        {"~s~n",["  get_average_chaining_length(^L)"]}
        |L1].

msgs_k_maxmin(L,L1) :- true |
        L=[
        {"~s~n",["  get_max_if_any(^X)  , X={Key,Data};{}"]},
        {"~s~n",["  get_min_if_any(^X)  , X={Key,Data};{}"]}
        |L1].

msgs_do(L) :- true |
        L=[{"~s",  ["  do(S*)"]}].

msgs_multiply_keyed_bag(L) :- true |
        msgs_line(L,L0),
        L0=[
        {"~s~n",["  empty(^YorN)"]},
        {"~s~n",["  empty(C,^YorN)"]},
        {"~s~n",["  put(X)"]},
        {"~s~n",["  get(C,^X)"]},
        {"~s~n",["  getp(C,F,^SubX)"]},
        {"~s~n",["  get_if_any(C,^X)"]},
        {"~s~n",["  getp_if_any(C,F,^SubX)"]},
        {"~s~n",["  max_if_any(Attr,^Key)"]},
        {"~s~n",["  min_if_any(Attr,^Key)"]},
        {"~s~n",["  get_and_put(C,^X,Y)"]},
        {"~s~n",["  getp_and_put(C,F,^X,Y)"]},
        {"~s~n",["  get_if_any_and_put(C,^X,Y)"]},
        {"~s~n",["  get_and_put_if_any(C,^X,Y,^Y1)"]},
        {"~s~n",["  getp_and_put_if_any(C,F,^X,Y,^Y1)"]},
        {"~s~n",["  get_all(^O)           , O=[X, .. ]"]},
        {"~s~n",["  get_all(C,^O)         , O=[X, .. ]"]},
        {"~s~n",["  get_all(C,S,^O)       , O=[X, .. ]"]},
        {"~s~n",["  getp_all(F,^O)        , O=[SubX, .. ]"]},
        {"~s~n",["  getp_all(C,F,^O)      , O=[SubX, .. ]"]},
        {"~s~n",["  getp_all(C,S,F,^O)    , O=[SubX, .. ]"]},
        {"~s~n",["  carbon_copy(^O)       , O=[X, .. ]"]},
        {"~s~n",["  carbon_copy(C,^O)     , O=[X, .. ]"]},
        {"~s~n",["  carbon_copy(C,S,^O)   , O=[X, .. ]"]},
        {"~s~n",["  carbon_copyp(F,^O)    , O=[X, .. ]"]},
        {"~s~n",["  carbon_copyp(C,F,^O)  , O=[X, .. ]"]},
        {"~s~n",["  carbon_copyp(C,S,F,^O), O=[X, .. ]"]},
        {"~s~n",["  pack"]},
        {"~s",  ["  do(S*)"]}].

sorter(L) :- true |
        usage_line(L,L0),
        L0=[
        {"~s~n",["  sorter:sort(InList*,^OutList)"]},
        {"~s~n",["  sorter:sort(InList*,Comparator,^OutList)"]},
        {"~s~n",["  sorter:merge(InList1,InList2,^OutList)"]},
        {"~s~n",["  sorter:merge(InList1,InList2,Comparator,^OutList)"]},
        {"~s~n",["  ( InList=[Data, .. ], OutList=[Data, .. ] )"]}
        |L1],
        usage_line(L1,L2),
        L2=[
        {"~s~n",["  sorter:key_sort(InList*,^OutList)"]},
        {"~s~n",["  sorter:key_sort(InList*,Comparator,^OutList)"]},
        {"~s~n",["  sorter:key_merge(InList1,InList2,^OutList)"]},
        {"~s~n",["  sorter:key_merge(InList1,InList2,Comparator,^OutList)"]},
        {"~s",  ["  ( InList=[{Key,Data}, .. ], OutList=[{Key,Data}, .. ] )"]}].
